<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>醉笑陪公三万场</title>
    <url>/2014/04/19/2014-04-19/</url>
    <content><![CDATA[<p>在百度上看到<a href="http://zhidao.baidu.com/link?url=2FYYejydAEvBpdnti51Ul2MPYlCV6SUQkc821EFyfywhbn1rLQv4PCbPJLBvFDwDIvk0NRdaCY7XqTngf80ltq" target="_blank" rel="noopener">这篇</a>。昨日参加同事婚礼，不胜唏嘘。</p>
<blockquote>
<p>东武望馀杭<br>云海天涯两杳茫<br>何日功成名遂了，还乡<br>醉笑陪公三万场<br>不用诉离觞<br>痛饮从来别有肠<br>今夜送归灯火冷，河塘<br>堕泪羊公却姓杨  </p>
</blockquote>
<p>再后来，又有滚滚红尘中进行了改编：</p>
<blockquote>
<p>楼高日尽<br>望断天涯路<br>来时陌上初熏<br>有情风万里卷潮来<br>推枕惘然不见<br>分携如昨到处萍漂泊<br>浩然相对今夕何年<br>谁道人生无再少<br>依旧梦魂中<br>但有旧欢新怨<br>人生底事往来如梭<br>醉笑陪君三万场 不诉离伤<br>禅心已失人间爱<br>又何曾梦觉<br>这些个千生万生只在<br>踏尽红尘何处是吾乡  </p>
</blockquote>
<p><img src="/images/2014-04-19.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3扁平化风格博客</title>
    <url>/2015/07/08/CSS3%E6%89%81%E5%B9%B3%E5%8C%96%E9%A3%8E%E6%A0%BC%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-页面整体分析"><a href="#1-页面整体分析" class="headerlink" title="1. 页面整体分析"></a>1. 页面整体分析</h2><p>做一个网页或者网站，第一步就是先定义网页与网站的结构，这是所有任务的前提。</p>
<hr>
<h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><p>在这个案例中，我们将使用Gulp, SASS和Compass来创建。</p>
<h3 id="2-1-安装Gulp"><a href="#2-1-安装Gulp" class="headerlink" title="2.1 安装Gulp"></a>2.1 安装Gulp</h3><p>Gulp是为了后期进行自动化工作而做的。</p>
<ul>
<li>如果电脑没有安装node，那么第一步就是下载node，并且安装。</li>
<li>安装http-server来查看网页: <code>npm install -g http-server</code> </li>
<li>全局安装gulp: <code>sudo npm install -g gulp</code> </li>
<li>初始化项目： <code>npm init</code> </li>
<li>安装gulp及常用库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br><span class="line">npm install gulp-concat --save-dev</span><br><span class="line">npm install gulp-uglify --save-dev</span><br><span class="line">npm install gulp-rename --save-dev</span><br><span class="line">npm install gulp-minify-css --save-dev</span><br><span class="line">npm install gulp-sass --save-dev</span><br><span class="line">npm install gulp-compass --save-dev</span><br><span class="line">npm install gulp-sourcemaps</span><br><span class="line">npm install del --save-dev</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安装SASS与Compass"><a href="#2-2-安装SASS与Compass" class="headerlink" title="2.2 安装SASS与Compass"></a>2.2 安装SASS与Compass</h3><ul>
<li>如果没有安装ruby，请先安装ruby</li>
<li>配置ruby gem的source:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gem sources --remove https:&#x2F;&#x2F;rubygems.org&#x2F;</span><br><span class="line">$ gem sources -a https:&#x2F;&#x2F;ruby.taobao.org&#x2F;</span><br><span class="line">$ gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">https:&#x2F;&#x2F;ruby.taobao.org</span><br><span class="line"></span><br><span class="line"># 请确保只有 ruby.taobao.org</span><br><span class="line">$ gem install rails #安装</span><br><span class="line">$ gem update #更新</span><br><span class="line">$ gem install sass --version&#x3D;3.3</span><br><span class="line">$gem uninstall sass</span><br></pre></td></tr></table></figure>

<ul>
<li>安装SASS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gem install sass</span><br><span class="line">$gem install sass --version&#x3D;3.3</span><br><span class="line">$sass -v</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Compass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem isntall compass</span><br></pre></td></tr></table></figure>

<p>接下来我们来配置项目</p>
<h3 id="2-3-使用Compass配置SASS"><a href="#2-3-使用Compass配置SASS" class="headerlink" title="2.3 使用Compass配置SASS"></a>2.3 使用Compass配置SASS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compass create</span><br></pre></td></tr></table></figure>

<p>一般来说，我们使用 <code>compass create [项目名]</code> 来创建项目，但是我们在之前已经使用 <code>node init</code> 初始化过了，所以此处我们略去项目名。</p>
<h3 id="2-4-配置bower"><a href="#2-4-配置bower" class="headerlink" title="2.4 配置bower"></a>2.4 配置bower</h3><p>创建 <code>.bowerrc</code> 文件，然后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;directory&quot;: &quot;lib&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是指定bower安装的第三方库都在lib目录下。</p>
<h3 id="2-5-创建gulp任务"><a href="#2-5-创建gulp任务" class="headerlink" title="2.5 创建gulp任务"></a>2.5 创建gulp任务</h3><p>在根目录下创建gulpfile.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">var gulp &#x3D; require(&#39;gulp&#39;),</span><br><span class="line">    concat &#x3D; require(&#39;gulp-concat&#39;),</span><br><span class="line">    uglify &#x3D; require(&#39;gulp-uglify&#39;),</span><br><span class="line">    rename &#x3D; require(&#39;gulp-rename&#39;),</span><br><span class="line">    compass &#x3D; require(&#39;gulp-compass&#39;),</span><br><span class="line">    minifyCss &#x3D; require(&#39;gulp-minify-css&#39;),</span><br><span class="line">    maps &#x3D; require(&#39;gulp-sourcemaps&#39;),</span><br><span class="line">    del &#x3D; require(&#39;del&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编译JavaScript</span><br><span class="line">gulp.task(&#39;concatScripts&#39;, function() &#123;</span><br><span class="line">    return gulp.src([</span><br><span class="line">            &#39;js&#x2F;jquery.js&#39;,</span><br><span class="line">            &#39;js&#x2F;main.js&#39;</span><br><span class="line">        ])</span><br><span class="line">        .pipe(maps.init())</span><br><span class="line">        .pipe(concat(&quot;app.js&quot;))</span><br><span class="line">        .pipe(maps.write(&#39;.&#x2F;&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;js&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;压缩JavaScript</span><br><span class="line">gulp.task(&#39;minifyScripts&#39;, [&#39;concatScripts&#39;], function() &#123;</span><br><span class="line">    return gulp.src(&quot;js&#x2F;app.js&quot;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(rename(&#39;app.min.js&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;js&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;编译SASS</span><br><span class="line">gulp.task(&#39;compileSass&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;scss&#x2F;*.scss&#39;)</span><br><span class="line">        .pipe(compass(&#123;</span><br><span class="line">            config_file: &#39;.&#x2F;config.rb&#39;,</span><br><span class="line">            css: &#39;css&#39;,</span><br><span class="line">            sass: &#39;scss&#39;,</span><br><span class="line">            sourcemap: true</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;css&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;压缩CSS</span><br><span class="line">gulp.task(&#39;minifyCss&#39;, [&#39;compileSass&#39;], function()&#123;</span><br><span class="line">    return gulp.src(&quot;css&#x2F;application.css&quot;)</span><br><span class="line">        .pipe(minifyCss(&#123;compatibility: &#39;ie8&#39;&#125;))</span><br><span class="line">        .pipe(rename(&#39;application.min.css&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;css&#39;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;监视</span><br><span class="line">gulp.task(&#39;watchFiles&#39;, function() &#123;</span><br><span class="line">    gulp.watch([&#39;scss&#x2F;**&#x2F;*.scss&#39;, &#39;scss&#x2F;*.scss&#39;], [&#39;compileSass&#39;]);</span><br><span class="line">    gulp.watch(&#39;js&#x2F;main.js&#39;, [&#39;concatScripts&#39;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;清理</span><br><span class="line">gulp.task(&#39;clean&#39;, function() &#123;</span><br><span class="line">    del([&#39;dist&#39;, &#39;css&#x2F;application*.css*&#39;, &#39;js&#x2F;app*.js*&#39;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;构建</span><br><span class="line">gulp.task(&#39;build&#39;, [&quot;minifyScripts&quot;, &quot;minifyCss&quot;], function() &#123;</span><br><span class="line">    gulp.src([&quot;css&#x2F;application.min.css&quot;,</span><br><span class="line">            &quot;js&#x2F;app.min.js&quot;,</span><br><span class="line">            &quot;index.html&quot;,</span><br><span class="line">            &quot;img&#x2F;**&quot;,</span><br><span class="line">            &quot;fonts&#x2F;**&quot;</span><br><span class="line">        ], &#123;</span><br><span class="line">            base: &#39;.&#x2F;&#39;</span><br><span class="line">        &#125;)</span><br><span class="line">        .pipe(gulp.dest(&#39;dist&#39;))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;服务</span><br><span class="line">gulp.task(&#39;serve&#39;, [&#39;watchFiles&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认任务</span><br><span class="line">gulp.task(&#39;default&#39;, [&#39;clean&#39;], function() &#123;</span><br><span class="line">    gulp.start(&#39;build&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>目前为止我们的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── config.rb</span><br><span class="line">├── css</span><br><span class="line">├── fonts</span><br><span class="line">├── gulpfile.js</span><br><span class="line">├── img</span><br><span class="line">│   ├── banner.jpg</span><br><span class="line">│   ├── pic01.jpg</span><br><span class="line">│   ├── pic02.jpg</span><br><span class="line">│   └── pic03.jpg</span><br><span class="line">├── index.html</span><br><span class="line">├── js</span><br><span class="line">│   ├── jquery.js</span><br><span class="line">│   └── main.js</span><br><span class="line">├── lib</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── del</span><br><span class="line">│   ├── gulp</span><br><span class="line">│   ├── gulp-compass</span><br><span class="line">│   ├── gulp-concat</span><br><span class="line">│   ├── gulp-rename</span><br><span class="line">│   ├── gulp-sass</span><br><span class="line">│   ├── gulp-sourcemaps</span><br><span class="line">│   └── gulp-uglify</span><br><span class="line">├── package.json</span><br><span class="line">└── scss</span><br><span class="line">    ├── application.scss</span><br><span class="line">    └── base</span><br><span class="line">        └── _normalize.scss</span><br></pre></td></tr></table></figure>

<p>经过一番配置，后面我们只需要运行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gulp serve</span><br></pre></td></tr></table></figure>

<p>就可以监视文件的变化，并且自动进行编译了。</p>
<hr>
<h2 id="3-模块分析与细节实现"><a href="#3-模块分析与细节实现" class="headerlink" title="3. 模块分析与细节实现"></a>3. 模块分析与细节实现</h2><h3 id="3-1-重置样式与文件结构"><a href="#3-1-重置样式与文件结构" class="headerlink" title="3.1 重置样式与文件结构"></a>3.1 重置样式与文件结构</h3><p>我们使用normalize来对样式进行重置，normailze的SCSS版本在这里：<a href="https://github.com/JohnAlbin/normalize-scss" target="_blank" rel="noopener">https://github.com/JohnAlbin/normalize-scss</a> 下载到 <code>scss/base/_normalize.scss</code> 。</p>
<p>然后打开 <code>application.scss</code> ，引入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;base&#x2F;normalize&quot;;</span><br></pre></td></tr></table></figure>

<p>就完成对页面的重置了。<br>如果此时定义一个页面如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;link href&#x3D;&quot;css&#x2F;application.css&quot; media&#x3D;&quot;screen, projection&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">            &lt;h1&gt;标题1&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;h2&gt;标题2&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;item 01&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;item 02&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;item 03&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;item 04&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;item 05&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>此时运行 <code>http-server</code> 可以再浏览器的 <code>localhost:8080</code> 中进行查看。</p>
<h3 id="3-2-页头、Banner、正文、页脚的宏观布局"><a href="#3-2-页头、Banner、正文、页脚的宏观布局" class="headerlink" title="3.2 页头、Banner、正文、页脚的宏观布局"></a>3.2 页头、Banner、正文、页脚的宏观布局</h3><p>布局一直都是从大到小，因此刚开始不必对细节过分关注。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;理想的博客&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;css&#x2F;application.css&quot; media&#x3D;&quot;screen, projection&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 页头 --&gt;</span><br><span class="line">    &lt;header id&#x3D;&quot;header&quot; class&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">        &lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;banner&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;!-- &#x2F;页头 --&gt;</span><br><span class="line">    &lt;!-- &#x2F;内容 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- &#x2F;内容 --&gt;</span><br><span class="line">    &lt;!-- 页脚 --&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">    &lt;!-- &#x2F;页脚 --&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-页头结构分析及布局"><a href="#3-3-页头结构分析及布局" class="headerlink" title="3.3 页头结构分析及布局"></a>3.3 页头结构分析及布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;header id&#x3D;&quot;header&quot; class&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;logo&quot;&gt;&lt;a href&#x3D;&quot;#&quot; &gt;理想&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;链接2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;链接3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;链接4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;banner&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;inner&quot;&gt;</span><br><span class="line">            &lt;h1&gt;刘理想&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;p class&#x3D;&quot;sub-heading&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Qui cupiditate quia modi dignissimos .&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;button&gt;了解我&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;more&quot;&gt;更多&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;header&gt;</span><br></pre></td></tr></table></figure>

<p>定义 <code>_header.scss</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nav &#123;</span><br><span class="line">    background: $navbar-bgColor;</span><br><span class="line">    height: $navbar-height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav&#123;</span><br><span class="line">    ul&#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        margin:0;</span><br><span class="line">        float: $navbar-menu-float;</span><br><span class="line">        </span><br><span class="line">        li&#123;</span><br><span class="line">            display: inline;</span><br><span class="line">            line-height: $navbar-height;</span><br><span class="line">            margin-right: $navbar-menu-mright;</span><br><span class="line"></span><br><span class="line">            a&#123;</span><br><span class="line">                line-height: $navbar-height;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                height: inherit;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                color: $navbar-menu-color;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 <code>_logo.scss</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">    font-size: $logo-fontSize;</span><br><span class="line">    font-weight: $logo-fontWeight;</span><br><span class="line">    letter-spacing: $logo-letterSpacing;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    line-height: $logo-lineHeight;</span><br><span class="line">    float: $logo-float;</span><br><span class="line">    padding: $logo-padding;</span><br><span class="line"></span><br><span class="line">    a&#123;</span><br><span class="line">        color: $logo-color;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 <code>_banner.scss</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#banner&#123;</span><br><span class="line">    background: $banner-bgColor;</span><br><span class="line">    height: $banner-height;</span><br><span class="line"></span><br><span class="line">    .inner &#123;</span><br><span class="line">        max-width: $banner-inner-mxwidth;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: $banner-inner-top;</span><br><span class="line">        h1&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .sub-heading&#123;</span><br><span class="line">            line-height: $banner-inner-subheading-lineHeight;</span><br><span class="line">            margin: $banner-inner-subheading-margin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button&#123;</span><br><span class="line">            padding: $banner-button-padding;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .more &#123;</span><br><span class="line">            margin-top: $banner-inner-more-mgTop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 <code>_buttons.scss</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">button&#123;</span><br><span class="line">    border: $button-border;</span><br><span class="line">    background-color: $button-bgColor;</span><br><span class="line">    color: $button-color;</span><br><span class="line">    padding: $button-padding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中变量定义再 <code>_variables.scss</code> :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$navbar-height : 50px;</span><br><span class="line">$navbar-bgColor: #ccc;</span><br><span class="line">$navbar-menu-float: right;</span><br><span class="line">$navbar-logo-float: left;</span><br><span class="line">&#x2F;&#x2F;菜单项右侧外边距</span><br><span class="line">$navbar-menu-mright: 20px;</span><br><span class="line">&#x2F;&#x2F;菜单项的颜色</span><br><span class="line">$navbar-menu-color : #fff;</span><br><span class="line"></span><br><span class="line">&#x2F;*banner*&#x2F;</span><br><span class="line">$banner-height : 700px;</span><br><span class="line">$banner-bgColor: #777;</span><br><span class="line">&#x2F;&#x2F;inner最大宽度</span><br><span class="line">$banner-inner-mxwidth: 300px;</span><br><span class="line">$banner-inner-top: 160px;</span><br><span class="line"></span><br><span class="line">$banner-inner-more-mgTop: 220px;</span><br><span class="line">$banner-inner-subheading-lineHeight: 30px;</span><br><span class="line">$banner-inner-subheading-margin: 30px;</span><br><span class="line">$banner-button-padding: 14px 60px;</span><br><span class="line">&#x2F;*components*&#x2F;</span><br><span class="line">&#x2F;&#x2F;button</span><br><span class="line">$button-border: none;</span><br><span class="line">$button-bgColor: #333;</span><br><span class="line">$button-color: #eee;</span><br><span class="line">$button-padding: 20px;</span><br><span class="line">&#x2F;&#x2F;logo</span><br><span class="line">$logo-fontSize: 20px;</span><br><span class="line">$logo-fontWeight: 700;</span><br><span class="line">$logo-letterSpacing: 1px;</span><br><span class="line">$logo-float: left;</span><br><span class="line">$logo-color: #fff;</span><br><span class="line">$logo-lineHeight: $navbar-height;</span><br><span class="line">$logo-padding: 0 0 0 10px;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-正文部分结构分析及布局"><a href="#3-3-正文部分结构分析及布局" class="headerlink" title="3.3 正文部分结构分析及布局"></a>3.3 正文部分结构分析及布局</h3><p>使用normalize之后，h1~6可能会造成margin collapse，解释在：<br><a href="http://stackoverflow.com/questions/7374657/normalize-css-top-header-gap" target="_blank" rel="noopener">http://stackoverflow.com/questions/7374657/normalize-css-top-header-gap</a></p>
<blockquote>
<p>When an element with a margin is inside an element without border or padding, the margin collapses with the margin of the parent element.</p>
</blockquote>
<p>It’s the margin of the h1 element that you see at the top. As none of the parents have border or padding, the margin collapses all the way out to the outermost container.<br><code>h1, h2, h3, h4, h5, h6{margin:0;padding:0}</code> solve the problem, for the moment.<br>Adding <code>overflow:auto</code> on the parent also keeps the margins from collapsing. </p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python的魔术方法创造更好的正则API</title>
    <url>/2014/07/27/%E4%BD%BF%E7%94%A8Python%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%88%9B%E9%80%A0%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%AD%A3%E5%88%99API/</url>
    <content><![CDATA[<p>原文<a href="http://charlesleifer.com/blog/playing-with-python-magic-methods-to-make-a-nicer-regex-api/" target="_blank" rel="noopener">在此</a></p>
<p>我的一个同事说他怀念Ruby的正则表达式语法糖。我没有用过Ruby的正则表达式，但是我熟悉Python的，并且知道它的API需要一些语法糖来弥补一下。</p>
<p>首先，从正则表达式中获取分组需要2步。第一步，调用match()或者search()，并且将结果付值给一个变量。然后，需要检察结果是否为None(表示是否有找到匹配)。最后，如果匹配确实存在，你可以安全地取出分组。下面是一个例子：</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; match_obj = re.match(&apos;([0-9]+)&apos;, &apos;123foo&apos;)
&gt;&gt;&gt; match_obj  # What is `match_obj`?
&lt;_sre.SRE_Match object at 0x7fd1bb000828&gt;
&gt;&gt;&gt; match_obj.groups()(&apos;123&apos;,)
&gt;&gt;&gt; match_obj = re.match(&apos;([0-9]+)&apos;, &apos;abc&apos;)
&gt;&gt;&gt; match_objNone</code></pre><p>依我来看，如果能像下面这样就更好了：</p>
<pre><code>&gt;&gt;&gt; re.get_matches(&apos;([0-9]+)&apos;, &apos;123foo&apos;)(&apos;123&apos;,)
&gt;&gt;&gt; re.get_matches(&apos;([0-9]+)&apos;, &apos;abc&apos;)None</code></pre><p>另一个我常遇到的问题是弄混re.sub的参数，re.sub是用来查找和替换用的。所需要的参数按照顺序依次是模式(pattern)，替换(replacement)，还有字符串。由于更重各样的原因，对我来说search_string放在replacement前面看着更起来更直接。</p>
<p>不幸的是，弄混这些参数将会导致看上去正确的结果。下面是个例子，为了把单词foo用bar来代替。</p>
<pre><code>&gt;&gt;&gt; re.sub(&apos;foo&apos;, &apos;replace foo with bar&apos;, &apos;bar&apos;)
&apos;bar&apos;
&gt;&gt;&gt; re.sub(&apos;foo&apos;, &apos;bar&apos;, &apos;replace foo with bar&apos;)
&apos;replace bar with bar&apos;</code></pre><p>在上面例子中，有时我们会推测输入的字符串仅仅是foo</p>
<h2 id="糖"><a href="#糖" class="headerlink" title="糖"></a>糖</h2><p>为了有趣，我把加了一些语法糖的helper class和python的正则表达式放在了一起。我不是要每个人都这样做，我的目的是为了让它更有趣，能给你在改进其它库的语法时给你一些启发。</p>
<p>在我展示具体实现之前，先说说我设计的几个API的例子。</p>
<p>在一步操作中同事完成查找和匹配。</p>
<pre><code>&gt;&gt;&gt; def has_lower(s):
...     return bool(R/&apos;[a-z]+&apos;/s)

&gt;&gt;&gt; has_lower(&apos;This contains lower-case&apos;)
True
&gt;&gt;&gt; has_lower(&apos;NO LOWER-CASE HERE!&apos;)
False</code></pre><p>获取分组也很简单</p>
<pre><code>&gt;&gt;&gt; list(R/&apos;([0-9]+)&apos;/&apos;extract 12 the 456 numbers&apos;)
[&apos;12&apos;, &apos;456&apos;]</code></pre><p>最后，你可以适用字符串插入操作来执行替换。</p>
<pre><code>&gt;&gt;&gt; R/&apos;(foo|bar)&apos;/&apos;replace foo and bar&apos; % &apos;Huey!&apos;
&apos;replace Huey! and Huey!&apos;</code></pre><p>则么样，是不是很有意思？</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>具体的实现时非常直接的，并且依赖于Python的魔术方法来提供API。如果有一个简单的技巧，那就是使用元类(metaclass)来实现classmethod的操作符重载。</p>
<pre><code>import re

class _R(type):
    def __div__(self, regex):
        return R(regex)

class R(object):
    __metaclass__ = _R

    def __init__(self, regex):
        self._regex = re.compile(regex)

    def __div__(self, s):
        return RegexOperation(self._regex, s)

class RegexOperation(object):
    def __init__(self, regex, search):
        self._regex = regex
        self._search = search

    def search(self):
        match =  self._regex.search(self._search)
        if match is not None:
            return match.groups()

    def __len__(self):
        return self._regex.search(self._search) is not None

    def __mod__(self, replacement):
        return self._regex.sub(replacement, self._search)

    def __iter__(self):
        return iter(self._regex.findall(self._search))</code></pre><p>一步一步的分解操作，希望它能简化背后发生了什么。</p>
<p>调用R/<something>将会调用_R类的<strong>div</strong>方法，它使一个工厂方法，用来生产R实例。</p>
<pre><code>&gt;&gt;&gt; R/&apos;foo&apos;
&lt;rx.R at 0x7f77c00831d0&gt;</code></pre><p>然后，通过调用R对象的<strong>div</strong>，我们获得一个RegexOperation实例，所以R.<strong>div</strong>是另一种工厂方法。</p>
<pre><code>&gt;&gt;&gt; r_obj = R/&apos;foo&apos;
&gt;&gt;&gt; r_obj / &apos;bar&apos;
&lt;rx.RegexOperation at 0x7f77c00837d0&gt;</code></pre><p>最后一个对象，RegexOperation，实现了一些魔术方法来匹配、替换和测试匹配的存在性。</p>
<h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><h3 id="1楼"><a href="#1楼" class="headerlink" title="1楼"></a>1楼</h3><p>很酷的运算符重载＋1 造轮子-1</p>
<p>你的代码：<br>    &gt;&gt;&gt; list(R/‘([0-9]+)’/‘extract 12 the 456 numbers’)<br>    [‘12’, ‘456’]</p>
<p>我认为比Python本身的要复杂：</p>
<pre><code>&gt;&gt;&gt; re.findall(&apos;([0-9]+)&apos;, &apos;extract 12 the 456 numbers&apos;)
[&apos;12&apos;, &apos;456&apos;]</code></pre><p>如果没有明显的分组，re.findall()将会返回一个group 0的匹配的list；如果定义了多个分组，re.findall()返回由每个分组组成的tuple构成的list：</p>
<pre><code>&gt;&gt;&gt; re.findall(&apos;([A-Z])([0-9]+)&apos;, &apos;A133 B873 xxx yyy C946&apos;)
[(&apos;A&apos;, &apos;133&apos;), (&apos;B&apos;, &apos;873&apos;), (&apos;C&apos;, &apos;946&apos;)]</code></pre><p>非常有趣的文章。我赞同你对re.sub参数列表顺序的看法。</p>
<p>我想说re.findall()返回空列表，如果没有匹配就返回空列表。</p>
<p>同样，re.finditer()提供了一个匹配对象的迭代器。</p>
<h3 id="2楼"><a href="#2楼" class="headerlink" title="2楼"></a>2楼</h3><p>正则表达式高级教程：<br><a href="http://www.cofoh.com/advanced-regex-tutorial-python/traps" target="_blank" rel="noopener">http://www.cofoh.com/advanced-regex-tutorial-python/traps</a></p>
<h3 id="3楼"><a href="#3楼" class="headerlink" title="3楼"></a>3楼</h3><p>使用parsely库可以用来写复杂的正则。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用</title>
    <url>/2016/01/01/Db-MySQL%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<p>本文将持续更新。</p>
<h2 id="1-Mac上安装后需要配置的PATH"><a href="#1-Mac上安装后需要配置的PATH" class="headerlink" title="1. Mac上安装后需要配置的PATH"></a>1. Mac上安装后需要配置的PATH</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure>

<h2 id="2-Python使用MySQL"><a href="#2-Python使用MySQL" class="headerlink" title="2. Python使用MySQL"></a>2. Python使用MySQL</h2><p>Python中有5种常见客户端可连接MySQL.</p>
<h3 id="2-1-MySQLdb"><a href="#2-1-MySQLdb" class="headerlink" title="2.1 MySQLdb"></a>2.1 <code>MySQLdb</code></h3><p>最早的，使用C语言写成，但是不支持Python3</p>
<h3 id="2-2-mysql-connector-python"><a href="#2-2-mysql-connector-python" class="headerlink" title="2.2 mysql-connector-python"></a>2.2 <code>mysql-connector-python</code></h3><p><a href="https://pypi.python.org/pypi/mysql-connector-python/" target="_blank" rel="noopener">https://pypi.python.org/pypi/mysql-connector-python/</a></p>
<p>这个是Oracle官方支持的，是纯Python编写的，但是有点慢，而且不兼容<code>MySQLdb</code></p>
<h3 id="2-3-pymysql（推荐）"><a href="#2-3-pymysql（推荐）" class="headerlink" title="2.3 pymysql（推荐）"></a>2.3 <code>pymysql</code>（推荐）</h3><p><a href="https://pypi.python.org/pypi/PyMySQL" target="_blank" rel="noopener">https://pypi.python.org/pypi/PyMySQL</a></p>
<p>它是一个纯Python的客户端，并且支持Python3.兼容<code>MySQLdb</code></p>
<h3 id="2-4-CyMySQL"><a href="#2-4-CyMySQL" class="headerlink" title="2.4 CyMySQL"></a>2.4 <code>CyMySQL</code></h3><p><a href="https://github.com/nakagami/CyMySQL" target="_blank" rel="noopener">https://github.com/nakagami/CyMySQL</a></p>
<p>它是<code>PyMySQL</code>的一个fork，使用Cython进行了加速，并且支持Python3。</p>
<h3 id="2-5-mysqlclient（Django官方推荐）"><a href="#2-5-mysqlclient（Django官方推荐）" class="headerlink" title="2.5 mysqlclient（Django官方推荐）"></a>2.5 <code>mysqlclient</code>（Django官方推荐）</h3><p><a href="https://pypi.python.org/pypi/mysqlclient" target="_blank" rel="noopener">https://pypi.python.org/pypi/mysqlclient</a></p>
<p><code>mysqlclient</code>是<code>MySQLdb</code>的一个fork，能够直接代替<code>MySQLdb</code>，并且支持Python3，是Django官方推荐的选择。</p>
<p>目前来讲，<code>pymysql</code>使用的人最多。</p>
<h2 id="3-使用root用户"><a href="#3-使用root用户" class="headerlink" title="3. 使用root用户"></a>3. 使用root用户</h2><h3 id="3-1-并且修改root密码"><a href="#3-1-并且修改root密码" class="headerlink" title="3.1 并且修改root密码"></a>3.1 并且修改root密码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root #进入mysql</span><br><span class="line">#或者已经有密码了</span><br><span class="line">mysql -u root -p 密码</span><br><span class="line">#修改密码</span><br><span class="line">mysql&gt;update mysql.user set password&#x3D;PASSWORD(&#39;123456&#39;) where User&#x3D;&#39;root&#39;</span><br></pre></td></tr></table></figure>

<p>但是，在MySQL5.6之后，这么更改用户会出错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement</span><br></pre></td></tr></table></figure>

<p>这个时候的做法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD &#x3D; PASSWORD(&#39;your new password&#39;);</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://dev.mysql.com/doc/refman/5.6/en/alter-user.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/alter-user.html</a></p>
<h3 id="3-2-退出"><a href="#3-2-退出" class="headerlink" title="3.2 退出"></a>3.2 退出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask笔记－01 基本应用框架</title>
    <url>/2014/10/18/Flask%E7%AC%94%E8%AE%B0-01%20%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure>

<p><code>__name__</code>的作用是用来给Flask来判断应用的根路径的。</p>
<h2 id="2-路由和视图函数"><a href="#2-路由和视图函数" class="headerlink" title="2. 路由和视图函数"></a>2. 路由和视图函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure>

<p>如果要给路由添加参数，可以这样:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中<code>&lt;name&gt;</code>就是参数，如果你想给参数加上类型，可以使用<code>/user/&lt;int:id&gt;</code>，Flask支持在路由中使用<code>int</code>, <code>float</code>和<code>path</code>等类型。<code>path</code>是字符串，但是并不把<code>/</code>当作分隔符，而是把它看作动态组成的一部分。</p>
<h2 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3. 启动服务器"></a>3. 启动服务器</h2><p>Flask包含了一个小型的开发服务器，启动它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>其中<code>debug=True</code>用来开启debug模式。正式环境中不需要。</p>
<h2 id="4-一个完整的应用"><a href="#4-一个完整的应用" class="headerlink" title="4. 一个完整的应用"></a>4. 一个完整的应用</h2><p>上面我们分别介绍了一部分，现在看看一个整体应用，保存到文件hello.py中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>启动应用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$python hello.py</span><br><span class="line"> * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;</span><br><span class="line"> * Restarting with reloader</span><br></pre></td></tr></table></figure>

<h2 id="5-请求响应循环"><a href="#5-请求响应循环" class="headerlink" title="5. 请求响应循环"></a>5. 请求响应循环</h2><h3 id="5-1-应用和请求上下文"><a href="#5-1-应用和请求上下文" class="headerlink" title="5.1 应用和请求上下文"></a>5.1 应用和请求上下文</h3><p>Flask使用<code>上下文Context</code>的概念来让一些对象暂时性的全局可访问。因为有了上下文，所以可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/browser')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">browser</span><span class="params">()</span>:</span></span><br><span class="line">    user_agent = request.headers.get(<span class="string">'User-Agent'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;p&gt;你的浏览器是：%s'</span> % user_agent</span><br></pre></td></tr></table></figure>

<p>注意<code>request</code>是如何被使用的。考虑到并发型，我们知道<code>request</code>不能是全局性的变量，所以每个线程都需要一个不同的<code>request</code>对象。上下文帮助我们实现了一些变量能在一个线程内全局访问。</p>
<p>Flask有两种上下文， <em>应用上下文</em>和<em>请求上下文</em>，如下表所示:</p>
<table>
<thead>
<tr>
<th>变量名称</th>
<th>上下文</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>current_app</code></td>
<td>应用上下文</td>
<td>活动应用的实例对象</td>
</tr>
<tr>
<td><code>g</code></td>
<td>应用上下文</td>
<td>一个对象，应用可以用它在处理请求的过程中来进行暂时存储。每次请求都会被重置。</td>
</tr>
<tr>
<td><code>request</code></td>
<td>应用上下文</td>
<td>请求对象</td>
</tr>
<tr>
<td><code>session</code></td>
<td>请求上下文</td>
<td>用户会话，一个用来在请求之间存储数据的字典。</td>
</tr>
</tbody></table>
<p>Flask在分发请求之前激活（或者叫<em>推送</em>）应用和请求上下文，并在处理请求后移除它们。当推送应用上下文时，<code>current_app</code>和<code>g</code>可用，否则会抛出异常。<code>request</code>和<code>session</code>也是如此。</p>
<p>下面展示了应用上下文如何工作的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from hello import app</span><br><span class="line">&gt;&gt;&gt; from flask import current_app</span><br><span class="line">&gt;&gt;&gt; current_app.name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">RuntimeError: working outside of application context</span><br><span class="line">&gt;&gt;&gt; app_ctx &#x3D; app.app_context()</span><br><span class="line">&gt;&gt;&gt; app_ctx.push()</span><br><span class="line">&gt;&gt;&gt; current_app.name</span><br><span class="line">&#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt; app_ctx.pop()</span><br></pre></td></tr></table></figure>

<p>注意，使用<code>app.app_context()</code>来获得应用上下文。</p>
<h3 id="5-2-请求分发"><a href="#5-2-请求分发" class="headerlink" title="5.2 请求分发"></a>5.2 请求分发</h3><p>Flask使用<em>URL映射</em>来进行请求分发。创建映射可以使用<code>app.route()</code>装饰器或者<code>app.add_url_rule()</code>。</p>
<p>要查看Flask应用中的URL映射，可以这样</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask_web_dev <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app.url_map</span><br><span class="line">Map([&lt;Rule '/' (GET, HEAD, OPTIONS) -&gt; hello_world&gt;,</span><br><span class="line"> &lt;Rule '/static/&lt;filename&gt;' (GET, HEAD, OPTIONS) -&gt; static&gt;,</span><br><span class="line"> &lt;Rule '/user/&lt;name&gt;' (GET, HEAD, OPTIONS) -&gt; user&gt;])</span><br></pre></td></tr></table></figure>

<p>其中<code>GET, HEAD, OPTIONS</code>时方法。<code>/static/&lt;filename&gt;</code>是Flask用来做静态文件映射的特殊方法。</p>
<h3 id="5-3-请求勾子"><a href="#5-3-请求勾子" class="headerlink" title="5.3 请求勾子"></a>5.3 请求勾子</h3><p>有时需要在请求执行前和执行后运行一些代码，比如应用启动时创建数据库连接，或者验证发出请求的用户。我们可以使用请求勾子：</p>
<ul>
<li><code>before_first_request</code>：注册一个在第一个请求前被运行的方法</li>
<li><code>before_request</code>: 注册一个在每个请求前运行的方法</li>
<li><code>after_request</code>: 注册一个在请求后执行的方法，但是当请求发出异常时不执行</li>
<li><code>teardown_request</code>: 注册一个在请求后执行的方法，即使请求发出异常后仍然执行</li>
</ul>
<p>一种常见的模式是用全局变量<code>g</code>在请求勾子方法和视图方法之间共享数据，比如，<code>before_request</code>处理方法用来从数据库中加载用户，并且存储到<code>g.user</code>中。在视图方法中可以使用它。</p>
<h3 id="5-4-响应"><a href="#5-4-响应" class="headerlink" title="5.4 响应"></a>5.4 响应</h3><p>Flask期望视图函数返回一个值作为响应给请求。</p>
<p>如果希望返回状态码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span>, <span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>Flask的视图函数除了返回tuple之外还可以直接返回<code>Response</code>对象。使用<code>make_response</code>可以创建<code>Response</code>对象。你可以在这个<code>Response</code>对象的基础上再进行配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    response = make_response(<span class="string">'&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;'</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'answer'</span>, <span class="string">'42'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>还有一个特殊的响应类型叫做<em>重定向</em>。它返回一个url给浏览器用来进行跳转，状态码302, url放在返回头的<code>Location</code>中。Flask提供了<code>redirect</code>方法用来重定向：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/redirect_demo')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_demo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure>

<p>另外一个特殊的响应是使用<code>abort</code>来处理错误的，不需返回，而是通过引发异常来将控制权转让给web服务器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/abort_demo/&lt;int:id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abort_demo</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> id != <span class="number">2</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;user id is %s'</span> % id</span><br></pre></td></tr></table></figure>

<h2 id="6-Flask扩展"><a href="#6-Flask扩展" class="headerlink" title="6. Flask扩展"></a>6. Flask扩展</h2><p>Flask被设计的易于扩展，它有意避开了一些重要领域比如用户认证和数据库，留给用户来自由实现。可以使用扩展或者python包来实现不同的想法。</p>
<p>下面将使用<code>Flask-Script</code>来使flask应用可以接受命令行参数。</p>
<p>###6.1 使用Flask-Script来实现命令行参数。</p>
<p>Flask本身实现了一些可配置项，但要在<code>app.run()</code>中指定，这不方便。Flask-Script就是添加命令行解析用的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure>

<p>Flask的扩展都在<code>flask.ext</code>包下。flask-script中的<code>Manager</code>接受Flask的实例对象，这也是Flask扩展的常用方法。</p>
<p>此时，再运行程序，就会有这样的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python flask_web_dev.py</span><br><span class="line">usage: flask_web_dev.py [-?] &#123;runserver,shell&#125; ...</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  &#123;runserver,shell&#125;</span><br><span class="line">    runserver        Runs the Flask development server i.e. app.run()</span><br><span class="line">    shell            Runs a Python shell inside Flask application context.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -?, --help         show this help message and exit</span><br></pre></td></tr></table></figure>

<ul>
<li><code>shell</code>参数用来再当前应用上下文下启动python，可以用来做测试时使用。</li>
<li><code>runserver</code>可以使用debug模式启动服务器，但还有更多用法<code>python flask_web_dev.py runserver -?</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python flask_web_dev.py runserver -?</span><br><span class="line">usage: flask_web_dev.py runserver [-?] [-h HOST] [-p PORT] [--threaded]</span><br><span class="line">                                  [--processes PROCESSES]</span><br><span class="line">                                  [--passthrough-errors] [-d] [-D] [-r] [-R]</span><br><span class="line"></span><br><span class="line">Runs the Flask development server i.e. app.run()</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -?, --help            show this help message and exit</span><br><span class="line">  -h HOST, --host HOST</span><br><span class="line">  -p PORT, --port PORT</span><br><span class="line">  --threaded</span><br><span class="line">  --processes PROCESSES</span><br><span class="line">  --passthrough-errors</span><br><span class="line">  -d, --debug           enable the Werkzeug debugger (DO NOT use in production</span><br><span class="line">                        code)</span><br><span class="line">  -D, --no-debug        disable the Werkzeug debugger</span><br><span class="line">  -r, --reload          monitor Python files for changes (not 100&#123;&#39;type&#39;:</span><br><span class="line">                        None, &#39;prog&#39;: &#39;flask_web_dev.py runserver&#39;,</span><br><span class="line">                        &#39;required&#39;: False, &#39;const&#39;: True, &#39;default&#39;: None,</span><br><span class="line">                        &#39;container&#39;: &lt;argparse._ArgumentGroup object at</span><br><span class="line">                        0x102aaef28&gt;, &#39;help&#39;: &#39;monitor Python files for</span><br><span class="line">                        changes (not 100% safe for production use)&#39;, &#39;dest&#39;:</span><br><span class="line">                        &#39;use_reloader&#39;, &#39;choices&#39;: None, &#39;option_strings&#39;:</span><br><span class="line">                        [&#39;-r&#39;, &#39;--reload&#39;], &#39;metavar&#39;: None, &#39;nargs&#39;: 0&#125;afe</span><br><span class="line">                        for production use)</span><br><span class="line">  -R, --no-reload       do not monitor Python files for changes</span><br></pre></td></tr></table></figure>

<p><code>--host</code>很有用，它可以用来指定地址。默认情况下Flask使用<code>localhost</code>，但是可以这样指定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$python flask_web_dev.py runserver --host 0.0.0.0</span><br><span class="line">* Running on http:&#x2F;&#x2F;0.0.0.0:5000&#x2F;</span><br></pre></td></tr></table></figure>

<p>下一章我们将介绍模板。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言学习</title>
    <url>/2017/08/29/Go-1-Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-环境变量"><a href="#1-环境变量" class="headerlink" title="1. 环境变量"></a>1. 环境变量</h2><h3 id="1-1-GOROOT"><a href="#1-1-GOROOT" class="headerlink" title="1.1 GOROOT"></a>1.1 GOROOT</h3><p>GOROOT就是go的安装路径<br>在<code>~/.bash_profile</code>中添加下面语句:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOROOT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>

<h3 id="1-2-GOPATH"><a href="#1-2-GOPATH" class="headerlink" title="1.2 GOPATH"></a>1.2 GOPATH</h3><p><code>go install/get/run</code>会用到的目录。它的下面有3个文件夹：</p>
<ul>
<li>bin: golang编译可执行文件存放路径，可自动生成。通常把它也假如到PATH中，用来执行安装的第三方工具</li>
<li>pkg: golang编译的.a中间文件存放路径，可自动生成</li>
<li>src: 源码路径。按照golang默认约定，go run，go install等命令的当前工作路径（即在此路径下执行上述命令）。</li>
</ul>
<p>可以设置多个子目录到GOPATH中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export GOPATH&#x3D;~&#x2F;golib:~&#x2F;goproject</span><br></pre></td></tr></table></figure>

<h3 id="1-3-GOBIN"><a href="#1-3-GOBIN" class="headerlink" title="1.3 GOBIN"></a>1.3 GOBIN</h3><p>想存放GO程序的可执行程序的地方</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export GOBIN&#x3D;~&#x2F;gobin</span><br></pre></td></tr></table></figure>



<h3 id="1-4-目录结构"><a href="#1-4-目录结构" class="headerlink" title="1.4 目录结构"></a>1.4 目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$GOPATH&#x2F;</span><br><span class="line">    src&#x2F;</span><br><span class="line">        github.com&#x2F;</span><br><span class="line">            username&#x2F;</span><br><span class="line">                useless&#x2F;</span><br><span class="line">                    .git&#x2F;</span><br><span class="line">                    useless.go</span><br><span class="line">                    useless_test.go</span><br><span class="line">                    README.md</span><br><span class="line">                uselessd&#x2F;</span><br><span class="line">                    .git&#x2F;</span><br><span class="line">                    uselessd.go</span><br><span class="line">                    uselessd_test.go</span><br><span class="line">                    README.md</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go install useless 或 go get useless </span><br><span class="line">go install uselessd 或 go get uselessd</span><br></pre></td></tr></table></figure>

<p>详细请参考：<a href="https://github.com/golang/go/wiki/GithubCodeLayout" target="_blank" rel="noopener">https://github.com/golang/go/wiki/GithubCodeLayout</a></p>
<p><strong>go get [main.go所在路径]</strong></p>
<p>参数 [main.go所在路径]：可选。相对GOPATH/src路径。 缺省是.(src自己)。可指定src下面的子文件夹路径。<br>go get会做2件事：1. 从远程下载需要用到的包。2.执行go install。（从这里也可以看出golang处处为了简洁而遵循的“约定优于配置”原则）</p>
<p><strong>go install [main.go所在路径]</strong></p>
<p>参数 [main.go所在路径]：可选。 相对GOPATH/src路径。缺省是.(即当前所在目录或工作目录)。可指定src下面的子文件夹。<br>go install编译生成名称为[main.go父文件夹名]的可执行文件，放到GOBIN路径下。当GOBIN为空时，默认约定是：生成的可执行文件放到GOPATH/bin文件夹中。产生的中间文件（.a）放在project/pkg中（没有变化时，不重新生成.a）。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp笔记</title>
    <url>/2015/07/01/Gulp-Gulp%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul>
<li>安装nodejs</li>
<li>安装http-server: <code>npm install -g http-server</code></li>
<li>初始化项目：<code>npm init</code></li>
<li>安装gulp: <code>npm install gulp --save-dev</code> 安装到依赖中</li>
</ul>
<h2 id="2-第一个Gulp-Task"><a href="#2-第一个Gulp-Task" class="headerlink" title="2. 第一个Gulp Task"></a>2. 第一个Gulp Task</h2><p>创建一个gulpfile.js，gulp会自动发现这个文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;use strict&#39;; &#x2F;&#x2F;使用严格的编译方法</span><br><span class="line"></span><br><span class="line">var gulp &#x3D; require(&#39;gulp&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义task，第一个参数是任务名</span><br><span class="line">gulp.task(&quot;hello&quot;, function()&#123;</span><br><span class="line">  console.log(&quot;Hello&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行任务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gulp hello</span><br><span class="line">[09:40:32] Using gulpfile G:\git\WebDesign\gulp_learn\gulp_basics\gulpfile.js</span><br><span class="line">[09:40:32] Starting &#39;hello&#39;...</span><br><span class="line">Hello</span><br><span class="line">[09:40:32] Finished &#39;hello&#39; after 354 μs</span><br></pre></td></tr></table></figure>

<p>定义默认的task：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认task，第二个参数是依赖任务，依赖任务会在当前任务之前执行</span><br><span class="line">gulp.task(&quot;default&quot;, [&quot;hello&quot;], function()&#123;</span><br><span class="line">  console.log(&quot;This is the default task!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>运行任务，运行默认的任务不需要任务名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br><span class="line">[09:43:23] Using gulpfile G:\git\WebDesign\gulp_learn\gulp_basics\gulpfile.js</span><br><span class="line">[09:43:23] Starting &#39;hello&#39;...</span><br><span class="line">Hello</span><br><span class="line">[09:43:23] Finished &#39;hello&#39; after 299 μs</span><br><span class="line">[09:43:23] Starting &#39;default&#39;...</span><br><span class="line">This is the default task!</span><br><span class="line">[09:43:23] Finished &#39;default&#39; after 554 μs</span><br></pre></td></tr></table></figure>

<h2 id="3-使用Gulp管理Javascript-工作流"><a href="#3-使用Gulp管理Javascript-工作流" class="headerlink" title="3. 使用Gulp管理Javascript 工作流"></a>3. 使用Gulp管理Javascript 工作流</h2><h3 id="3-1-使用Gulp第三方库"><a href="#3-1-使用Gulp第三方库" class="headerlink" title="3.1 使用Gulp第三方库"></a>3.1 使用Gulp第三方库</h3><p>gulp社区提供了很多gulp的第三方库，来完成各种工作(比如编译sass, 压缩文件等)。</p>
<p>这里我们使用gulp-concat库，来分别压缩css和js文件到一个文件中。</p>
<p><strong>安装gulp-concat</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-concat --save-dev</span><br></pre></td></tr></table></figure>

<p>假设我们页面里有很多js文件，当项目变得越来越大时，管理多个文件就很困难，所以我们可以使用gulp来将这些文件合并成一个文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>), </span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义task，第一个参数是任务名</span></span><br><span class="line">gulp.task(<span class="string">"concatScripts"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//gulp.src可以接受数组和单独的字符串，注意js文件的顺序</span></span><br><span class="line">  <span class="comment">//pipe类似unix中管道的概念，前面的输出作为后面的输入，这里gulp.src的输出作为concat()的输入</span></span><br><span class="line">  <span class="comment">//concat()接受的字符串参数是合并后的文件名</span></span><br><span class="line">  <span class="comment">//gulp.dest()指定文件夹</span></span><br><span class="line">  gulp.src([</span><br><span class="line">    <span class="string">'js/jquery.js'</span>,</span><br><span class="line">    <span class="string">'js/sticky/jquery.sticky.js'</span>,</span><br><span class="line">    <span class="string">'js/main.js'</span>])</span><br><span class="line">  .pipe(concat(<span class="string">"app.js"</span>))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-压缩JavaScript文件"><a href="#3-2-压缩JavaScript文件" class="headerlink" title="3.2 压缩JavaScript文件"></a>3.2 压缩JavaScript文件</h3><p>安装gulp-uglify</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-uglify --save-dev</span><br></pre></td></tr></table></figure>

<p>利用前面concatScripts已经创建好的app.js，进行压缩：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"minifyScripts"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">"js/app.js"</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面有一个问题，就是原有的app.js被压缩了，看不到原有未压缩前的js了。那我们可以使用gulp-rename来将压缩后的文件重命名。</p>
<p>安装gulp-rename:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-rename --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"minifyScripts"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">"js/app.js"</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(rename(<span class="string">'app.min.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4-使用Gulp编译Sass"><a href="#4-使用Gulp编译Sass" class="headerlink" title="4. 使用Gulp编译Sass"></a>4. 使用Gulp编译Sass</h2><h3 id="4-1-Gulp自动编译Sass"><a href="#4-1-Gulp自动编译Sass" class="headerlink" title="4.1 Gulp自动编译Sass"></a>4.1 Gulp自动编译Sass</h3><p>要让Gulp能够编译Sass，第一步就是安装gulp-sass</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-sass --save-dev</span><br></pre></td></tr></table></figure>

<p>然后创建任务：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"compileSass"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'scss/application.scss'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-2-给Sass添加Source-Map"><a href="#4-2-给Sass添加Source-Map" class="headerlink" title="4.2 给Sass添加Source Map"></a>4.2 给Sass添加Source Map</h3><p>Source Map用来显示Sass和CSS之间的映射，当Sass文件较多时特别有用。</p>
<p>安装gulp-sourcemaps</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-sourcemaps</span><br></pre></td></tr></table></figure>

<p>定义source map有点不同：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line">gulp.task(<span class="string">"compileSass"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'scss/application.scss'</span>)</span><br><span class="line">    .pipe(maps.init()) <span class="comment">//初始化maps</span></span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(maps.write(<span class="string">'./'</span>)) <span class="comment">//输出source maps文件路径是相对于输出的css文件路径的，这里让source maps也在css文件夹内</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个时候在谷歌浏览器的开发工具里查看class，就会显示对应的sass文件了。</p>
<h3 id="4-3-JavaScript的Source-Map"><a href="#4-3-JavaScript的Source-Map" class="headerlink" title="4.3 JavaScript的Source Map"></a>4.3 JavaScript的Source Map</h3><p>gulp-sourcemaps不仅能映射sass和css，还能给js做映射，方法同Sass映射：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"concatScripts"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//gulp.src可以接受数组和单独的字符串，注意js文件的顺序</span></span><br><span class="line">  <span class="comment">//pipe类似unix中管道的概念，前面的输出作为后面的输入，这里gulp.src的输出作为concat()的输入</span></span><br><span class="line">  <span class="comment">//concat()接受的字符串参数是合并后的文件名</span></span><br><span class="line">  <span class="comment">//gulp.dest()指定文件夹</span></span><br><span class="line">  gulp.src([</span><br><span class="line">    <span class="string">'js/jquery.js'</span>,</span><br><span class="line">    <span class="string">'js/sticky/jquery.sticky.js'</span>,</span><br><span class="line">    <span class="string">'js/main.js'</span>])</span><br><span class="line">  .pipe(maps.init())</span><br><span class="line">  .pipe(concat(<span class="string">"app.js"</span>))</span><br><span class="line">  .pipe(maps.write(<span class="string">'./'</span>))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-进一步提高Gulp任务管道"><a href="#5-进一步提高Gulp任务管道" class="headerlink" title="5. 进一步提高Gulp任务管道"></a>5. 进一步提高Gulp任务管道</h2><h3 id="5-1-多个任务放在一起"><a href="#5-1-多个任务放在一起" class="headerlink" title="5.1 多个任务放在一起"></a>5.1 多个任务放在一起</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"build"</span>, [<span class="string">"concatScripts"</span>, <span class="string">"minifyScripts"</span>, <span class="string">"compileSass"</span>]);</span><br></pre></td></tr></table></figure>

<p>但这样做会有一个问题，3个任务是一起执行的，而minifyScripts需要在concatScripts之前执行。要解决这个问题，我们对gulpfile.js进行改造：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>; </span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>), </span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">  rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>),</span><br><span class="line">    maps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"concatScripts"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([</span><br><span class="line">    <span class="string">'js/jquery.js'</span>,</span><br><span class="line">    <span class="string">'js/sticky/jquery.sticky.js'</span>,</span><br><span class="line">    <span class="string">'js/main.js'</span>])</span><br><span class="line">  .pipe(maps.init())</span><br><span class="line">  .pipe(concat(<span class="string">"app.js"</span>))</span><br><span class="line">  .pipe(maps.write(<span class="string">'./'</span>))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"minifyScripts"</span>, [<span class="string">"concatScripts"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"js/app.js"</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(rename(<span class="string">'app.min.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"compileSass"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'scss/application.scss'</span>)</span><br><span class="line">    .pipe(maps.init())</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(maps.write(<span class="string">'./'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"build"</span>, [<span class="string">"minifyScripts"</span>, <span class="string">"compileSass"</span>]);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, [<span class="string">"build"</span>]);</span><br></pre></td></tr></table></figure>

<p>首先所有的任务都用<code>return</code>进行返回，这样gulp能够在运行需要依赖的任务时，知道依赖任务什么时候结束。</p>
<p>然后将concatScripts作为minifyScripts的依赖，并从build任务中删除concatScripts，从而实现concatScripts在minifyScripts前运行。</p>
<h3 id="5-2-使用watch方法自动运行任务"><a href="#5-2-使用watch方法自动运行任务" class="headerlink" title="5.2 使用watch方法自动运行任务"></a>5.2 使用watch方法自动运行任务</h3><p>gulp的watch方法能够自动检测到文件的改变，并且自动执行任务。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"watchSass"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.watch([<span class="string">'scss/**/*.scss'</span>], [<span class="string">'compileSass'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gulp watchSass</span><br></pre></td></tr></table></figure>

<h3 id="5-3-构建和开发的pipeline"><a href="#5-3-构建和开发的pipeline" class="headerlink" title="5.3 构建和开发的pipeline"></a>5.3 构建和开发的pipeline</h3><p>如果需要部署，则将文件拷贝到dist，但是要提供<code>{base: &#39;./&#39;}</code>，否则只拷贝文件不拷贝目录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"build"</span>, [<span class="string">"minifyScripts"</span>, <span class="string">"compileSass"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">"css/application.css"</span>, <span class="string">"js/app.min.js"</span>,</span><br><span class="line">                  <span class="string">"index.html"</span>, <span class="string">"img/**"</span>, <span class="string">"fonts/**"</span>], &#123;<span class="attr">base</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>安装del，删除多余的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install del --save-dev</span><br></pre></td></tr></table></figure>

<p>创建清除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  del([<span class="string">'dist'</span>, <span class="string">'css/application.css*'</span>, <span class="string">'js/app*.js*'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后，整个流程是清除原先生成的文件，然后再运行build任务。<br>gulpfile.js中启动任务是<code>gulp.start(&#39;任务名&#39;)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  del([<span class="string">'dist'</span>, <span class="string">'css/application.css*'</span>, <span class="string">'js/app*.js*'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"build"</span>, [<span class="string">"minifyScripts"</span>, <span class="string">"compileSass"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">"css/application.css"</span>, <span class="string">"js/app.min.js"</span>,</span><br><span class="line">                  <span class="string">"index.html"</span>, <span class="string">"img/**"</span>, <span class="string">"fonts/**"</span>], &#123;<span class="attr">base</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, [<span class="string">"clean"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.start(<span class="string">'build'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-深入development-pipeline"><a href="#5-4-深入development-pipeline" class="headerlink" title="5.4 深入development pipeline"></a>5.4 深入development pipeline</h3><p>如果要监视Sass和JS的变化，利用前面创建的watchSass，改为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">"watchFiles"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.watch([<span class="string">'scss/**/*.scss'</span>], [<span class="string">'compileSass'</span>]);</span><br><span class="line">  gulp.watch(<span class="string">'js/main.js'</span>, [<span class="string">'concatScripts'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也可以把两个watch合并为一个：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gulp.watch([<span class="string">'scss/**/*.scss'</span>, <span class="string">'js/main.js'</span>], [<span class="string">'compileSass'</span>, <span class="string">'concatScripts'</span>]);</span><br></pre></td></tr></table></figure>

<p>这样，无论是sass还是js文件发生改变，都会引起compileSass和concatScripts任务重新执行，这并不是一个特别好的方法，因为js并不需要compileSass，同样，sass也并不需要concatScripts.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate学习笔记</title>
    <url>/2016/05/09/Hibernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-Java链接数据库"><a href="#1-Java链接数据库" class="headerlink" title="1. Java链接数据库"></a>1. Java链接数据库</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcMain</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Load the SQLite JDBC driver (JDBC class implements java.sql.Driver)</span></span><br><span class="line">    Class.forName(<span class="string">"org.sqlite.JDBC"</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Create a DB connection</span></span><br><span class="line">    <span class="keyword">try</span>(Connection connection = DriverManager.getConnection(<span class="string">"jdbc:sqlite:contactmgr.db"</span>)) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Create a SQL statement</span></span><br><span class="line">      Statement statement = connection.createStatement();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Create a DB table</span></span><br><span class="line">      statement.executeUpdate(<span class="string">"DROP TABLE IF EXISTS contacts"</span>);</span><br><span class="line">      statement.executeUpdate(<span class="string">"CREATE TABLE contacts (id INTEGER PRIMARY KEY, firstname STRING, lastname STRING, email STRING, phone INT(10))"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Insert a couple contacts</span></span><br><span class="line">      statement.executeUpdate(<span class="string">"INSERT INTO contacts (firstname, lastname, email, phone) VALUES('Liu', 'Lixiang', 'liulixiang1988@gmail.com', 1234567890)"</span>);</span><br><span class="line">      statement.executeUpdate(<span class="string">"INSERT INTO contacts (firstname, lastname, email, phone) VALUES('Long', 'Long', 'abc@gmail.com', 0987654321)"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Fetch all the records from the contacts table</span></span><br><span class="line">      ResultSet rs = statement.executeQuery(<span class="string">"SELECT * FROM contacts"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Iterate over the ResultSet &amp; display contact info</span></span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">        String firstName = rs.getString(<span class="string">"firstname"</span>);</span><br><span class="line">        String lastName = rs.getString(<span class="string">"lastname"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.printf(<span class="string">"%s %s (%d)"</span>, firstName, lastName, id);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      <span class="comment">// Display connection or query errors</span></span><br><span class="line">      System.err.printf(<span class="string">"There was a database error: %s%n"</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：<code>javac JdbcMain.java</code></p>
<p>运行：<code>java -cp sqlite-jdbc.3.8.6.jar:. JdbcMain</code></p>
<h2 id="2-Hibernate入门"><a href="#2-Hibernate入门" class="headerlink" title="2 Hibernate入门"></a>2 Hibernate入门</h2><h3 id="2-1-创建一个使用Hibernate的项目"><a href="#2-1-创建一个使用Hibernate的项目" class="headerlink" title="2.1 创建一个使用Hibernate的项目"></a>2.1 创建一个使用Hibernate的项目</h3><p>创建gradle项目<code>contactmgr-hibernate</code>项目,并修改<code>build.gradle</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.hibernate:hibernate-core:5.1.0.Final&#39;</span><br><span class="line">    compile &#39;com.h2database:h2:1.4.191&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在根目录创建<code>data</code>文件夹，用来存放h2文件数据库。</p>
<p>在<code>resources</code>目录下创建<code>hibernate.cfg.xml</code>，这个文件用来保存<code>SessionFactory</code>的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>org.h2.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:h2:./data/contactmgr<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SQL 方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.H2Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用JPA注解添加POJO"><a href="#2-2-使用JPA注解添加POJO" class="headerlink" title="2.2 使用JPA注解添加POJO"></a>2.2 使用JPA注解添加POJO</h3><p>添加包<code>io.github.liulixiang1988.contactmgr</code>，并在其中创建<code>Application</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.contactmgr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在<code>contactmgr</code>中创建<code>model</code>包，并创建<code>Contact</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.contactmgr.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//映射为表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class="comment">//自增长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Long phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为JPA准备的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Contact</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", firstName='"</span> + firstName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone="</span> + phone +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(Long phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们修改<code>hibernate.cfg.xml</code>来为model做一些配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动时创建数据结构--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>create<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--为标识的实体类命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"io.github.liulixiang1988.contactmgr.model.Contact"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-创建Hibernate-SessionFactory"><a href="#2-3-创建Hibernate-SessionFactory" class="headerlink" title="2.3 创建Hibernate SessionFactory"></a>2.3 创建Hibernate SessionFactory</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    &#x2F;&#x2F;保存一个SessionFactory(我们也只需要一个)</span><br><span class="line">    private static final SessionFactory sessionFactory &#x3D; buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    private static SessionFactory buildSessionFactory() &#123;</span><br><span class="line">        &#x2F;&#x2F;创建StandardServiceRegistry</span><br><span class="line">        final ServiceRegistry registry &#x3D; new StandardServiceRegistryBuilder().configure().build();</span><br><span class="line">        return new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-Builder模式"><a href="#2-4-Builder模式" class="headerlink" title="2.4 Builder模式"></a>2.4 Builder模式</h3><p>修改Contact.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", firstName='"</span> + firstName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone="</span> + phone +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContactBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">        <span class="keyword">private</span> Long phone;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ContactBuilder</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ContactBuilder <span class="title">withEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.email = email;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ContactBuilder <span class="title">withPhone</span><span class="params">(Long phone)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.phone = phone;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Contact <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Contact(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>Application.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Contact contact = <span class="keyword">new</span> ContactBuilder(<span class="string">"Chris"</span>,<span class="string">"Ramacciotti"</span>)</span><br><span class="line">            .withEmail(<span class="string">"rama@teamtreehouse.com"</span>)</span><br><span class="line">            .withPhone(<span class="number">7735556666L</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-使用Hibernate存取数据"><a href="#3-使用Hibernate存取数据" class="headerlink" title="3. 使用Hibernate存取数据"></a>3. 使用Hibernate存取数据</h2><p>要让Hibernate支持存取数据，需要添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;javax.transaction:jta:1.1&#39;</span><br></pre></td></tr></table></figure>

<p>为了能看到Hibernate准备的查询，我们设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;show_sql&quot;&gt;true&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-添加数据"><a href="#3-1-添加数据" class="headerlink" title="3.1 添加数据"></a>3.1 添加数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Contact contact = <span class="keyword">new</span> ContactBuilder(<span class="string">"Chris"</span>,<span class="string">"Ramacciotti"</span>)</span><br><span class="line">            .withEmail(<span class="string">"rama@teamtreehouse.com"</span>)</span><br><span class="line">            .withPhone(<span class="number">7735556666L</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开session</span></span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//begin transaction</span></span><br><span class="line">    session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用session来保存对象</span></span><br><span class="line">    session.save(contact);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交session</span></span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭session</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-查询数据"><a href="#3-2-查询数据" class="headerlink" title="3.2 查询数据"></a>3.2 查询数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Contact&gt; <span class="title">fetchAllContact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//创建Criteria</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Contact<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从Criteria中获取数据</span></span><br><span class="line">    List&lt;Contact&gt; contacts = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭会话</span></span><br><span class="line">    session.close();</span><br><span class="line">    <span class="keyword">return</span> contacts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用可以使用java8的特性，而非使用for循环：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetchAllContact().stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>可以通过修改<code>hibernate.cfg.xml</code>，让每次启动时是更新而不是创建数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;hbm2ddl.auto&quot;&gt;update&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-更新与删除"><a href="#3-3-更新与删除" class="headerlink" title="3.3 更新与删除"></a>3.3 更新与删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static Contact findContactById(int id) &#123;</span><br><span class="line">    &#x2F;&#x2F;打开会话</span><br><span class="line">    Session session &#x3D; sessionFactory.openSession();</span><br><span class="line">    &#x2F;&#x2F;获取对象或者null</span><br><span class="line">    Contact contact &#x3D; session.get(Contact.class, id);</span><br><span class="line">    &#x2F;&#x2F;关闭会话</span><br><span class="line">    session.close();</span><br><span class="line">    &#x2F;&#x2F;返回对象</span><br><span class="line">    return contact;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void update(Contact contact) &#123;</span><br><span class="line">    Session session &#x3D; sessionFactory.openSession();</span><br><span class="line">    session.beginTransaction();</span><br><span class="line">    session.update(contact);</span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void delete(Contact contact) &#123;</span><br><span class="line">    Session session &#x3D; sessionFactory.openSession();</span><br><span class="line">    session.beginTransaction();</span><br><span class="line">    session.delete(contact);</span><br><span class="line">    session.getTransaction().commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC使用笔记</title>
    <url>/2015/04/13/JDBC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-JDBC编程步骤"><a href="#1-JDBC编程步骤" class="headerlink" title="1. JDBC编程步骤"></a>1. JDBC编程步骤</h2><p><strong>加载驱动程序：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(driverClass)</span><br><span class="line"><span class="comment">//加载MySql驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line"><span class="comment">//加载Oracle驱动</span></span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>)</span><br></pre></td></tr></table></figure>

<p><strong>获得数据库连接：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/imooc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>创建Statement\PreparedStatement对象：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.createStatement();</span><br><span class="line">conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/imooc"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"liulx"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动程序</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2. 获得数据库连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="comment">//3.操作数据库，实现增删改查</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">"SELECT user_name, age FROM imooc_goddess"</span>);</span><br><span class="line">        <span class="comment">//如果有数据，rs.next()返回true</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getString(<span class="string">"user_name"</span>)+<span class="string">" 年龄："</span>+rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-增删改查"><a href="#2-增删改查" class="headerlink" title="2. 增删改查"></a>2. 增删改查</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/imooc"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"liulx"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载驱动程序</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2. 获得数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模型</span></span><br><span class="line"><span class="keyword">package</span> liulx.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goddess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String user_name;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday; <span class="comment">//注意用的是java.util.Date</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="keyword">private</span> String create_user;</span><br><span class="line">    <span class="keyword">private</span> String update_user;</span><br><span class="line">    <span class="keyword">private</span> Date create_date;</span><br><span class="line">    <span class="keyword">private</span> Date update_date;</span><br><span class="line">    <span class="keyword">private</span> Integer isDel;</span><br><span class="line">    <span class="comment">//getter setter方法。。。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------dao层--------------</span></span><br><span class="line"><span class="keyword">package</span> liulx.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> liulx.db.DbUtil;</span><br><span class="line"><span class="keyword">import</span> liulx.model.Goddess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoddessDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoddess</span><span class="params">(Goddess g)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection conn = DbUtil.getConnection();</span><br><span class="line">        <span class="comment">//sql</span></span><br><span class="line">        String sql = <span class="string">"INSERT INTO imooc_goddess(user_name, sex, age, birthday, email, mobile,"</span>+</span><br><span class="line">            <span class="string">"create_user, create_date, update_user, update_date, isdel)"</span></span><br><span class="line">                +<span class="string">"values("</span>+<span class="string">"?,?,?,?,?,?,?,CURRENT_DATE(),?,CURRENT_DATE(),?)"</span>;</span><br><span class="line">        <span class="comment">//预编译</span></span><br><span class="line">        PreparedStatement ptmt = conn.prepareStatement(sql); <span class="comment">//预编译SQL，减少sql执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传参</span></span><br><span class="line">        ptmt.setString(<span class="number">1</span>, g.getUser_name());</span><br><span class="line">        ptmt.setInt(<span class="number">2</span>, g.getSex());</span><br><span class="line">        ptmt.setInt(<span class="number">3</span>, g.getAge());</span><br><span class="line">        ptmt.setDate(<span class="number">4</span>, <span class="keyword">new</span> Date(g.getBirthday().getTime()));</span><br><span class="line">        ptmt.setString(<span class="number">5</span>, g.getEmail());</span><br><span class="line">        ptmt.setString(<span class="number">6</span>, g.getMobile());</span><br><span class="line">        ptmt.setString(<span class="number">7</span>, g.getCreate_user());</span><br><span class="line">        ptmt.setString(<span class="number">8</span>, g.getUpdate_user());</span><br><span class="line">        ptmt.setInt(<span class="number">9</span>, g.getIsDel());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ptmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoddess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection conn = DbUtil.getConnection();</span><br><span class="line">        <span class="comment">//sql, 每行加空格</span></span><br><span class="line">        String sql = <span class="string">"UPDATE imooc_goddess"</span> +</span><br><span class="line">                <span class="string">" set user_name=?, sex=?, age=?, birthday=?, email=?, mobile=?,"</span>+</span><br><span class="line">                <span class="string">" update_user=?, update_date=CURRENT_DATE(), isdel=? "</span>+</span><br><span class="line">                <span class="string">" where id=?"</span>;</span><br><span class="line">        <span class="comment">//预编译</span></span><br><span class="line">        PreparedStatement ptmt = conn.prepareStatement(sql); <span class="comment">//预编译SQL，减少sql执行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//传参</span></span><br><span class="line">        ptmt.setString(<span class="number">1</span>, g.getUser_name());</span><br><span class="line">        ptmt.setInt(<span class="number">2</span>, g.getSex());</span><br><span class="line">        ptmt.setInt(<span class="number">3</span>, g.getAge());</span><br><span class="line">        ptmt.setDate(<span class="number">4</span>, <span class="keyword">new</span> Date(g.getBirthday().getTime()));</span><br><span class="line">        ptmt.setString(<span class="number">5</span>, g.getEmail());</span><br><span class="line">        ptmt.setString(<span class="number">6</span>, g.getMobile());</span><br><span class="line">        ptmt.setString(<span class="number">7</span>, g.getUpdate_user());</span><br><span class="line">        ptmt.setInt(<span class="number">8</span>, g.getIsDel());</span><br><span class="line">        ptmt.setInt(<span class="number">9</span>, g.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ptmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delGoddess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection conn = DbUtil.getConnection();</span><br><span class="line">        <span class="comment">//sql, 每行加空格</span></span><br><span class="line">        String sql = <span class="string">"delete from imooc_goddess where id=?"</span>;</span><br><span class="line">        <span class="comment">//预编译SQL，减少sql执行</span></span><br><span class="line">        PreparedStatement ptmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传参</span></span><br><span class="line">        ptmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ptmt.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Goddess&gt; <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = DbUtil.getConnection();</span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">"SELECT user_name, age FROM imooc_goddess"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Goddess&gt; gs = <span class="keyword">new</span> ArrayList&lt;Goddess&gt;();</span><br><span class="line">        Goddess g = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            g = <span class="keyword">new</span> Goddess();</span><br><span class="line">            g.setUser_name(rs.getString(<span class="string">"user_name"</span>));</span><br><span class="line">            g.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line"></span><br><span class="line">            gs.add(g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goddess <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Goddess g = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection conn = DbUtil.getConnection();</span><br><span class="line">        <span class="comment">//sql, 每行加空格</span></span><br><span class="line">        String sql = <span class="string">"select * from  imooc_goddess where id=?"</span>;</span><br><span class="line">        <span class="comment">//预编译SQL，减少sql执行</span></span><br><span class="line">        PreparedStatement ptmt = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//传参</span></span><br><span class="line">        ptmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        ResultSet rs = ptmt.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            g = <span class="keyword">new</span> Goddess();</span><br><span class="line">            g.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            g.setUser_name(rs.getString(<span class="string">"user_name"</span>));</span><br><span class="line">            g.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">            g.setSex(rs.getInt(<span class="string">"sex"</span>));</span><br><span class="line">            g.setBirthday(rs.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">            g.setEmail(rs.getString(<span class="string">"email"</span>));</span><br><span class="line">            g.setMobile(rs.getString(<span class="string">"mobile"</span>));</span><br><span class="line">            g.setCreate_date(rs.getDate(<span class="string">"create_date"</span>));</span><br><span class="line">            g.setCreate_user(rs.getString(<span class="string">"create_user"</span>));</span><br><span class="line">            g.setUpdate_date(rs.getDate(<span class="string">"update_date"</span>));</span><br><span class="line">            g.setUpdate_user(rs.getString(<span class="string">"update_user"</span>));</span><br><span class="line">            g.setIsDel(rs.getInt(<span class="string">"isdel"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java lambda简介</title>
    <url>/2016/05/10/Java%20lambda/</url>
    <content><![CDATA[<h2 id="1-老的方法"><a href="#1-老的方法" class="headerlink" title="1. 老的方法"></a>1. 老的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Book.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String mTitle;</span><br><span class="line">    <span class="keyword">private</span> String mAuthor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPublicationDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, String author, <span class="keyword">int</span> publicationDate)</span> </span>&#123;</span><br><span class="line">        mTitle = title;</span><br><span class="line">        mAuthor = author;</span><br><span class="line">        mPublicationDate = publicationDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAuthor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPublicationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPublicationDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"mTitle='"</span> + mTitle + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mAuthor='"</span> + mAuthor + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mPublicationDate="</span> + mPublicationDate +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Books.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Book&gt; <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"Functional Programming in Java"</span>, <span class="string">"Venkat Subramaniam"</span>, <span class="number">2014</span>));</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"Clean Code"</span>, <span class="string">"Robert C. Martin"</span>, <span class="number">2008</span>));</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"Java Generics and Collections"</span>, <span class="string">"Maurice Naftalin and Philip Wadler"</span>, <span class="number">2008</span>));</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"Effective Java"</span>, <span class="string">"Joshua Bloch"</span>, <span class="number">2008</span>));</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"Pragmatic Unit Testing in Java 8 with JUnit"</span>, <span class="string">"Jeff Langr"</span>, <span class="number">2015</span>));</span><br><span class="line">        books.add(<span class="keyword">new</span> Book(<span class="string">"JavaFX Essentials"</span>, <span class="string">"Mohamed Taman"</span>, <span class="number">2015</span>));</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingAnonymousInlineClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Book&gt; books = Books.all();</span><br><span class="line">        Collections.sort(books, <span class="keyword">new</span> Comparator&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Book b1, Book b2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> b1.getTitle().compareTo(b2.getTitle());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Book book : books) &#123;</span><br><span class="line">            System.out.println(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        usingAnonymousInlineClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Java-Lambdas"><a href="#2-Java-Lambdas" class="headerlink" title="2. Java Lambdas"></a>2. Java Lambdas</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda长形式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingLambdaInLongForm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Book&gt; books = Books.all();</span><br><span class="line">    Collections.sort(books, (Book b1, Book b2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> b1.getTitle().compareTo(b2.getTitle());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(Book book : books) &#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda短形式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingLambdaInShortForm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Book&gt; books = Books.all();</span><br><span class="line">    Collections.sort(books, (b1, b2) -&gt; b1.getTitle().compareTo(b2.getTitle()));</span><br><span class="line">    <span class="comment">//forEach调用</span></span><br><span class="line">    books.forEach((book)-&gt;System.out.println(book));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3. 方法引用"></a>3. 方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingMethodReference</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Book&gt; books = Books.all();</span><br><span class="line">    Collections.sort(books, Comparator.comparing(Book::getTitle));</span><br><span class="line">    books.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web开发技术应用-过滤器</title>
    <url>/2015/04/22/Java%20Web%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h2 id="1-Java过滤机制-声明周期"><a href="#1-Java过滤机制-声明周期" class="headerlink" title="1. Java过滤机制-声明周期"></a>1. Java过滤机制-声明周期</h2><p><img src="/images/java-web-filter-01.png" alt="images/java-web-filter-01.png"></p>
<h2 id="2-第一个过滤器"><a href="#2-第一个过滤器" class="headerlink" title="2. 第一个过滤器"></a>2. 第一个过滤器</h2><p>1、创建一个过滤器类 ，继承自servlet下的Filter<br>2、重写三个方法init() doFilter() destroy()方法<br>（1）init()初始化：这个方法可以读取web.xml文件中的过滤器初始化参数。通过参数FilterConfig arg0可以获取更多参数<br>（2）doFIlter()核心：完成实际的过滤操作。当用户请求访问与过滤器【关联的URL】时，Web容器将先调用过滤器的doFilter方法，FilterChain arg2参数可以调用chain.doFilter方法，将请求传给下一个过滤器（或目标资源），或利用转发，重定向将请求转发给其他资源。<br>(3)web容器在消耗过滤器前调用该方法，用于释放过滤器占用的资源。（大多数情况用不到）</p>
<h3 id="2-1-定义Filter"><a href="#2-1-定义Filter" class="headerlink" title="2.1 定义Filter"></a>2.1 定义Filter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> liulx.FilterDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter Destroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do filter before request"</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">        System.out.println(<span class="string">"Do filter after request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Init First Filter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-2-Web-xml配置"><a href="#2-2-Web-xml配置" class="headerlink" title="2.2 Web.xml配置"></a>2.2 Web.xml配置</h3><p><img src="/images/java-web-filter-02.png" alt="images/java-web-filter-02.png"></p>
<p>过滤器能够改变用户请求的Web资源，也就是能够改变用户请求的路径。<br>过滤器不能直接返回数据，不能直接处理用户请求。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>liulx.FilterDemo.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-过滤器链"><a href="#3-过滤器链" class="headerlink" title="3. 过滤器链"></a>3. 过滤器链</h2><h3 id="3-1-多个过滤器"><a href="#3-1-多个过滤器" class="headerlink" title="3.1 多个过滤器"></a>3.1 多个过滤器</h3><p>多个过滤器url-pattern一样时，服务器会按照web.xml中过滤器定义的先后顺序组装成一条链。</p>
<p><img src="images/java-web-filter-03.png" alt="images/java-web-filter-03.png"></p>
<h2 id="4-过滤器的分类"><a href="#4-过滤器的分类" class="headerlink" title="4. 过滤器的分类"></a>4. 过滤器的分类</h2><p>Servlet2.5中包含4种过滤器</p>
<ul>
<li>REQUEST 用户直接访问时,调用过滤器</li>
<li>INCLUDE 目标资源通过RequestDispatcher的include访问时，调用过滤器</li>
<li>FORWARD 目标资源通过RequestDispatcher的forward访问时，调用过滤器</li>
<li>ERROR 目标资源是通过声明式异常处理机制调用时，调用过滤器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>liulx.FilterDemo.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecondFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>liulx.FilterDemo.SecondFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FirstFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SecondFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ErrorFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Servlet 3.0 ASYNC标记：异步处理</p>
<h2 id="5-Servlet-3-0"><a href="#5-Servlet-3-0" class="headerlink" title="5 Servlet 3.0"></a>5 Servlet 3.0</h2><p>@WebFilter注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(servletNames=&#123;<span class="string">"SimpleServlet"</span>&#125;, filterName=<span class="string">"SimpleFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LessThanSixFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/java-web-filter-04.png" alt="images/java-web-filter-04.png"></p>
<p><img src="/images/java-web-filter-05.png" alt="images/java-web-filter-05.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-01 Java Web简介</title>
    <url>/2015/04/07/Java%20Web%E4%B9%8BJSP-01%20Java%20Web%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h2 id="1-Tomcat配置"><a href="#1-Tomcat配置" class="headerlink" title="1. Tomcat配置"></a>1. Tomcat配置</h2><h3 id="1-1-创建环境变量"><a href="#1-1-创建环境变量" class="headerlink" title="1.1 创建环境变量"></a>1.1 创建环境变量</h3><p>创建环境变量<code>CATALINA_HOME</code>,值为Tomcat所在根目录（比如，windows下可能为为<code>C:\Program Files (x86)\Apache Software Foundation\Tomcat 7.0</code>).</p>
<h3 id="1-2-启动Tomcat"><a href="#1-2-启动Tomcat" class="headerlink" title="1.2 启动Tomcat"></a>1.2 启动Tomcat</h3><p>在<code>CATALINA_HOME</code>的bin目录下有startup脚本。</p>
<h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>地址：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<h2 id="2-Tomcat目录结构"><a href="#2-Tomcat目录结构" class="headerlink" title="2. Tomcat目录结构"></a>2. Tomcat目录结构</h2><p><img src="/images/java-web-jsp-01.png" alt="tomcat"></p>
<h2 id="3-手工编写第一个Java-Web应用程序"><a href="#3-手工编写第一个Java-Web应用程序" class="headerlink" title="3. 手工编写第一个Java  Web应用程序"></a>3. 手工编写第一个Java  Web应用程序</h2><h3 id="3-1-创建Web-App目录"><a href="#3-1-创建Web-App目录" class="headerlink" title="3.1 创建Web App目录"></a>3.1 创建Web App目录</h3><p>在Tomcat的webapps目录下创建目录myhome</p>
<h3 id="3-2-在myhome目录下创建内容"><a href="#3-2-在myhome目录下创建内容" class="headerlink" title="3.2 在myhome目录下创建内容"></a>3.2 在myhome目录下创建内容</h3><p>1、创建index.jsp:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、创建WEB-INF目录<br>从Tomcat的webapps/examples/WEB-INF下拷贝web.xml，并且只保留根标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建classes和lib子文件夹</p>
<h2 id="4-WEB-INF目录详解"><a href="#4-WEB-INF目录详解" class="headerlink" title="4. WEB-INF目录详解"></a>4. WEB-INF目录详解</h2><ol>
<li>WEB-INF目录是一个安全目录，只有通过服务器才能访问。</li>
<li>web.xml,项目部署文件，比如配置项目的欢迎页面。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/haha.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>classes文件夹，用以放置*.class文件。</li>
<li>lib文件夹，用于存放需要的jar包。</li>
</ol>
<h2 id="5-使用eclipse开发web"><a href="#5-使用eclipse开发web" class="headerlink" title="5. 使用eclipse开发web"></a>5. 使用eclipse开发web</h2><h3 id="5-1-MyEclipse配置JRE"><a href="#5-1-MyEclipse配置JRE" class="headerlink" title="5.1 MyEclipse配置JRE"></a>5.1 MyEclipse配置JRE</h3><p>windows-&gt;preference-&gt;java-&gt;Installed JREs</p>
<h3 id="5-2-MyEclipse集成Tomcat服务器"><a href="#5-2-MyEclipse集成Tomcat服务器" class="headerlink" title="5.2 MyEclipse集成Tomcat服务器"></a>5.2 MyEclipse集成Tomcat服务器</h3><p>windows-&gt;preference-&gt;Myeclipse-&gt;server-&gt;Runtime Environments</p>
<p>启动Tomcat</p>
<h3 id="5-3-使用MyEclipse创建Java-web应用"><a href="#5-3-使用MyEclipse创建Java-web应用" class="headerlink" title="5.3 使用MyEclipse创建Java web应用"></a>5.3 使用MyEclipse创建Java web应用</h3><p>新建web project，命名为MyFirstWebApp，其余默认</p>
<h3 id="5-4-修改字体"><a href="#5-4-修改字体" class="headerlink" title="5.4 修改字体"></a>5.4 修改字体</h3><p>windows-&gt;preference-&gt;General-&gt;Appearance-&gt;Colors and Fonts，然后修改Text Font。</p>
<h2 id="6-修改Tomcat服务器默认端口"><a href="#6-修改Tomcat服务器默认端口" class="headerlink" title="6. 修改Tomcat服务器默认端口"></a>6. 修改Tomcat服务器默认端口</h2><p>修改conf/server.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-02 JSP基础语法</title>
    <url>/2015/04/08/Java%20Web%E4%B9%8BJSP-02%20JSP%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-JSP简介"><a href="#1-JSP简介" class="headerlink" title="1. JSP简介"></a>1. JSP简介</h2><p>JSP页面元素构成：</p>
<ol>
<li>静态内容</li>
<li>注释</li>
<li>声明</li>
<li>小脚本</li>
<li>表达式</li>
<li>指令</li>
</ol>
<h3 id="1-1-jsp指令"><a href="#1-1-jsp指令" class="headerlink" title="1.1 jsp指令"></a>1.1 jsp指令</h3><p>page指令：通常位于jsp页面的顶端，同一个页面可以有多个page指令。<br>include指令：将一个外部文件嵌入到当前jsp文件中，同时解析这个页面中的jsp语句。<br>taglib指令：使用标签库定义心得自定义标签。在jsp页面中启用定制行为</p>
<p>page指令语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@page 属性1&#x3D;&quot;value&quot; 属性2&#x3D;&quot;value1, value2&quot; ... %&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>language</td>
<td>指定jsp页面使用的脚本语言</td>
<td>java</td>
</tr>
<tr>
<td>import</td>
<td>通过该属性来引用脚本语言中使用到的类文件</td>
<td>无</td>
</tr>
<tr>
<td>contentType</td>
<td>用来指定jsp页面所采用的编码方式</td>
<td>text/html,ISO-8859-1</td>
</tr>
</tbody></table>
<h3 id="1-2-JSP注释"><a href="#1-2-JSP注释" class="headerlink" title="1.2 JSP注释"></a>1.2 JSP注释</h3><ol>
<li>html注释 <code>&lt;!--html注释--&gt;</code></li>
<li>jsp注释<code>&lt;%--注释--%&gt;</code></li>
<li>jsp脚本注释 <code>// /**/</code></li>
</ol>
<h3 id="1-3-jsp脚本"><a href="#1-3-jsp脚本" class="headerlink" title="1.3 jsp脚本"></a>1.3 jsp脚本</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">out.println(&quot;大家好，欢迎大家学习javaee开发&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-jsp声明"><a href="#1-4-jsp声明" class="headerlink" title="1.4 jsp声明"></a>1.4 jsp声明</h3><p>在jsp页面中定义变量或者方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%!java代码 %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%! String s &#x3D; &quot;lixiang&quot;; </span><br><span class="line">int add(int x, int y)&#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-jsp表达式"><a href="#1-5-jsp表达式" class="headerlink" title="1.5 jsp表达式"></a>1.5 jsp表达式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%&#x3D;表达式%&gt; &#x2F;&#x2F;注意：表达式不以分号结束</span><br><span class="line"></span><br><span class="line">&lt;%&#x3D;s%&gt;</span><br><span class="line">&lt;%&#x3D;add(5+4)%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-jsp页面生命周期"><a href="#1-6-jsp页面生命周期" class="headerlink" title="1.6 jsp页面生命周期"></a>1.6 jsp页面生命周期</h3><p><img src="/images/java-web-jsp-02.png" alt="img"></p>
<p><code>jspService()</code>方法被调用来处理客户端的请求。对每一个请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行可以大大降低对系统的资源需求，提高系统的并发量及响应时间。但也要注意多线程的编程带来的同步问题，由于该Servlet始终驻于内存，所以响应时间是非常快的。</p>
<h3 id="1-7-jsp练习：打印乘法表"><a href="#1-7-jsp练习：打印乘法表" class="headerlink" title="1.7 jsp练习：打印乘法表"></a>1.7 jsp练习：打印乘法表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">  String printMultiTable()&#123;</span><br><span class="line">    String s &#x3D; &quot;&quot;;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; 9; i++)&#123;</span><br><span class="line">      for(int j&#x3D;1; j&lt;&#x3D;i; j++)&#123;</span><br><span class="line">        s +&#x3D; j + &quot;*&quot; + i + &quot;&#x3D;&quot; + i*j+&quot;&amp;nbsp;&amp;nbsp;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      s+&#x3D;&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void printMultiTable2(JspWriter out) throws IOException &#123;</span><br><span class="line">    for(int i&#x3D;1; i&lt;&#x3D;9; i++)&#123;</span><br><span class="line">      for(int j&#x3D;1; j&lt;&#x3D;i; j++)&#123;</span><br><span class="line">        out.println(j+&quot;*&quot;+i+&quot;&#x3D;&quot;+i*j+&quot;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      out.println(&quot;&lt;br&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;九九乘法表&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;%&#x3D;printMultiTable()%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;% printMultiTable2(out); %&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-03 JSP内置对象</title>
    <url>/2015/04/09/Java%20Web%E4%B9%8BJSP-03%20JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="1-jsp内置对象简介"><a href="#1-jsp内置对象简介" class="headerlink" title="1. jsp内置对象简介"></a>1. jsp内置对象简介</h2><p>1、JSP内置对象是Web容器创建的一组对象，【不使用new关键字】就可以使用的内置对象。<br>2、九大内置对象:<br>out,request,response,session,application（五大常用对象）<br>Page,pageContext,exception.config（四个不太常用对象）</p>
<h2 id="2-out对象"><a href="#2-out对象" class="headerlink" title="2. out对象"></a>2. out对象</h2><p>缓冲区Buffer：就是内存的一块区域涌来保存临时数据。</p>
<p>out是JspWriter 的实例,是向客户端输出内容的常用对象.<br>常用方法:</p>
<ol>
<li>void println() 向客户端打印字符串.</li>
<li>void clear() 清除缓冲区,在flush之后调用会抛出异常.</li>
<li>void clearBuffer() 清除缓冲区,在flush之后调用不会抛出异常.</li>
<li>void flush() 将缓冲区内容输出到客户端.</li>
<li>int getBufferSize() </li>
<li>int getRemaining()</li>
<li>boolean isAutoFlush() 返回缓冲区满时，是自动清空还是抛出异常</li>
<li>void close() 关闭输出流</li>
</ol>
<h2 id="3-Get和Post提交方式的区别"><a href="#3-Get和Post提交方式的区别" class="headerlink" title="3. Get和Post提交方式的区别"></a>3. Get和Post提交方式的区别</h2><p>表单有两种提交方式：get与post。定义在<code>&lt;form action=&quot;dologin.jsp&quot; name=&quot;loginForm&quot; method=&quot;提交方式***&quot;&gt;&lt;/form&gt;</code> 动作／名称等顺序无所谓。<br>1.get：以【明文】方式，通过URL提交数据，数据在URL中【可以看到】。提交数据最多不超过【2KB】。安全性较低，但效率比post方式高。适合提交数据量不大，且安全要求不高的数据：比如：搜索、查询等功能。<br>2.post：将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。如：注册、修改、上传等功能。</p>
<h2 id="4-request对象"><a href="#4-request对象" class="headerlink" title="4. request对象"></a>4. request对象</h2><p>客户端的请求信息被封装在request对象中，它是HttpServletRequest类的实例。request对象具有请求域，即完成客户端的请求之前，该对象一直有效。常用方法如下：</p>
<ol>
<li>String getParameter(String name) 返回name制定的参数值</li>
<li>String[] getParameterValues(String name) 返回包含参数name的所有值的数组（如复选框的值）。</li>
<li>void setAttribute(String, Object) 存储此请求中的属性</li>
<li>object getAttribute(String name) 返回制定属性的属性值</li>
<li>String getContentType() 得到请求体的mime类型</li>
<li>String getProtocol() 返回请求用的协议类型及版本号</li>
<li>String getServerName() 返回接受请求的服务器主机名</li>
<li>int getServerPort();//返回服务器接受此请求所用的端口号</li>
<li>String getCharacterEncoding();//返回字符编码方式</li>
<li>void setCharacterEncodinng();//设置请求的字符编码方式</li>
<li>int getContentLength();//返回请求体的长途(以字节数)</li>
<li>String getRemoteAddr();//返回发送此请求的客户端IP地址,IP地址为IPv6本地环回地址。</li>
<li>String getRealPath(String path);//返回虚拟路径的真实路径</li>
<li>String request.getContextPath();//返回上下文路径</li>
</ol>
<p>使用关键：</p>
<ol>
<li>单个参数的获取使用getParameter(String name), 多个参数的获取getParameterValues(String name)。在使用这两个方法是，需传递对应的参数name，这个name应是在表格中声明的对象。</li>
<li>不存在参数值的方法，直接使用表达式即可获取，例如：<code>&lt;%=request.getContentType()%&gt;</code></li>
<li>传递中文参数时，可能会出现乱码情况，需声明：<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code>但此方法不能解决使用url传递中文时出现的乱码，若想解决这个，需要在server.xml的connector的末尾加上:<code>URIEncoding=&quot;utf-8&quot;</code></li>
</ol>
<h2 id="5-response对象"><a href="#5-response对象" class="headerlink" title="5. response对象"></a>5. response对象</h2><p>response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它，它是HttpServletResponse类的实例，response对象具有页面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其它页面的response对象对当前页面无效。<br>常用方法：</p>
<ol>
<li>String getCharacterEncoding();//返回响应的是何种字符编码</li>
<li>void setContentType(String type);//设置响应MIME类型</li>
<li>PrintWriter getWriter();//返回可以想客户端输出字符的一个对象PrintWriter</li>
<li>sendRedirect(java.lang.String location);//重新定向客户端请求</li>
</ol>
<p>PrintWriter比out对象先打印。调用out.flush()可以解决</p>
<h3 id="5-1-JSP内置对象——请求转发与请求重定向的区别"><a href="#5-1-JSP内置对象——请求转发与请求重定向的区别" class="headerlink" title="5.1 JSP内置对象——请求转发与请求重定向的区别"></a>5.1 JSP内置对象——请求转发与请求重定向的区别</h3><ol>
<li>请求重定向：服务端responce.sendRedirect(“xx.jsp”)重定向。【客户端行为】：即客户端会访问两次，第一次访问后会立即跳转到第二个重定向页面上，【从本质上讲等于两次请求】，而前一次的请求封装的request对象不会保存，地址栏的URL地址会改变。</li>
<li>请求转发：服务端request.getRequestDispatcher(“xx.jsp”).forward(request,response)请求转发。forward(request,response)用于保存内置对象request和response。【服务器行为】：服务器会代替客户端去访问转发页面，【从本质是一次请求】，转发后请求对象会保存，地址栏的URL地址不会改变。</li>
</ol>
<h2 id="6-session对象"><a href="#6-session对象" class="headerlink" title="6. session对象"></a>6. session对象</h2><h3 id="6-1-什么是session"><a href="#6-1-什么是session" class="headerlink" title="6.1 什么是session"></a>6.1 什么是session</h3><ol>
<li>session表示客户端与服务器的一次会话</li>
<li>Web中的session指：用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览网站所花费的时间。</li>
<li>从上述定义中可以看到，session实际是一个【特定的时间概念】</li>
<li>服务器的内存中，保存着不同用户的不同的session。</li>
</ol>
<h3 id="6-2-session对象常用方法"><a href="#6-2-session对象常用方法" class="headerlink" title="6.2 session对象常用方法"></a>6.2 session对象常用方法</h3><ol>
<li>long getCreationTime() 返回session创建时间</li>
<li>public String getId() 返回创建时jsp引擎为它设的唯一id号</li>
<li>public Ojbect setAttribute(String name, Object value) 使用指定名称将对象绑定到此对话</li>
<li>public Object getAttribute(String name) 返回此会话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null</li>
<li>String[] getValueNames() 返回一个包含此session中所有可用属性的数组</li>
<li>int getMaxInactiveInterval() 返回两次请求间隔多长时间此session被取消（单位秒）</li>
<li>setMaxInactiveInterval(int)可以设置session存活的最长时间，在时间过了之后，服务器会创建全新的一个session。前一个session的内容无法被传递到新的session。</li>
</ol>
<h3 id="6-3-session的生命周期"><a href="#6-3-session的生命周期" class="headerlink" title="6.3 session的生命周期"></a>6.3 session的生命周期</h3><p>1、创建阶段：当客户端第一次访问某个jsp或者servlet时候，服务器会为当前会话创建一个SessionId，每次客户端向服务端发送请求时，都会将此SessionId携带过去，服务端会对此SessionId进行校验。<br>2、活动阶段</p>
<ul>
<li>某次会话当中通过超链接打开的新页面属于同一次会话。</li>
<li>只要当前会话没有全部关闭，重新打开新的浏览器窗口访问统一项目资源时属于同一次会话。</li>
<li>除非本次会话的所有页面【都关闭后】，再重新访问某个Jsp或者Servlet将创建新的会话</li>
</ul>
<p><strong>注意：原有会话在超时前会一直存在，只是再没有客户端携带原SessionId交予服务端校验了！</strong></p>
<p>3、销毁阶段：Session的销毁只有三种方式</p>
<ul>
<li>调用了session.invalidate()方法</li>
<li>Session过期（超时）</li>
<li>服务器重启</li>
</ul>
<p>4、设置session对象超时时间：默认为30分钟</p>
<ul>
<li>session.setMaxInactiveInterval()</li>
<li>在web.xml文档配置中,单位是分钟.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">&lt;session-timeout&gt;2&lt;&#x2F;session-timeout&gt; &#x2F;&#x2F; 设置为2分钟过期</span><br><span class="line">&lt;&#x2F;session-config&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-application对象"><a href="#7-application对象" class="headerlink" title="7. application对象"></a>7. application对象</h2><h3 id="7-1-application介绍"><a href="#7-1-application介绍" class="headerlink" title="7.1 application介绍"></a>7.1 application介绍</h3><ol>
<li>实现了用户间数据的共享，可存放全局变量。（类似静态对象）</li>
<li>开始于服务器启动，终止于服务器的关闭（生命周期）</li>
<li>在用户的前后连接或不同用户之间的连接中，可以对application对象的同一属性进行操作</li>
<li>在任何地方对application对象属性进行操作，都将影响到其他用户对此的访问</li>
<li>application对象是ServletContext类的实例</li>
</ol>
<h3 id="7-2-常用方法如下"><a href="#7-2-常用方法如下" class="headerlink" title="7.2 常用方法如下"></a>7.2 常用方法如下</h3><p>application对象常用方法：</p>
<ol>
<li>pblic void setAttribute(String name,Object value);//使用指定名称将对象绑定到此会话</li>
<li>public Object getAttribute(String name);//返回与此会话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null.</li>
<li>Enumeration getAttributeNames();//返回所有可用属性那个名的枚举</li>
<li>String getServerInfo();//返回JSP（SERVER）引擎及版本号</li>
</ol>
<h2 id="8-page对象"><a href="#8-page对象" class="headerlink" title="8. page对象"></a>8. page对象</h2><p>page对象就是指向当前JSP页面本身，有点像类中的this指针，它是java.lang.Object类的实例。常用方法如下：</p>
<ul>
<li>class getClass();   //返回此Object类</li>
<li>int hashCode(); //返回此Object的hash码</li>
<li>boolean equals(Object obj); //判断此Object是否与指定的Object对象相等</li>
<li>void copy(Object obj);  //把此Object复制到指定的Object对象中</li>
<li>Object clone(); //克隆此Object对象</li>
<li>String toString();  //把此Object对象转换为String类的对象</li>
<li>void notify();  //唤醒一个等待的线程</li>
<li>void notyfyAll();   //唤醒所有等待的线程</li>
<li>void wait(int timeout); //使一个线程处于等待直到timeout结束或被唤醒</li>
<li>void wait();    //使一个线程处于等待直到被唤醒</li>
</ul>
<h2 id="9-pageContext对象和config对象"><a href="#9-pageContext对象和config对象" class="headerlink" title="9. pageContext对象和config对象"></a>9. pageContext对象和config对象</h2><h3 id="9-1-pageContext对象"><a href="#9-1-pageContext对象" class="headerlink" title="9.1 pageContext对象"></a>9.1 pageContext对象</h3><ul>
<li>pageContext对象提供了对JSP页面内所有的对象及名字空间的访问</li>
<li>pageContext对象可以访问到本页所在的session，也可以本页所在的application的某一属性值</li>
<li>pageContext对象相当于页面中所有功能的集大成者</li>
<li>pageContext对象的本类名也叫pageContext</li>
</ul>
<p>常用方法如下：</p>
<ul>
<li>JspWriter   getOut();   //返回当前客户端响应被使用的JspWriter流(out)</li>
<li>HttpSession getSession();   //返回当前页面中HttpSession对象(session)</li>
<li>Object  getPage();  //返回当前页面的Object对象(Object)</li>
<li>ServeletRequest getRequest();   //返回当前页面的ServletRequest对象(request)</li>
<li>ServeletResponse getResponse(); //返回当前页面的ServletResponse对象(response)</li>
<li>void setAttribute(String name,Object attribute);    //设置属性及属性值</li>
<li>void getAttribute(String name,int scope);   //在指定范围内取属性的值</li>
<li>int getAttributeScope(String name); //返回某属性的作用范围</li>
<li>void forward(String relativeUrlPath);   //使当前页面重导到另一页面，页面URL不会变</li>
<li>void include(String relativeUrlPath);   //在当前位置包含另一文件</li>
</ul>
<h3 id="9-2-Config对象："><a href="#9-2-Config对象：" class="headerlink" title="9.2 Config对象："></a>9.2 Config对象：</h3><p>config对象是在一个servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所要用到的参数(通过属性名和属性值构成)以及服务器的有关信息（通过传递一个ServletContext对象）</p>
<p>常用方法：</p>
<ol>
<li>ServletContext getServletContext();//返回含有服务器相关信息的ServletContext对象</li>
<li>String getInitParameter(String name);//返回初始化参数的值</li>
<li>Enumeration getInitParameterNames();//返回Servlet初始化所需所有参数的枚举</li>
</ol>
<h2 id="10-exception对象"><a href="#10-exception对象" class="headerlink" title="10. exception对象"></a>10. exception对象</h2><p>exception对象是一个异常对象，当一个页面在运行过程中规发生了异常，就会产生这个对象。如果一个JSP页面要应用此对象，就必须把<code>isErrorPage</code>设为true,否则无法编译。他实际上是java.lang.Throwable的对象。</p>
<h3 id="10-1-exception对象常用方法"><a href="#10-1-exception对象常用方法" class="headerlink" title="10.1 exception对象常用方法"></a>10.1 exception对象常用方法</h3><ol>
<li>String getMessage();//返回描述异常的消息</li>
<li>String toString();//返回关于异常的简短描述消息</li>
<li>void printStackTrace();//显示异常及其栈轨迹</li>
<li>Throwable FillInStackTrace();//重写异常的执行栈轨迹</li>
</ol>
<h3 id="10-2-exception对象使用方法："><a href="#10-2-exception对象使用方法：" class="headerlink" title="10.2 exception对象使用方法："></a>10.2 exception对象使用方法：</h3><ol>
<li>在可能会抛出异常的页面page指令里，设置errorPage=”xxx.jsp”，表示出现异常将抛给xxx页面去处理</li>
<li>在xxx页面里，要使用Exception对象，需要把page指令里的isErrorPage属性设置为true。</li>
</ol>
<h2 id="11-阶段案例-实现用户登录"><a href="#11-阶段案例-实现用户登录" class="headerlink" title="11. 阶段案例-实现用户登录"></a>11. 阶段案例-实现用户登录</h2><p>用户登录页login.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;dologin.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;username&quot;&gt;user name&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户名&quot;&#x2F;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;password&quot;&gt;password&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;login&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>处理用户登录页dologin.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  String username &#x3D; &quot;&quot;;</span><br><span class="line">  String password &#x3D; &quot;&quot;;</span><br><span class="line">  request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">  username &#x3D; request.getParameter(&quot;username&quot;);</span><br><span class="line">  password &#x3D; request.getParameter(&quot;password&quot;);</span><br><span class="line">  if (&quot;admin&quot;.equals(username) &amp;&amp;  &quot;admin&quot;.equals(password))&#123;</span><br><span class="line">    session.setAttribute(&quot;loginUser&quot;, username);</span><br><span class="line">    request.getRequestDispatcher(&quot;login_success.jsp&quot;).forward(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    response.sendRedirect(&quot;login_failure.jsp&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>登录成功页login_success.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;login success!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  String loginUser &#x3D; &quot;&quot;;</span><br><span class="line">  if(session.getAttribute(&quot;loginUser&quot;) !&#x3D; null)&#123;</span><br><span class="line">    loginUser &#x3D; session.getAttribute(&quot;loginUser&quot;).toString();</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;欢迎，&lt;%&#x3D;loginUser%&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>登录失败页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;login failure.&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;login.jsp&quot;&gt;返回登录页&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-04 Java Beans</title>
    <url>/2015/04/09/Java%20Web%E4%B9%8BJSP-04%20Java%20Beans/</url>
    <content><![CDATA[<h2 id="1-JavaBean简介"><a href="#1-JavaBean简介" class="headerlink" title="1. JavaBean简介"></a>1. JavaBean简介</h2><p>javaBeans就是符合某种特定的规范的java类。使用JavaBeans的好处是解决代码重复编写，减少代码冗余，功能区分明确，提高了代码的可维护性。</p>
<p>JavaBean的设计原则：</p>
<ol>
<li>公有类</li>
<li>属性私有</li>
<li>无参的公有构造方法</li>
<li>getter和setter方法</li>
</ol>
<h2 id="2-JSP动作元素"><a href="#2-JSP动作元素" class="headerlink" title="2. JSP动作元素"></a>2. JSP动作元素</h2><h3 id="2-1-什么是JSP动作元素"><a href="#2-1-什么是JSP动作元素" class="headerlink" title="2.1 什么是JSP动作元素"></a>2.1 什么是JSP动作元素</h3><p>JSP动作元素（action element），动作元素为请求处理阶段提供信息。动作元素遵循XML语法，有一个包含元素名的开始标签，可以有属性，可选的内容、与开始标签匹配的结束标签。</p>
<h3 id="2-2-JSP动作元素的五大类"><a href="#2-2-JSP动作元素的五大类" class="headerlink" title="2.2 JSP动作元素的五大类"></a>2.2 JSP动作元素的五大类</h3><p>第一类是与存取JavaBean有关的，包括：<br><code>&lt;jsp:useBean&gt; &lt;jsp:setProperty&gt; &lt;jsp:getProperty&gt;</code></p>
<p>第二类是JSP1.2就开始有的基本元素，包括6个动作元素：<br><code>&lt;jsp:include&gt; &lt;jsp:forward&gt; &lt;jsp:param&gt; &lt;jsp:plugin&gt; &lt;jsp:params&gt; &lt;jsp:fallback&gt;</code></p>
<p>第三类是JSP2.0新增的元素，主要与JSP Document有关，包括6个元素：<br><code>&lt;jsp:root&gt; &lt;jsp:declaration&gt; &lt;jsp:scriptlet&gt; &lt;jsp:expression&gt; &lt;jsp:text&gt; &lt;jsp:output&gt;</code></p>
<p>第四类是JSP2.0新增的动作元素，主要是用来动态生成XML元素标签的值，包括三个动作：<br><code>&lt;jsp:attribute&gt; &lt;jsp:body&gt;  &lt;jsp:element&gt;</code></p>
<p>第五类是JSP2.0新增的动作元素，主要是用在Tag File中，有2个元素：<br><code>&lt;jsp:invoke&gt; &lt;jsp:dobody&gt;</code></p>
<h2 id="3-如何在JSP中使用Java-Beans"><a href="#3-如何在JSP中使用Java-Beans" class="headerlink" title="3. 如何在JSP中使用Java  Beans"></a>3. 如何在JSP中使用Java  Beans</h2><h3 id="3-1-像使用普通java类一样"><a href="#3-1-像使用普通java类一样" class="headerlink" title="3.1 像使用普通java类一样"></a>3.1 像使用普通java类一样</h3><ol>
<li>创建在src文件下，（可以创建包）创建一个类，满足设计原则即可</li>
<li>使用前通过import导入，通过使用new创建Javabean实例.在顶端添加<code>&lt;%@ page import=&quot;com.po.Users&quot; %&gt;</code>，导入javabean包</li>
</ol>
<h3 id="3-2-useBean元素"><a href="#3-2-useBean元素" class="headerlink" title="3.2 useBean元素"></a>3.2 useBean元素</h3><p>在JSP页面中通常使用JSP动作标签使用javabean(useBeans动作、setProperty动作、getProperty动作)<br><code>&lt;jsp:useBeans&gt;</code><br>作用：在jsp页面中实例化或者在指定范围内使用javabean:<br><code>&lt;jsp:useBean id=&quot;标识符&quot; class=&quot;Java类名&quot; scope=&quot;作用范围&quot;/&gt;</code></p>
<h3 id="3-3-使用setProperty"><a href="#3-3-使用setProperty" class="headerlink" title="3.3 使用setProperty"></a>3.3 使用setProperty</h3><p><code>&lt;jsp:setProperty&gt;</code>动作：给【已经实例化的Javabean对象的属性赋值】，一共有四种形式。</p>
<ol>
<li>根据表单自动匹配所有的属性<br><code>&lt;jsp:setProperty name=&quot;myUsers&quot; property=&quot;*&quot;/&gt;</code></li>
<li>根据表单自动匹配相应的属性（部分匹配）<br><code>&lt;jsp:setProperty name=&quot;myUsers&quot; property=&quot;username&quot;/&gt;</code></li>
<li>与表单无关，通过手工赋值给属性<br><code>&lt;jsp:setProperty name=&quot;myUsers&quot; property=&quot;username&quot; value=“Lisa”/&gt;</code></li>
<li>通过url传参数给属性赋值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;jsp:setProperty name&#x3D;&quot;myUsers&quot; property&#x3D;&quot;username&quot;&#x2F;&gt;</span><br><span class="line">&lt;jsp:setProperty name&#x3D;&quot;myUsers&quot; property&#x3D;&quot;password&quot; param&#x3D;“mypass”&#x2F;&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>案例：<br>表单部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;dologin.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;用户名&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;密码&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>dologin.jsp中匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;根据表单自动匹配所有属性&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;jsp:useBean id&#x3D;&quot;myUsers&quot; class&#x3D;&quot;liulx.javabean.User&quot; scope&#x3D;&quot;page&quot; &#x2F;&gt;</span><br><span class="line">&lt;%request.setCharacterEncoding(&quot;utf-8&quot;);%&gt;</span><br><span class="line">&lt;jsp:setProperty name&#x3D;&quot;myUsers&quot; property&#x3D;&quot;*&quot; &#x2F;&gt;</span><br><span class="line">用户名：&lt;%&#x3D;myUsers.getUsername()%&gt;</span><br><span class="line">密码：&lt;%&#x3D;myUsers.getPassword()%&gt;</span><br></pre></td></tr></table></figure>

<p>###3.4 getProperty标签</p>
<p><code>&lt;jsp:getProperty&gt;</code>动作：获取指定Javabean对象的属性值</p>
<p><code>&lt;jsp:getProperty name=&quot;JavaBean实例名&quot; property=&quot;属性名&quot; /&gt;</code>可以直接得到值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名：&lt;jsp:getProperty name&#x3D;&quot;myUsers&quot; property&#x3D;&quot;username&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-JavaBean四个作用域范围"><a href="#4-JavaBean四个作用域范围" class="headerlink" title="4. JavaBean四个作用域范围"></a>4. JavaBean四个作用域范围</h2><p>使用useBeans的scope属性来置顶javabean的作用范围，由小到大排列是：<br>page-&gt;request-&gt;session-&gt;application</p>
<ul>
<li>page对象仅在当前页面有效</li>
<li>request //可以通过HttpRequest.getAttribute()方法取得JavaBean对象.需要配合请求转发来使用，若使用请求重定向则无法访问到Javabean</li>
<li>session //可以通过HttpSession.getAttribute()方法取得JavaBean对象则是在一次对话中都会有效</li>
<li>application//可以通过application.getAttribute()方法取得JavaBean对象。全局，在服务器一次运行期间都有效</li>
</ul>
<p>request在源页面用request.getRequestDispatcher(“/somePage.jsp”).forward(request, response); 内部转发的方式将数据传递到下一个页面可获取对象。</p>
<h2 id="5-Model1简介"><a href="#5-Model1简介" class="headerlink" title="5. Model1简介"></a>5. Model1简介</h2><p>Model 1模型出现前，整个Web应用的情况：几乎全部由JSP页面组成，JSP页面接收处理客户端请求，对请求处理后直接做出响应。这样做的弊端：在页面层充斥着大量的业务逻辑代码和数据访问层代码，Web程序的可扩展性和可维护性非常差。</p>
<h3 id="5-1-javaWeb应用开发，模式分为Model1和Model2"><a href="#5-1-javaWeb应用开发，模式分为Model1和Model2" class="headerlink" title="5.1 javaWeb应用开发，模式分为Model1和Model2"></a>5.1 javaWeb应用开发，模式分为Model1和Model2</h3><ol>
<li>Model1早于Model2</li>
<li>在Model1之前，整个Web应用的情况：几乎全部由jsp页组成，jsp处理和响应客户端请求。<br>· 弊端：【界面层】充斥了大量业务逻辑代码和数据访问层代码，扩展性和维护性非常差</li>
</ol>
<h3 id="5-2-Model1"><a href="#5-2-Model1" class="headerlink" title="5.2 Model1"></a>5.2 Model1</h3><ol>
<li>Javabean的出现，可以使jsp页面使用Javabean封装的数据和业务逻辑代码，大大提高程序可维护性。</li>
<li>Model1 = JSP + JavaBean。如图：JSP访问页面层 -&gt; Javab业务逻辑层 -&gt; 数据库数据访问层</li>
</ol>
<p><img src="/images/java-web-jsp-03.png" alt="images/java-web-jsp-03.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-05 JSP状态管理</title>
    <url>/2015/04/10/Java%20Web%E4%B9%8BJSP-05%20JSP%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-http协议的无状态性"><a href="#1-http协议的无状态性" class="headerlink" title="1. http协议的无状态性"></a>1. http协议的无状态性</h2><ol>
<li>无状态是指，当浏览器发送请求给服务器的时候，服务器会响应。但当同一个浏览器再次发送请求时，服务器不会知道是刚才那个浏览器。</li>
<li>简单说，服务器【不会保存用户状态】，不会记得客户端是否访问过，所以这就是无状态协议。</li>
</ol>
<h2 id="2-Cookie概述"><a href="#2-Cookie概述" class="headerlink" title="2. Cookie概述"></a>2. Cookie概述</h2><p>保存用户的状态的两大机制：session ，cookie</p>
<p>cookie作用:</p>
<ol>
<li>对特定对象的追踪 </li>
<li>保存用户网页浏览记录与习惯</li>
<li>简化登录</li>
</ol>
<p>安全风险：容易泄露用户信息<br>典型应用一：判断注册用户是否已经登录网站<br>典型应用二：“购物车”的处理</p>
<h2 id="3-JSP页面中创建和使用Cookie"><a href="#3-JSP页面中创建和使用Cookie" class="headerlink" title="3. JSP页面中创建和使用Cookie"></a>3. JSP页面中创建和使用Cookie</h2><ol>
<li>创建Cookie对象：<code>Cookie cookie = new Cookie(String key , Object value);</code></li>
<li>写入Cookie对象：<code>response.addCookie(cookie);</code></li>
<li>读取Cookie对象：<code>Cookie[] cookies = request.getCookies();</code></li>
</ol>
<p>Cookie常用方法：</p>
<ol>
<li><code>void setMaxAge(int expiry)</code> 设置cookie的有效期，以秒为单位</li>
<li><code>void setValue(String value)</code> 在cookie创建后，对cookie进行赋值</li>
<li><code>String getValue()</code> 获取cookie的值</li>
<li><code>int getMaxAge()</code> 获取cookie的有效时间，以秒为单位</li>
</ol>
<h2 id="4-案例：Cookie在登录中的应用"><a href="#4-案例：Cookie在登录中的应用" class="headerlink" title="4. 案例：Cookie在登录中的应用"></a>4. 案例：Cookie在登录中的应用</h2><p>java.net包中的URLEncoder和URLDecoder可以用来编码和解码，避免出现中文乱码问题<br><code>String username = URLEncoder.encode(request.getParameter(&quot;username&quot;),&quot;utf-8&quot;);//编码，防止中文乱码</code></p>
<p>login.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.net.URLDecoder&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;cookie登录&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">    String username &#x3D; &quot;&quot;;</span><br><span class="line">    String password &#x3D; &quot;&quot;;</span><br><span class="line">    Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">    if(cookies !&#x3D; null &amp;&amp; cookies.length &gt; 0)&#123;</span><br><span class="line">      for(Cookie c : cookies)&#123;</span><br><span class="line">        if(c.getName().equals(&quot;username&quot;))&#123;</span><br><span class="line">          username &#x3D; URLDecoder.decode(c.getValue(), &quot;utf-8&quot;) ;</span><br><span class="line">        &#125;</span><br><span class="line">        if(c.getName().equals(&quot;password&quot;))&#123;</span><br><span class="line">          password &#x3D; URLDecoder.decode(c.getValue(), &quot;utf-8&quot;) ;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;form action&#x3D;&quot;dologin.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户名&quot; value&#x3D;&quot;&lt;%&#x3D;username%&gt;&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;密码&quot; value&#x3D;&quot;&lt;%&#x3D;password%&gt;&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;isUseCookie&quot; checked&#x3D;&quot;checked&quot;&#x2F;&gt;记住我</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>dologin.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.net.URLEncoder&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录成功&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">  String[] isUseCookies &#x3D; request.getParameterValues(&quot;isUseCookie&quot;);</span><br><span class="line">  if (isUseCookies !&#x3D; null &amp;&amp; isUseCookies.length &gt; 0)&#123;</span><br><span class="line">    &#x2F;&#x2F;保存cookie</span><br><span class="line">    String username &#x3D; URLEncoder.encode(request.getParameter(&quot;username&quot;), &quot;utf-8&quot;) ;</span><br><span class="line">    String password &#x3D; URLEncoder.encode(request.getParameter(&quot;password&quot;), &quot;utf-8&quot;);</span><br><span class="line">    Cookie usernameCookie &#x3D; new Cookie(&quot;username&quot;, username);</span><br><span class="line">    Cookie passwordCookie &#x3D; new Cookie(&quot;password&quot;, password);</span><br><span class="line">    usernameCookie.setMaxAge(864000); &#x2F;&#x2F;10天过期</span><br><span class="line">    passwordCookie.setMaxAge(864000);</span><br><span class="line">    response.addCookie(usernameCookie);</span><br><span class="line">    response.addCookie(passwordCookie);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;清楚cookie</span><br><span class="line">    Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">    if(cookies !&#x3D; null &amp;&amp; cookies.length &gt; 0)&#123;</span><br><span class="line">      for(Cookie c : cookies)&#123;</span><br><span class="line">        if(c.getName().equals(&quot;username&quot;) || c.getName().equals(&quot;password&quot;))&#123;</span><br><span class="line">          c.setMaxAge(0);</span><br><span class="line">          response.addCookie(c); &#x2F;&#x2F;设置好cookie后还要添加进去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;user.jsp&quot;&gt;查看用户&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>user.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page import&#x3D;&quot;java.net.URLDecoder&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">  String username &#x3D; &quot;&quot;;</span><br><span class="line">  String password &#x3D; &quot;&quot;;</span><br><span class="line">  Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">  if(cookies !&#x3D; null &amp;&amp; cookies.length &gt; 0)&#123;</span><br><span class="line">    for(Cookie c : cookies)&#123;</span><br><span class="line">      if(c.getName().equals(&quot;username&quot;))&#123;</span><br><span class="line">        username &#x3D; URLDecoder.decode(c.getValue(), &quot;utf-8&quot;) ;</span><br><span class="line">      &#125;</span><br><span class="line">      if(c.getName().equals(&quot;password&quot;))&#123;</span><br><span class="line">        password &#x3D; URLDecoder.decode(c.getValue(), &quot;utf-8&quot;) ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户名&quot; value&#x3D;&quot;&lt;%&#x3D;username%&gt;&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;密码&quot; value&#x3D;&quot;&lt;%&#x3D;password%&gt;&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-06 JSP指令与动作元素</title>
    <url>/2015/04/13/Java%20Web%E4%B9%8BJSP-06%20JSP%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%8A%A8%E4%BD%9C%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="1-include指令"><a href="#1-include指令" class="headerlink" title="1. include指令"></a>1. include指令</h2><p>常用的有page、include、taglib指令这三种指令；<br>page：位于页面顶端，一个页面可以包含多个page指令<br>include：将一个外部文件嵌入jsp中，同时解析这个页面中的jsp语句。<br>taglib：使用标签库，自定义新的标签，在jsp中启动定制行为。</p>
<p>语法 <code>&lt;% include file=&quot;地址&quot;%&gt;</code>。<br>案例：显示当前时间的页面。<br>（1）写一个只输出时间的方法的date.jsp。<br>（2）用于显示的页面,包含<code>&lt;% include file=&quot;date.jsp&quot;%&gt;</code></p>
<h2 id="2-include动作"><a href="#2-include动作" class="headerlink" title="2. include动作"></a>2. include动作</h2><ol>
<li>是一个动作标签<code>&lt;jsp:xxx&gt;</code></li>
<li>语法：<code>&lt;jsp:include page=&quot;URL&quot; flush=&quot;true|false&quot;&gt;</code></li>
</ol>
<ul>
<li>page属性：要包含的页面</li>
<li>flush属性：被包含的页面是否从缓冲区里读取</li>
</ul>
<h2 id="3-include指令和动作的区别"><a href="#3-include指令和动作的区别" class="headerlink" title="3. include指令和动作的区别"></a>3. include指令和动作的区别</h2><ol>
<li>包含内容： 指令包含的是【源代码】，动作包含的是页面输出的【结果】</li>
<li>生成的servlet：指令会生成一个整体的Servlet；而动作会分别生成两个，即在一个Servlet中调用另一个Servlet</li>
<li>其他区别如图：</li>
<li>使用场合】：页面内容不经常变化使用include指令，页面内容经常变化使用<code>&lt;jsp:include&gt;</code>动作</li>
</ol>
<p><img src="/images/java-web-jsp-04.jpg" alt="images/java-web-jsp-04.jpg"></p>
<h2 id="4-forward指令"><a href="#4-forward指令" class="headerlink" title="4. forward指令"></a>4. forward指令</h2><p>forward动作<br>1、语法：<code>&lt;jsp:forward page=&quot;URL&quot;/&gt;</code><br>2、等于服务器内部转发指令 <code>request.getRequestDispacher(&quot;URL&quot;).forward(req,res);</code><br>相当于是服务器内部跳转，URL地址不会发生变化。<br>四种跳转.<br><code>&lt;% response.sendRedirect(&quot;login_seccess.jsp&quot;); %&gt;</code>//告诉浏览器此路不通,你再问问另一页面能解决你的问题不?<br><code>&lt;jsp:forward page=&quot;login_fail.jsp&quot;/&gt;</code> //服务器将请求转发到另一页面,浏览器不知情.<br><code>&lt;% pageContext.forward(&quot;login_fail.jsp&quot;);%&gt;</code> //服务器将请求转发到另一页面,浏览器不知情.<br><code>&lt;% request.getRequestDispatcher(&quot;login_fail.jsp&quot;).forward(request,response);%&gt;</code> //服务器将请求转发到另一页面,浏览器不知情.</p>
<h2 id="5-param动作"><a href="#5-param动作" class="headerlink" title="5. param动作"></a>5. param动作</h2><ol>
<li>语法：<code>&lt;jsp:param name=&quot;参数名&quot; value=&quot;参数值&quot;&gt;</code></li>
<li>【常常与<code>&lt;jsp:forward&gt;&lt;/jsp:forward&gt;</code>一起使用】，并作为其【子标签】。</li>
<li>用于传递新参数或者【修改原有参数值】，修改参数时使用form表单里的参数名称即可。同样用request.getParameter(“参数名”)获取</li>
</ol>
<p>必须与forward、include及plugin动作配合使用。通常与forward动作一起使用，作为它的子标签，它的作用是指定某个参数值，可以用于传递参数.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page&#x3D;&quot;url&quot;&gt; </span><br><span class="line">&lt;jsp:param value&#x3D;&quot;123@qq.com&quot; name&#x3D;&quot;email&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;jsp:forward&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之JSP-07 综合案例</title>
    <url>/2015/04/13/Java%20Web%E4%B9%8BJSP-07%20%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="1-JDBC-DBHelper"><a href="#1-JDBC-DBHelper" class="headerlink" title="1. JDBC DBHelper"></a>1. JDBC DBHelper</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package util;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line">public class DBHelper &#123;</span><br><span class="line">   </span><br><span class="line">    private static final String driver &#x3D; &quot;com.mysql.jdbc.Driver&quot;; &#x2F;&#x2F;数据库驱动</span><br><span class="line">    &#x2F;&#x2F;连接数据库的URL地址</span><br><span class="line">    private static final String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;shopping?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;; </span><br><span class="line">    private static final String username&#x3D;&quot;root&quot;;&#x2F;&#x2F;数据库的用户名</span><br><span class="line">    private static final String password&#x3D;&quot;&quot;;&#x2F;&#x2F;数据库的密码</span><br><span class="line">    </span><br><span class="line">    private static Connection conn&#x3D;null;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;静态代码块负责加载驱动</span><br><span class="line">    static </span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;单例模式返回数据库连接对象</span><br><span class="line">    public static Connection getConnection() throws Exception</span><br><span class="line">    &#123;</span><br><span class="line">        if(conn&#x3D;&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            conn &#x3D; DriverManager.getConnection(url, username, password);</span><br><span class="line">            return conn;</span><br><span class="line">        &#125;</span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">           Connection conn &#x3D; DBHelper.getConnection();</span><br><span class="line">           if(conn!&#x3D;null)</span><br><span class="line">           &#123;</span><br><span class="line">               System.out.println(&quot;数据库连接正常！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           else</span><br><span class="line">           &#123;</span><br><span class="line">               System.out.println(&quot;数据库连接异常！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-实体类"><a href="#2-实体类" class="headerlink" title="2. 实体类"></a>2. 实体类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package entity;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;商品类</span><br><span class="line">public class Items &#123;</span><br><span class="line"></span><br><span class="line">    private int id; &#x2F;&#x2F; 商品编号</span><br><span class="line">    private String name; &#x2F;&#x2F; 商品名称</span><br><span class="line">    private String city; &#x2F;&#x2F; 产地</span><br><span class="line">    private int price; &#x2F;&#x2F; 价格</span><br><span class="line">    private int number; &#x2F;&#x2F; 库存</span><br><span class="line">    private String picture; &#x2F;&#x2F; 商品图片</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCity() &#123;</span><br><span class="line">        return city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCity(String city) &#123;</span><br><span class="line">        this.city &#x3D; city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(int price) &#123;</span><br><span class="line">        this.price &#x3D; price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNumber() &#123;</span><br><span class="line">        return number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNumber(int number) &#123;</span><br><span class="line">        this.number &#x3D; number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPicture() &#123;</span><br><span class="line">        return picture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPicture(String picture) &#123;</span><br><span class="line">        this.picture &#x3D; picture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-DAO"><a href="#3-DAO" class="headerlink" title="3. DAO"></a>3. DAO</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package dao;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">import util.DBHelper;</span><br><span class="line"></span><br><span class="line">import entity.Items;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;商品的业务逻辑类</span><br><span class="line">public class ItemsDAO &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获得所有的商品信息</span><br><span class="line">    public ArrayList&lt;Items&gt; getAllItems() &#123;</span><br><span class="line">        Connection conn &#x3D; null;</span><br><span class="line">        PreparedStatement stmt &#x3D; null;</span><br><span class="line">        ResultSet rs &#x3D; null;</span><br><span class="line">        ArrayList&lt;Items&gt; list &#x3D; new ArrayList&lt;Items&gt;(); &#x2F;&#x2F; 商品集合</span><br><span class="line">        try &#123;</span><br><span class="line">            conn &#x3D; DBHelper.getConnection();</span><br><span class="line">            String sql &#x3D; &quot;select * from items;&quot;; &#x2F;&#x2F; SQL语句</span><br><span class="line">            stmt &#x3D; conn.prepareStatement(sql);</span><br><span class="line">            rs &#x3D; stmt.executeQuery();</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                Items item &#x3D; new Items();</span><br><span class="line">                item.setId(rs.getInt(&quot;id&quot;));</span><br><span class="line">                item.setName(rs.getString(&quot;name&quot;));</span><br><span class="line">                item.setCity(rs.getString(&quot;city&quot;));</span><br><span class="line">                item.setNumber(rs.getInt(&quot;number&quot;));</span><br><span class="line">                item.setPrice(rs.getInt(&quot;price&quot;));</span><br><span class="line">                item.setPicture(rs.getString(&quot;picture&quot;));</span><br><span class="line">                list.add(item);&#x2F;&#x2F; 把一个商品加入集合</span><br><span class="line">            &#125;</span><br><span class="line">            return list; &#x2F;&#x2F; 返回集合。</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F; 释放数据集对象</span><br><span class="line">            if (rs !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                    rs &#x3D; null;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 释放语句对象</span><br><span class="line">            if (stmt !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                    stmt &#x3D; null;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据商品编号获得商品资料</span><br><span class="line">    public Items getItemsById(int id) &#123;</span><br><span class="line">        Connection conn &#x3D; null;</span><br><span class="line">        PreparedStatement stmt &#x3D; null;</span><br><span class="line">        ResultSet rs &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn &#x3D; DBHelper.getConnection();</span><br><span class="line">            String sql &#x3D; &quot;select * from items where id&#x3D;?;&quot;; &#x2F;&#x2F; SQL语句</span><br><span class="line">            stmt &#x3D; conn.prepareStatement(sql);</span><br><span class="line">            stmt.setInt(1, id);</span><br><span class="line">            rs &#x3D; stmt.executeQuery();</span><br><span class="line">            if (rs.next()) &#123;</span><br><span class="line">                Items item &#x3D; new Items();</span><br><span class="line">                item.setId(rs.getInt(&quot;id&quot;));</span><br><span class="line">                item.setName(rs.getString(&quot;name&quot;));</span><br><span class="line">                item.setCity(rs.getString(&quot;city&quot;));</span><br><span class="line">                item.setNumber(rs.getInt(&quot;number&quot;));</span><br><span class="line">                item.setPrice(rs.getInt(&quot;price&quot;));</span><br><span class="line">                item.setPicture(rs.getString(&quot;picture&quot;));</span><br><span class="line">                return item;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F; 释放数据集对象</span><br><span class="line">            if (rs !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                    rs &#x3D; null;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 释放语句对象</span><br><span class="line">            if (stmt !&#x3D; null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                    stmt &#x3D; null;</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取最近浏览的前五条商品信息</span><br><span class="line">    public ArrayList&lt;Items&gt; getViewList(String list)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;list:&quot;+list);</span><br><span class="line">        ArrayList&lt;Items&gt; itemlist &#x3D; new ArrayList&lt;Items&gt;();</span><br><span class="line">        int iCount&#x3D;5; &#x2F;&#x2F;每次返回前五条记录</span><br><span class="line">        if(list!&#x3D;null&amp;&amp;list.length()&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            String[] arr &#x3D; list.split(&quot;,&quot;);</span><br><span class="line">            System.out.println(&quot;arr.length&#x3D;&quot;+arr.length);</span><br><span class="line">            &#x2F;&#x2F;如果商品记录大于等于5条</span><br><span class="line">            if(arr.length&gt;&#x3D;5)</span><br><span class="line">            &#123;</span><br><span class="line">               for(int i&#x3D;arr.length-1;i&gt;&#x3D;arr.length-iCount;i--)</span><br><span class="line">               &#123;</span><br><span class="line">                  itemlist.add(getItemsById(Integer.parseInt(arr[i])));  </span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                for(int i&#x3D;arr.length-1;i&gt;&#x3D;0;i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    itemlist.add(getItemsById(Integer.parseInt(arr[i])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return itemlist;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-index-jsp"><a href="#4-index-jsp" class="headerlink" title="4. index.jsp"></a>4. index.jsp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;entity.Items&quot;%&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;dao.ItemsDAO&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path &#x3D; request.getContextPath();</span><br><span class="line">String basePath &#x3D; request.getScheme()+&quot;:&#x2F;&#x2F;&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;&#x2F;&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href&#x3D;&quot;&lt;%&#x3D;basePath%&gt;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP &#39;index.jsp&#39; starting page&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;pragma&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;cache-control&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;0&quot;&gt;    </span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;keywords&quot; content&#x3D;&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;description&quot; content&#x3D;&quot;This is my page&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;styles.css&quot;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">       div&#123;</span><br><span class="line">          float:left;</span><br><span class="line">          margin: 10px;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd&#123;</span><br><span class="line">          margin:0px;</span><br><span class="line">          font-size:10pt;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd.dd_name</span><br><span class="line">       &#123;</span><br><span class="line">          color:blue;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd.dd_city</span><br><span class="line">       &#123;</span><br><span class="line">          color:#000;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;商品展示&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;center&gt;</span><br><span class="line">    &lt;table width&#x3D;&quot;750&quot; height&#x3D;&quot;60&quot; cellpadding&#x3D;&quot;0&quot; cellspacing&#x3D;&quot;0&quot; border&#x3D;&quot;0&quot;&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;!-- 商品循环开始 --&gt;</span><br><span class="line">           &lt;% </span><br><span class="line">               ItemsDAO itemsDao &#x3D; new ItemsDAO(); </span><br><span class="line">               ArrayList&lt;Items&gt; list &#x3D; itemsDao.getAllItems();</span><br><span class="line">               if(list!&#x3D;null&amp;&amp;list.size()&gt;0)</span><br><span class="line">               &#123;</span><br><span class="line">                   for(int i&#x3D;0;i&lt;list.size();i++)</span><br><span class="line">                   &#123;</span><br><span class="line">                      Items item &#x3D; list.get(i);</span><br><span class="line">           %&gt;   </span><br><span class="line">          &lt;div&gt;</span><br><span class="line">             &lt;dl&gt;</span><br><span class="line">               &lt;dt&gt;</span><br><span class="line">                 &lt;a href&#x3D;&quot;details.jsp?id&#x3D;&lt;%&#x3D;item.getId()%&gt;&quot;&gt;&lt;img src&#x3D;&quot;images&#x2F;&lt;%&#x3D;item.getPicture()%&gt;&quot; width&#x3D;&quot;120&quot; height&#x3D;&quot;90&quot; border&#x3D;&quot;1&quot;&#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">               &lt;&#x2F;dt&gt;</span><br><span class="line">               &lt;dd class&#x3D;&quot;dd_name&quot;&gt;&lt;%&#x3D;item.getName() %&gt;&lt;&#x2F;dd&gt; </span><br><span class="line">               &lt;dd class&#x3D;&quot;dd_city&quot;&gt;产地:&lt;%&#x3D;item.getCity() %&gt;&amp;nbsp;&amp;nbsp;价格:￥ &lt;%&#x3D;item.getPrice() %&gt;&lt;&#x2F;dd&gt; </span><br><span class="line">             &lt;&#x2F;dl&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;!-- 商品循环结束 --&gt;</span><br><span class="line">        </span><br><span class="line">          &lt;%</span><br><span class="line">                   &#125;</span><br><span class="line">              &#125; </span><br><span class="line">          %&gt;</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">      &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-detail-jsp"><a href="#5-detail-jsp" class="headerlink" title="5. detail.jsp"></a>5. detail.jsp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; import&#x3D;&quot;java.util.*&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;entity.Items&quot;%&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;dao.ItemsDAO&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path &#x3D; request.getContextPath();</span><br><span class="line">String basePath &#x3D; request.getScheme()+&quot;:&#x2F;&#x2F;&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;&#x2F;&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href&#x3D;&quot;&lt;%&#x3D;basePath%&gt;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP &#39;details.jsp&#39; starting page&lt;&#x2F;title&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;pragma&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;cache-control&quot; content&#x3D;&quot;no-cache&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;0&quot;&gt;    </span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;keywords&quot; content&#x3D;&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;description&quot; content&#x3D;&quot;This is my page&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;styles.css&quot;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">       div&#123;</span><br><span class="line">          float:left;</span><br><span class="line">          margin-left: 30px;</span><br><span class="line">          margin-right:30px;</span><br><span class="line">          margin-top: 5px;</span><br><span class="line">          margin-bottom: 5px;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd&#123;</span><br><span class="line">          margin:0px;</span><br><span class="line">          font-size:10pt;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd.dd_name</span><br><span class="line">       &#123;</span><br><span class="line">          color:blue;</span><br><span class="line">       &#125;</span><br><span class="line">       div dd.dd_city</span><br><span class="line">       &#123;</span><br><span class="line">          color:#000;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;商品详情&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">      &lt;table width&#x3D;&quot;750&quot; height&#x3D;&quot;60&quot; cellpadding&#x3D;&quot;0&quot; cellspacing&#x3D;&quot;0&quot; border&#x3D;&quot;0&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;!-- 商品详情 --&gt;</span><br><span class="line">          &lt;% </span><br><span class="line">             ItemsDAO itemDao &#x3D; new ItemsDAO();</span><br><span class="line">             Items item &#x3D; itemDao.getItemsById(Integer.parseInt(request.getParameter(&quot;id&quot;)));</span><br><span class="line">             if(item!&#x3D;null)</span><br><span class="line">             &#123;</span><br><span class="line">          %&gt;</span><br><span class="line">          &lt;td width&#x3D;&quot;70%&quot; valign&#x3D;&quot;top&quot;&gt;</span><br><span class="line">             &lt;table&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td rowspan&#x3D;&quot;4&quot;&gt;&lt;img src&#x3D;&quot;images&#x2F;&lt;%&#x3D;item.getPicture()%&gt;&quot; width&#x3D;&quot;200&quot; height&#x3D;&quot;160&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td&gt;&lt;B&gt;&lt;%&#x3D;item.getName() %&gt;&lt;&#x2F;B&gt;&lt;&#x2F;td&gt; </span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td&gt;产地：&lt;%&#x3D;item.getCity()%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td&gt;价格：&lt;%&#x3D;item.getPrice() %&gt;￥&lt;&#x2F;td&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt; </span><br><span class="line">             &lt;&#x2F;table&gt;</span><br><span class="line">          &lt;&#x2F;td&gt;</span><br><span class="line">          &lt;% </span><br><span class="line">            &#125;</span><br><span class="line">          %&gt;</span><br><span class="line">          &lt;% </span><br><span class="line">              String list &#x3D;&quot;&quot;;</span><br><span class="line">              &#x2F;&#x2F;从客户端获得Cookies集合</span><br><span class="line">              Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">              &#x2F;&#x2F;遍历这个Cookies集合</span><br><span class="line">              if(cookies!&#x3D;null&amp;&amp;cookies.length&gt;0)</span><br><span class="line">              &#123;</span><br><span class="line">                  for(Cookie c:cookies)</span><br><span class="line">                  &#123;</span><br><span class="line">                      if(c.getName().equals(&quot;ListViewCookie&quot;))</span><br><span class="line">                      &#123;</span><br><span class="line">                         list &#x3D; c.getValue();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              </span><br><span class="line">              list+&#x3D;request.getParameter(&quot;id&quot;)+&quot;,&quot;;</span><br><span class="line">              &#x2F;&#x2F;如果浏览记录超过1000条，清零.</span><br><span class="line">              String[] arr &#x3D; list.split(&quot;,&quot;);</span><br><span class="line">              if(arr!&#x3D;null&amp;&amp;arr.length&gt;0)</span><br><span class="line">              &#123;</span><br><span class="line">                  if(arr.length&gt;&#x3D;1000)</span><br><span class="line">                  &#123;</span><br><span class="line">                      list&#x3D;&quot;&quot;;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              Cookie cookie &#x3D; new Cookie(&quot;ListViewCookie&quot;,list);</span><br><span class="line">              response.addCookie(cookie);</span><br><span class="line">          </span><br><span class="line">          %&gt;</span><br><span class="line">          &lt;!-- 浏览过的商品 --&gt;</span><br><span class="line">          &lt;td width&#x3D;&quot;30%&quot; bgcolor&#x3D;&quot;#EEE&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">             &lt;br&gt;</span><br><span class="line">             &lt;b&gt;您浏览过的商品&lt;&#x2F;b&gt;&lt;br&gt;</span><br><span class="line">             &lt;!-- 循环开始 --&gt;</span><br><span class="line">             &lt;% </span><br><span class="line">                ArrayList&lt;Items&gt; itemlist &#x3D; itemDao.getViewList(list);</span><br><span class="line">                if(itemlist!&#x3D;null&amp;&amp;itemlist.size()&gt;0 )</span><br><span class="line">                &#123;</span><br><span class="line">                   System.out.println(&quot;itemlist.size&#x3D;&quot;+itemlist.size());</span><br><span class="line">                   for(Items i:itemlist)</span><br><span class="line">                   &#123;</span><br><span class="line">                         </span><br><span class="line">             %&gt;</span><br><span class="line">             &lt;div&gt;</span><br><span class="line">             &lt;dl&gt;</span><br><span class="line">               &lt;dt&gt;</span><br><span class="line">                 &lt;a href&#x3D;&quot;details.jsp?id&#x3D;&lt;%&#x3D;i.getId()%&gt;&quot;&gt;&lt;img src&#x3D;&quot;images&#x2F;&lt;%&#x3D;i.getPicture() %&gt;&quot; width&#x3D;&quot;120&quot; height&#x3D;&quot;90&quot; border&#x3D;&quot;1&quot;&#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">               &lt;&#x2F;dt&gt;</span><br><span class="line">               &lt;dd class&#x3D;&quot;dd_name&quot;&gt;&lt;%&#x3D;i.getName() %&gt;&lt;&#x2F;dd&gt; </span><br><span class="line">               &lt;dd class&#x3D;&quot;dd_city&quot;&gt;产地:&lt;%&#x3D;i.getCity() %&gt;&amp;nbsp;&amp;nbsp;价格:&lt;%&#x3D;i.getPrice() %&gt; ￥ &lt;&#x2F;dd&gt; </span><br><span class="line">             &lt;&#x2F;dl&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">             &lt;% </span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line">             %&gt;</span><br><span class="line">             &lt;!-- 循环结束 --&gt;</span><br><span class="line">          &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">      &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之Servlet-01 Servlet基础</title>
    <url>/2015/04/13/Java%20Web%E4%B9%8BServlet-01%20Servlet%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-Servlet概述"><a href="#1-Servlet概述" class="headerlink" title="1. Servlet概述"></a>1. Servlet概述</h2><p>jsp前身就是servlet，Servelet是在服务器上运行的小程序。<br>一个Servlet就是一个Java类，并且可以通过“请求－响应”编程模型来访问的这个驻留在服务器内存里的Servlet程序。</p>
<h2 id="2-Tomcat容器等级"><a href="#2-Tomcat容器等级" class="headerlink" title="2. Tomcat容器等级"></a>2. Tomcat容器等级</h2><p>Tomcat在大多数情况下充当servlet的容器，也就是说：在写完JSP代码后进行第一次执行时，tomcat（servlet容器）先将JSP代码翻译成servlet类（java代码），然后实例化该类，再调用该类的init,service,destory等进行生命周期服务。当客户端再进行第二次访问请求时，此时就没有servlet容器的翻译这一步了，因为之前翻译的java代码会一直保存，以便于后面的访问不再进行翻译，可大大提高访问效率。所以，JSP页面在第一次被访问时，其所花费的时间是最长的。<br>最主要的方法就是init,service和destroy，它们是servlet对象的生存周期，当一个页面被编译成servlet类，再进行实例化后，这个页面就开始了真正的生命周期，servlet容器会先加载init方法进行初始化，初始化后才可进行接收和相应客户端的消息，之后容器会再加载service，这部分就是真正相应客户端请求的实现逻辑，它实现客户端的请求响应，然后动态生成HTML页面显示到客户端；而destory方法则是在servlet生命周期即将结束时进行的清理工作。</p>
<p><img src="/images/java-web-servlet-01.jpg" alt="java-web-servlet-01"></p>
<h2 id="3-手工编写第一个Servlet"><a href="#3-手工编写第一个Servlet" class="headerlink" title="3. 手工编写第一个Servlet"></a>3. 手工编写第一个Servlet</h2><ol>
<li>继承HttpServlet</li>
<li>重写doGet()或者doPost()：右键-&gt;source-&gt;重写</li>
<li>在web.xml中注册servlet</li>
</ol>
<p>问题解析：<br>1、向页面输出html语言 <code>response.setContentType(&quot;text/html;charset=utf-8&quot;);</code><br>2、在配置web.xml中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;servlet.helloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;servlet&#x2F;HelloServlet&lt;&#x2F;url-pattern&gt;&#x2F;&#x2F;根目录下的路径信息</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<p>web.xml中Servlet的配置说明：<br>1、<code>&lt;servlet&gt;</code>标签中<br><code>&lt;servlet-name&gt;</code>指定servlet名称，<code>&lt;servlet-class&gt;</code>指定servlet类，需要使用完整类名<br>2、<code>&lt;servlet-mapping&gt;</code>标签中<br><code>&lt;servlet-name&gt;</code>指定servlet名称，需要与<code>&lt;servlet&gt;</code>标签中的相应servlet名称对应；<br><code>&lt;url-pattern&gt;</code>指定servlet地址，在Jsp页面中使用的URL需要与相应servlet的地址对应</p>
<h2 id="4-Servlet生命周期"><a href="#4-Servlet生命周期" class="headerlink" title="4. Servlet生命周期"></a>4. Servlet生命周期</h2><ol>
<li>初始化阶段，调用init()方法。</li>
<li>响应客户端请求，调用service()方法，有service方法根据提交方式，决定使用doGet()还是doPost()方法。</li>
<li>终止阶段，看服务器是否关闭，如果要关闭，那么就要调用destroy()方法。</li>
</ol>
<p>HttpServlet的两个Service()方法区别<br>在HttpServlet类中有两个service()方法，如下：<br>void service(ServletRequest req, ServletResponse res)<br>protected void service(HttpServletRequest req, HttpServletResponse resp)<br>其中只有void service(ServletRequest req，ServletResponse response)方法是由tomcat自动调用，它将接收的客户端请求转交给HttpServlet中的另一个protected void service(HttpServletRequest req，HttpServletResponse res)方法，此保护类型的service方法再把将请求分发给doPost()、doGet()方法进行下一步处理。所以我们完全可以重写受保护的service()方法来代替doPost()和doGet()方法。</p>
<p><img src="/images/java-web-servlet-02.png" alt="java-web-servlet-02.png"></p>
<h2 id="5-tomcat装在servlet的三种情况"><a href="#5-tomcat装在servlet的三种情况" class="headerlink" title="5. tomcat装在servlet的三种情况"></a>5. tomcat装在servlet的三种情况</h2><ol>
<li>servlet容器启动时自动装在某些servlet，实现它只需要在web.xml文件中的<code>&lt;servlet&gt;&lt;/servlet&gt;</code>之间添加如下代码：<code>&lt;load-on-startup&gt;1&lt;load-on-startup&gt;</code>，其中数字越大表示优先级别越高。</li>
<li>在servlet容器启动后，客户首次向servlet发送请求。</li>
<li>servlet类被更新后，重新装在servlet。</li>
</ol>
<p><strong>注意</strong>，在整个生命周期类，init()方法只被调用一次。如果用粗暴的方法关闭服务器就不会调用destroy()方法。</p>
<h2 id="6-Servlet与jsp内置对象的关系"><a href="#6-Servlet与jsp内置对象的关系" class="headerlink" title="6. Servlet与jsp内置对象的关系"></a>6. Servlet与jsp内置对象的关系</h2><p><img src="/images/java-web-servlet-03.png" alt="servlet-jsp"></p>
<p>out 是jspwriter 对象； resp.getWriter是 PrintWriter对象</p>
<h2 id="7-Servlet获取表单数据"><a href="#7-Servlet获取表单数据" class="headerlink" title="7. Servlet获取表单数据"></a>7. Servlet获取表单数据</h2><ul>
<li>获取一个值的时候用request.getParameter(“name名”); </li>
<li>获取一个复选框里面的多个值时用request.getParameterValues(“name名”);</li>
</ul>
<p>Servlet跳转类似jsp</p>
<p>对于boolean类型的值，不要使用is，否则java bean中生成的不是get开头的属性。</p>
<h2 id="8-Servlet的路径跳转"><a href="#8-Servlet的路径跳转" class="headerlink" title="8. Servlet的路径跳转"></a>8. Servlet的路径跳转</h2><h3 id="8-1-JSP跳转到Servlet"><a href="#8-1-JSP跳转到Servlet" class="headerlink" title="8.1 JSP跳转到Servlet"></a>8.1 JSP跳转到Servlet</h3><p>1、相对路径,如<code>href=&quot;servlet/TestServlet&quot;</code><br>***注意：如果写成<code>/servlet/TestServlet</code>会报错，因为第一个’/‘表示的是【服务器根目录：<code>http://localhost:8080/</code>】<br>2、绝对路径，通过内置成员变量path实现，如<code>href=&quot;&lt;%=path%&gt;/servlet/TestServlet&quot;</code>。<br>注意：这里的path得到的是项目根目录，如【<code>http://localhost:8080/Servlet002_GetFormDemo</code>】</p>
<h3 id="8-2-Servlet跳转JSP"><a href="#8-2-Servlet跳转JSP" class="headerlink" title="8.2 Servlet跳转JSP"></a>8.2 Servlet跳转JSP</h3><p>1、请求重定向：<code>response.sendRedirect(request.getContextPath()+&quot;/xxx.jsp&quot;);</code>这里通过<code>request.getContextPath()</code>方法获得项目根目录，或者通过<code>../xxx.jsp</code>取得上层路径得到<br>2、服务器内部转发：<code>request.getRequestDispatcher(&quot;../xxx.jsp&quot;).forward(req,resp);</code><br>小结：都可以通过../xxx.jsp得到</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Web之Servlet-02 应用MVC架构实现项目</title>
    <url>/2015/04/15/Java%20Web%E4%B9%8BServlet-02%20%E5%BA%94%E7%94%A8MVC%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1-获取初始化参数"><a href="#1-获取初始化参数" class="headerlink" title="1. 获取初始化参数"></a>1. 获取初始化参数</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在servlet的init()方法中获取初始化的值：</span><br><span class="line"><span class="keyword">this</span>.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">this</span>.getInitParameter(<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-常用方法</title>
    <url>/2015/04/08/Java-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>之前一直用C#比较多，最近开始研究Java，两者之间的库设计差别很大，故再次做个总结。</p>
<h2 id="1-日期"><a href="#1-日期" class="headerlink" title="1. 日期"></a>1. 日期</h2><p>1.日期格式化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span><br><span class="line">String s &#x3D; sdf.format(new Date());</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>字符串转化为日期</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span><br><span class="line">Date d &#x3D; sdf.parse(&quot;2015年04月13日&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="2-泛型"><a href="#2-泛型" class="headerlink" title="2. 泛型"></a>2. 泛型</h2><p>1.新建泛型</p>
<p>可以再<code>new</code>后面直接使用<code>&lt;&gt;</code>来初始化，不需要指定类型，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Crime&gt; crimes &#x3D; new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Web, JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle依赖管理</title>
    <url>/2016/05/10/Java-Gradle%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>指定仓库是maven central</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入我们要使用apache commons中的csv包，首先在网页<a href="https://commons.apache.org/proper/commons-csv/" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-csv/</a> 中找到对应的maven：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-csv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的是xml格式，我们把它转换成gradle格式：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.apache.commons'</span>, name: <span class="string">'commons-csv'</span>, version: <span class="string">'1.3'</span></span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="comment">//compile 'org.apache.commons:commons-csv:1.3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在gradle面板刷新项目。</p>
<p>也可以在Gradle面板右键选择<code>auto import</code>.</p>
<p>也可以在命令行运行<code>./gradlew</code>用来在电脑上安装gradle。以及<code>./gradlew dependencies</code>是用来安装依赖的。</p>
<h2 id="2-使用依赖"><a href="#2-使用依赖" class="headerlink" title="2. 使用依赖"></a>2. 使用依赖</h2><p>新建类<code>io.github.liulixiang1988.Main</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.csv.CSVFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.csv.CSVPrinter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CSVPrinter printer = <span class="keyword">new</span> CSVPrinter(System.out, CSVFormat.EXCEL);</span><br><span class="line">            printer.printRecord(<span class="string">"Liu"</span>, <span class="string">"Lixiang"</span>, <span class="number">1988</span>);</span><br><span class="line">            printer.printRecord(<span class="string">"L"</span>, <span class="string">"L"</span>, <span class="number">1988</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于不知道具体名字的包，比如HTML解析包，我们可以到<a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a> 去搜索<code>html parser</code>，但有时候搜索的结果不尽人意，此时我们可以使用google搜索<code>maven html parser</code>，会返回<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a> 网站对<code>maven</code>的搜索。</p>
<p>我们也可以使用github搜索，条件是<code>language:java</code>，然后按星排名。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8中的并行流</title>
    <url>/2016/06/22/Java-Java8-parallel-stream/</url>
    <content><![CDATA[<p><em>此笔记是我在阅读《Java8实战》中的一些记录。</em></p>
<p>Java8中增加了流(stream)的概念，为数据的处理带来了很大的方便。</p>
<p>并行流将数据分割成不同的块，并且用不同的线程处理不同的块。</p>
<p>现在要根据输入<code>n</code>，求从1到n的和，这里我们不使用<code>n*(1+n)/2</code>的方式，而是使用累加。我们分别写出迭代、顺序流、并行流的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelStreams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sequentialSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>, i-&gt;i+<span class="number">1</span>)</span><br><span class="line">                .limit(n)</span><br><span class="line">                .reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">iterativeSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1L</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parallelSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>, i-&gt;i+<span class="number">1</span>)</span><br><span class="line">                .limit(n)</span><br><span class="line">                .parallel()</span><br><span class="line">                .reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，将顺序流转换为并行流只需要<code>parallel()</code>方法即可。</p>
<p>现在我们来测量这几个方法的性能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">measureSumPerf</span><span class="params">(Function&lt;Long, Long&gt; adder, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> fastest = Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> sum = adder.apply(n);</span><br><span class="line">        <span class="keyword">long</span> duration = (System.nanoTime() - start) / <span class="number">1_000_000</span>; <span class="comment">//毫秒</span></span><br><span class="line">        System.out.println(<span class="string">"Result: "</span>+sum);</span><br><span class="line">        <span class="keyword">if</span>(duration &lt; fastest) fastest = duration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fastest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后分别测试这三个方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"顺序流:"</span> + measureSumPerf(ParallelStreams::sequentialSum, <span class="number">10_000_000</span>)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    System.out.println(<span class="string">"循环:"</span> + measureSumPerf(ParallelStreams::iterativeSum, <span class="number">10_000_000</span>)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    System.out.println(<span class="string">"并行流:"</span> + measureSumPerf(ParallelStreams::parallelSum, <span class="number">10_000_000</span>)+<span class="string">" 毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果出乎我们的预料：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顺序流:173 毫秒</span><br><span class="line">循环:4 毫秒</span><br><span class="line">并行流:697 毫秒</span><br></pre></td></tr></table></figure>

<p>为什么会这样？</p>
<ul>
<li><code>iterate</code>生成的是<code>Stream&lt;Long&gt;</code>对象，需要拆箱才能求和；</li>
<li><code>iterate</code>很难分割成独立的小块，因为每次应用这个函数都需要前一次应用的结果，也就是说它其实是顺序执行的。这样反而在并行时增加了分配线程的开销。</li>
</ul>
<p>这里我们使用<code>LongStream.rangeClosed</code>方法来优化，它的特点有：</p>
<ul>
<li><code>LongStream.rangeClosed</code>直接产生原始类型的<code>long</code>数字，没有拆箱与装箱的开销。</li>
<li><code>LongStream.rangeClosed</code>产生一个数字范围，很容易拆分成多个小块。</li>
</ul>
<p>我们再用<code>LongStream.rangeClosed</code>写出顺序和并行计算的版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parallelRangedSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LongStream.rangeClosed(<span class="number">1</span>, n)</span><br><span class="line">            .parallel()</span><br><span class="line">            .reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">measureSumPerf</span><span class="params">(Function&lt;Long, Long&gt; adder, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> fastest = Long.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        <span class="keyword">long</span> sum = adder.apply(n);</span><br><span class="line">        <span class="keyword">long</span> duration = (System.nanoTime() - start) / <span class="number">1_000_000</span>; <span class="comment">//秒</span></span><br><span class="line">        System.out.println(<span class="string">"Result: "</span>+sum);</span><br><span class="line">        <span class="keyword">if</span>(duration &lt; fastest) fastest = duration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fastest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"顺序Range流:"</span> + measureSumPerf(ParallelStreams::rangedSum, <span class="number">10_000_000</span>)+<span class="string">" 毫秒"</span>);</span><br><span class="line">System.out.println(<span class="string">"并行Range流:"</span> + measureSumPerf(ParallelStreams::parallelRangedSum, <span class="number">10_000_000</span>)+<span class="string">" 毫秒"</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顺序Range流:7 毫秒</span><br><span class="line">并行Range流:3 毫秒</span><br></pre></td></tr></table></figure>
<p>这个速度就快多了，但是我们要记住，使用并行时，在多个内核直接移动数据的代价也比较大，因此，要保证在内核中并行执行工作的时间比在内核之间传输数据的时间要长才比较划算。</p>
<p>现在我们来总结一下如何高效使用并行流：</p>
<ul>
<li>如果用循环还是顺序流或者是并行流，像我们上面那样测试一下；</li>
<li>注意装箱，尽量使用<code>IntStream</code>, <code>LongStream</code>，和<code>DoubleStream</code>来避免装箱拆箱;</li>
<li>有些操作在并行流上性能很差，比如<code>limit</code>,<code>findFirst</code>等依赖顺序的操作。<code>unordered</code>方法可以把有序流转为无序流，使用<code>findAny</code>等好很多，在无序流上用<code>limit</code>也好很多;</li>
<li>计算流水线操作总成本，处理单个元素用时越多，并行就越划算；</li>
<li>对于较小的数据量，用并行不一定是好事儿；</li>
<li>数据结果是否易于分解，比如<code>ArrayList</code>比<code>LinkedList</code>易于分解，<code>range</code>创建的原始流也易于分解；</li>
<li>终端操作中的合并大家是否很大，大了也不划算。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven项目管理</title>
    <url>/2016/06/21/Java-Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="maven快速入门"><a href="#maven快速入门" class="headerlink" title="maven快速入门"></a>maven快速入门</h2><p>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p>
<h3 id="maven安装配置"><a href="#maven安装配置" class="headerlink" title="maven安装配置"></a>maven安装配置</h3><p>下载好maven后，需要配置环境变量。</p>
<ol>
<li>设置<code>JAVA_HOME</code>：<code>D:\program files\Java\jdk1.8.0_91</code>, path添加<code>%JAVA_HOME%\bin</code></li>
<li>新建<code>M2_HOME</code>,指向maven安装目录：<code>D:\app\apache-maven-3.3.9</code></li>
<li>修改path，添加<code>%M2_HOME%\bin</code></li>
<li>在命令行中输入<code>mvn -v</code>看看是否输出正确。</li>
</ol>
<h3 id="maven-helloworld案例"><a href="#maven-helloworld案例" class="headerlink" title="maven helloworld案例"></a>maven helloworld案例</h3><p>maven目录结构结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">    -main</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    -test</span><br><span class="line">        -java</span><br><span class="line">            -package</span><br><span class="line">    -resources</span><br></pre></td></tr></table></figure>

<p>按照上面的目录结构创建目录，package目录先不要创建package。</p>
<p>分别新建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lx.maven.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Helo world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lx.maven.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(<span class="string">"Hello world!"</span>, <span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是分别新建包。</p>
<p>然后需要新建pom.xml，保存在项目根目录下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>modelVersion</code>:固定，不管</li>
<li><code>groupId</code> 项目的包名</li>
<li><code>artifactId</code> 模块名</li>
<li><code>version</code> 版本，SNAPSHOT快照版本</li>
</ul>
<p>编译：<code>mvn compile</code><br>运行测试用例：<code>mvn test</code></p>
<p>运行后我们看到项目更目录下创建了target文件夹，这个文件夹下面又有几个子文件夹，分别是：</p>
<ul>
<li>classes 生成的类文件字节码</li>
<li>surefire-reports 测试报告</li>
</ul>
<p>然后运行<code>mvn package</code>进行打包。打好的包在target根目录下。</p>
<h2 id="Maven核心知识"><a href="#Maven核心知识" class="headerlink" title="Maven核心知识"></a>Maven核心知识</h2><h3 id="常用的构建命令"><a href="#常用的构建命令" class="headerlink" title="常用的构建命令"></a>常用的构建命令</h3><p>之前我们已经学习了以下命令：</p>
<ul>
<li><code>mvn -v</code>:查看maven版本</li>
<li><code>mvn compile</code>: 编译</li>
<li><code>mvn test</code>: 测试</li>
<li><code>mvn package</code>:打包</li>
</ul>
<p>本节主要学习以下两个命令：</p>
<ul>
<li><code>mvn clean</code>: 删除target</li>
<li><code>mvn install</code>: 安装jar包到本地仓库中</li>
</ul>
<p>我们新建一个项目<code>maven02</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lx.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lx.maven.model.HelloWorld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Speak</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloWorld().sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lx.maven02.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeakTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testsayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(<span class="string">"Hello world!"</span>, <span class="keyword">new</span> Speak().sayHi());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx.maven02<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven02-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时运行<code>mvn compile</code>会报错，表示找不到对应的<code>lx.maven.model</code>包。之所以会这样是因为我们需要讲<code>maven01</code>的项目运行<code>mvn install</code>先安装到本地仓库，然后在<code>maven02</code>项目中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动建立目录骨架"><a href="#自动建立目录骨架" class="headerlink" title="自动建立目录骨架"></a>自动建立目录骨架</h3><p>之前一直手动创建很麻烦，maven提供了archetype插件，用于创建符合maven规定的目录骨架。</p>
<p>我们先创建一个项目目录<code>maven03</code>，然后在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate</span><br></pre></td></tr></table></figure>

<p>然后会让我们选择<code>archetype</code>版本，选择最大的就好了，然后要求我们输入<code>groupId</code>，我们输入<code>lx.maven03</code>，<code>artifactId</code>我们输入<code>maven03-service</code>，<code>version</code>我们输入<code>1.0-SNAPSHOT</code>.然后会要求我们输入包名，不过会根据你之前输入的<code>groupId</code>自动提供一个，我们直接回车就可以了。最后会让我们确认信息，没问题就回车。</p>
<p>还有一种方法是一次性设置所有参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId&#x3D;lx.maven03 -DartifactId&#x3D;maven04-demo -Dversion&#x3D;1.0SNAPSHOT -Dpackage&#x3D;lx.maven03.demo</span><br></pre></td></tr></table></figure>

<h3 id="maven中的坐标和仓库"><a href="#maven中的坐标和仓库" class="headerlink" title="maven中的坐标和仓库"></a>maven中的坐标和仓库</h3><p>坐标：构件的唯一标识。<code>groupId</code>,<code>artifactId</code>,<code>version</code>构成了坐标的基本要素。</p>
<p>仓库：管理项目依赖，分为两种：</p>
<ul>
<li>本地仓库</li>
<li>远程仓库：如果本地仓库找不到，会到maven的全球仓库去找。</li>
</ul>
<p>镜像仓库：打开maven/conf/settings.xml文件，在<code>mirrors</code>节添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.oschina.net<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>oschina maven mirror<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>mirrorOf</code>表示为哪个仓库指定镜像，默认是<code>central</code>，也可以使用<code>*</code>通配符。</p>
<p>现在看如何修改仓库位置：<br>默认情况下，仓库是在用户文件夹下的.m2文件中，我们可以修改settings.xml的<code>settings</code>下的位置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/mavenrepo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后将<code>settings.xml</code>文件复制到<code>d:/mavenrepo</code>下，这样以后要是修改maven版本就不用再次修改settings.xml.</p>
<h3 id="maven的声明周期和插件"><a href="#maven的声明周期和插件" class="headerlink" title="maven的声明周期和插件"></a>maven的声明周期和插件</h3><p>完整的项目构建过程包括：<br>清理、编译、测试、打包、集成测试、验证、部署<br>clean\compile\test\package\install<br>maven声明周期：</p>
<ul>
<li>clean 清理项目</li>
<li>default 构建项目</li>
<li>site 生成项目站点</li>
</ul>
<p>对于clean清理项目</p>
<ul>
<li>pre-clean 执行清理前的工作</li>
<li>clean 清理上一次构建生成的所有文件</li>
<li>post-clean 执行清理后的文件</li>
</ul>
<p>default构建项目（最核心）<br>compile test package install都属于default阶段</p>
<p>site生成项目站点</p>
<ul>
<li>pre-site</li>
<li>site</li>
<li>post-site</li>
<li>site-deploy</li>
</ul>
<p>现在加入我们要添加插件source，让打包时同时打包源码。我们修改pom.xml，加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>plugin的phase表明阶段</li>
<li>goal表示目标</li>
</ul>
<p>具体请看apache官方文档。</p>
<p>然后运行<code>mvn clean package</code>看到会生成源码的jar包。</p>
<h3 id="pom-xml常用元素介绍"><a href="#pom-xml常用元素介绍" class="headerlink" title="pom.xml常用元素介绍"></a>pom.xml常用元素介绍</h3><p>pom.xml用于项目描述、组织管理、依赖管理和项目信息的管理。下面我们来介绍一下常用元素。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定了当前的POM版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主项目标识：反写公司网址+项目名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目名+模块名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前版本项目本：大版本号.分支版本号.小版本号;SNAPSHOT:快照，ALPHA:内部测试,BETA:公测,RELEASE:稳定版,GA:正式发布--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式，默认为jar .war,zip,pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目描述名，产生文档时使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目描述--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发人员信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--许可证信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组织信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 只在一个范围内使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置依赖是否可选，默认为false,默认是继承的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除依赖传递列表。如果A依赖B，B依赖C，A就传递依赖C --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖的管理.不会实际被引入，主要用于定义在父模块，用于子模块继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在子模块中对父模块POM的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>之前已经见过junit依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们平时在开发时，如果要使用某个框架就需要将该框架的jar包添加到项目的classpath中，maven为我们提供了3种classpath，分别是：</p>
<ul>
<li>编译</li>
<li>测试</li>
<li>运行</li>
</ul>
<p>所以<code>scope</code>就是用来指定依赖范围的。maven官方文档上说<code>scope</code>有六种取值：</p>
<ul>
<li>compile:编译，默认的范围，编译测试运行都有效</li>
<li>provided:测试和编译时有效，运行时不会用</li>
<li>runtime:测试和运行时有效</li>
<li>test:测试，只在测试时有效</li>
<li>system:测试和编译时有效,可移植性差，与本机想关联</li>
<li>import：导入的范围，只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置</li>
</ul>
<h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>A依赖B，B依赖C，则就可以说A间接依赖C。</p>
<p>首先，我们在B中引入对C的依赖(C应该<code>mvn compile install</code>).</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只在一个范围内使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置依赖是否可选，默认为false,默认是继承的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排除依赖传递列表。如果A依赖B，B依赖C，A就传递依赖C --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有时我们需要指定JDK默认版本，在settings.xml中的<code>profile</code>配置版本。</p>
<h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><ol>
<li>短路优先<br><code>A-&gt;B-C-X(jar)</code>和<code>A-&gt;D-&gt;X(jar)</code>，则A优先引用D所指向的X。</li>
<li>先声明先优先<br>如果路径长度相同，则谁先声明，先解析谁。</li>
</ol>
<h3 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h3><p>先来说聚合。</p>
<p>如果有多个项目，A\B\C，我们想要把他们聚合起来，一起安装，我们新建一个项目D，修改它的pom.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../A<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../B<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../C<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后运行<code>mvn clean install</code>就能直接安装A/B/C了。</p>
<p>再来说继承。<br>在父pom中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定类型为POM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在子POM中使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用maven构建web项目"><a href="#使用maven构建web项目" class="headerlink" title="使用maven构建web项目"></a>使用maven构建web项目</h2><p>我们使用maven创建一个web项目，然后发布到jetty中。</p>
<p>使用IDEA创建一个maven项目，选择<code>maven-archetype-webapp</code>类型，GroupId输入<code>lx.webdemo</code>，artifectId输入<code>webdemo</code>。<br>在<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a> 中添加<br>我们打开pom.xml，添加Java Servlet API依赖，注意，<code>servlet</code>的f范围是<code>provided</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx.webdemo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只在编译时和测试时运行--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后添加<code>Jetty maven plugin</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx.webdemo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>webdemo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>webdemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.0.M0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后运行<code>mvn clean package</code>即可。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Spark进行Java Web开发</title>
    <url>/2016/05/17/Java-SparkWeb/</url>
    <content><![CDATA[<h2 id="1-搭建Spark项目"><a href="#1-搭建Spark项目" class="headerlink" title="1.搭建Spark项目"></a>1.搭建Spark项目</h2><p>使用Idea创建Gradle项目，包名是：<code>io.github.liulixiang.course</code>,Artifactid是<code>course-ideas</code>。<br>在builder.gradle里添加spark依赖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &quot;com.sparkjava:spark-core:2.5&quot;</span><br><span class="line">compile &quot;org.slf4j:slf4j-simple:1.7.21&quot;</span><br></pre></td></tr></table></figure>

<p>然后创建<code>io.github.liulixiang.course.Main</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> spark.Spark.get;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        get(<span class="string">"/hello"</span>, (req, res) -&gt; <span class="string">"Hello World"</span>);</span><br><span class="line">        get(<span class="string">"/"</span>, (req, res) -&gt; <span class="string">"欢迎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，访问<a href="http://localhost:4567" target="_blank" rel="noopener">http://localhost:4567</a> 就能看到返回的页面了。</p>
<h2 id="2-返回响应"><a href="#2-返回响应" class="headerlink" title="2.返回响应"></a>2.返回响应</h2><p>Spark支持多种模板引擎，我们使用Handlebars。</p>
<p>添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &quot;com.sparkjava:spark-template-handlebars:2.3&quot;</span><br></pre></td></tr></table></figure>

<p>为了让IDEA支持Handlebars，我们在plugin上搜索Handlebars。关于handlebars的使用，可以参考<a href="https://github.com/perwendel/spark-template-engines/tree/master/spark-template-handlebars" target="_blank" rel="noopener">https://github.com/perwendel/spark-template-engines/tree/master/spark-template-handlebars</a></p>
<p>现在在resources下面新建templates文件夹。然后在文件夹内新建<code>index.hbs</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>同学们好!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>同学们好!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改Main:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">get(<span class="string">"/"</span>, (req, res) -&gt; <span class="keyword">new</span> ModelAndView(<span class="keyword">null</span>, <span class="string">"index.hbs"</span>), <span class="keyword">new</span> HandlebarsTemplateEngine());</span><br></pre></td></tr></table></figure>

<p><code>ModelAndView</code>表示第一个参数是Model，第二个参数是View。</p>
<h2 id="3-接受请求"><a href="#3-接受请求" class="headerlink" title="3.接受请求"></a>3.接受请求</h2><p>要获取提交的数据，使用<code>req.queryParams</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">post(<span class="string">"/sign-in"</span>, (req, res) -&gt; &#123;</span><br><span class="line">    Map&lt;String, String&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    model.put(<span class="string">"username"</span>, req.queryParams(<span class="string">"username"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(model, <span class="string">"sign-in.hbs"</span>);</span><br><span class="line">&#125;, <span class="keyword">new</span> HandlebarsTemplateEngine());</span><br></pre></td></tr></table></figure>

<p>添加<code>sign-in.hbs</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好, &#123;&#123;username&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-Cookies"><a href="#4-Cookies" class="headerlink" title="4.Cookies"></a>4.Cookies</h2><p><strong>写入cookie：</strong><br>cookie使用res设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String username = req.queryParams(<span class="string">"username"</span>);</span><br><span class="line">res.cookie(<span class="string">"username"</span>, username);</span><br></pre></td></tr></table></figure>

<p><strong>读取cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">get(<span class="string">"/"</span>, (req, res) -&gt; &#123;</span><br><span class="line">    Map&lt;String, String&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    model.put(<span class="string">"username"</span>, req.cookie(<span class="string">"username"</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(model, <span class="string">"index.hbs"</span>);</span><br><span class="line">&#125;, <span class="keyword">new</span> HandlebarsTemplateEngine());</span><br></pre></td></tr></table></figure>

<h2 id="5-创建Model"><a href="#5-创建Model" class="headerlink" title="5.创建Model"></a>5.创建Model</h2><h2 id="7-Template复用和静态资源处理"><a href="#7-Template复用和静态资源处理" class="headerlink" title="7.Template复用和静态资源处理"></a>7.Template复用和静态资源处理</h2><h2 id="8-添加并遍历List"><a href="#8-添加并遍历List" class="headerlink" title="8. 添加并遍历List"></a>8. 添加并遍历List</h2><h2 id="9-重定向"><a href="#9-重定向" class="headerlink" title="9. 重定向"></a>9. 重定向</h2><h2 id="10-使用Filter和请求属性"><a href="#10-使用Filter和请求属性" class="headerlink" title="10. 使用Filter和请求属性"></a>10. 使用Filter和请求属性</h2><h2 id="11-存取指定项目"><a href="#11-存取指定项目" class="headerlink" title="11. 存取指定项目"></a>11. 存取指定项目</h2><h2 id="12-细节"><a href="#12-细节" class="headerlink" title="12. 细节"></a>12. 细节</h2><h2 id="13-消息"><a href="#13-消息" class="headerlink" title="13. 消息"></a>13. 消息</h2><h2 id="14-创建flash-message"><a href="#14-创建flash-message" class="headerlink" title="14. 创建flash message"></a>14. 创建flash message</h2><h2 id="15-请求处理"><a href="#15-请求处理" class="headerlink" title="15. 请求处理"></a>15. 请求处理</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 学习笔记</title>
    <url>/2017/09/09/Java-Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>示例代码地址：<a href="https://github.com/liulixiang1988/javademo/tree/master/spring/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5spring-boot" target="_blank" rel="noopener">这里</a></p>
<h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><h3 id="1-1-基本配置"><a href="#1-1-基本配置" class="headerlink" title="1.1 基本配置"></a>1.1 基本配置</h3><h4 id="1-1-1-POM"><a href="#1-1-1-POM" class="headerlink" title="1.1.1 POM"></a>1.1.1 POM</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>lx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>deep-into-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>deep-into-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>深入实践spring boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- 从仓库中查找parent --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-1-2-application-yml"><a href="#1-1-2-application-yml" class="headerlink" title="1.1.2 application.yml"></a>1.1.2 application.yml</h4><p>将端口设置为8080（默认就是的，并且设置tomcat的字符集为UTF-8</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure>

<p>spring boot更多预置参数请参考：</p>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a></p>
<h3 id="1-2-应用配置"><a href="#1-2-应用配置" class="headerlink" title="1.2 应用配置"></a>1.2 应用配置</h3><h2 id="2-Spring-Boot中使用数据库"><a href="#2-Spring-Boot中使用数据库" class="headerlink" title="2. Spring Boot中使用数据库"></a>2. Spring Boot中使用数据库</h2><h3 id="2-1-MySQL与JPA"><a href="#2-1-MySQL与JPA" class="headerlink" title="2.1 MySQL与JPA"></a>2.1 MySQL与JPA</h3><p>JPA(Java Persistence API)是Java EE的持久化标准规范。Spring Boot可以使用JPA实现对数据库操作。JPA将POJO(Plain Ordinary Java Object)通过ORM(Object-Relational Mapping)持久化到数据库中。</p>
<p>JPA官方介绍：<a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html" target="_blank" rel="noopener">http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html</a></p>
<p>JPA 教程：<a href="https://www.tutorialspoint.com/jpa/index.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/jpa/index.htm</a></p>
<p>JPA和MySQL依赖配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-MyBatis与Spring-Boot集成"><a href="#2-2-MyBatis与Spring-Boot集成" class="headerlink" title="2.2 MyBatis与Spring Boot集成"></a>2.2 MyBatis与Spring Boot集成</h3><h3 id="2-3-Redis"><a href="#2-3-Redis" class="headerlink" title="2.3 Redis"></a>2.3 Redis</h3><h3 id="2-4-MongoDB"><a href="#2-4-MongoDB" class="headerlink" title="2.4 MongoDB"></a>2.4 MongoDB</h3><h3 id="2-5-Neo4j"><a href="#2-5-Neo4j" class="headerlink" title="2.5 Neo4j"></a>2.5 Neo4j</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin学习笔记</title>
    <url>/2016/03/01/kotlin-kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0-Kotlin简介"><a href="#0-Kotlin简介" class="headerlink" title="0. Kotlin简介"></a>0. Kotlin简介</h2><h3 id="0-1-简介"><a href="#0-1-简介" class="headerlink" title="0.1 简介"></a>0.1 简介</h3><h3 id="0-2-Kotlin安装"><a href="#0-2-Kotlin安装" class="headerlink" title="0.2 Kotlin安装"></a>0.2 Kotlin安装</h3><h3 id="0-3-Hello-Kotlin"><a href="#0-3-Hello-Kotlin" class="headerlink" title="0.3 Hello, Kotlin"></a>0.3 Hello, Kotlin</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    println(<span class="string">"Hello, Kotlin!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-类型和变量"><a href="#1-类型和变量" class="headerlink" title="1. 类型和变量"></a>1. 类型和变量</h2><h3 id="1-1-变量声明-Variable-Declarations"><a href="#1-1-变量声明-Variable-Declarations" class="headerlink" title="1.1 变量声明(Variable Declarations)"></a>1.1 变量声明(Variable Declarations)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    val_declarations()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">val_declarations</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//val声明的变量不能更改</span></span><br><span class="line">    <span class="keyword">val</span> a:<span class="built_in">Int</span> = <span class="number">64</span></span><br><span class="line">    <span class="keyword">val</span> b:<span class="built_in">Long</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这种事不行的,必须每个占一行:</span></span><br><span class="line">    <span class="comment">//val c = 3, d = 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> c:<span class="built_in">Float</span> = <span class="number">3.4f</span> <span class="comment">//后面跟'F'或者'f'</span></span><br><span class="line">    <span class="keyword">val</span> d:<span class="built_in">Double</span> = <span class="number">3.4</span></span><br><span class="line">    <span class="keyword">val</span> e:<span class="built_in">Double</span> = <span class="number">12.3e5</span></span><br><span class="line">    <span class="comment">//不赋值的val声明</span></span><br><span class="line">    <span class="keyword">val</span> f: <span class="built_in">Int</span></span><br><span class="line">    f = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> g:StringBuffer = StringBuffer(<span class="string">"test"</span>)</span><br><span class="line">    g.replace(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"T"</span>)</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    println(<span class="string">"<span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span> <span class="variable">$e</span> <span class="variable">$f</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$g</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可更改的变量</span></span><br><span class="line">    <span class="keyword">var</span> h:<span class="built_in">Int</span> = <span class="number">123</span></span><br><span class="line">    h = <span class="number">45</span></span><br><span class="line">    println(<span class="string">"<span class="variable">$h</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-类型推导-Type-Deduction"><a href="#1-2-类型推导-Type-Deduction" class="headerlink" title="1.2 类型推导(Type Deduction)"></a>1.2 类型推导(Type Deduction)</h3><p>类型能够根据赋值进行推到</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    val_declarations()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">val_declarations</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//val声明的变量不能更改</span></span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">64</span></span><br><span class="line">    <span class="keyword">val</span> b= <span class="number">123</span></span><br><span class="line">    <span class="keyword">val</span> c = <span class="number">3.4f</span> <span class="comment">//后面跟'F'或者'f'</span></span><br><span class="line">    <span class="keyword">val</span> d = <span class="number">3.4</span></span><br><span class="line">    <span class="keyword">val</span> e = <span class="number">12.3e5</span></span><br><span class="line">    <span class="comment">//不赋值的val声明，变量类型不能省略</span></span><br><span class="line">    <span class="keyword">val</span> f: <span class="built_in">Int</span></span><br><span class="line">    f = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> g = StringBuffer(<span class="string">"test"</span>)</span><br><span class="line">    g.replace(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"T"</span>)</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    println(<span class="string">"<span class="variable">$a</span> <span class="variable">$b</span> <span class="variable">$c</span> <span class="variable">$d</span> <span class="variable">$e</span> <span class="variable">$f</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$g</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可更改的变量</span></span><br><span class="line">    <span class="keyword">var</span> h = <span class="number">123</span></span><br><span class="line">    h = <span class="number">45</span></span><br><span class="line">    println(<span class="string">"<span class="variable">$h</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Ranges"><a href="#1-3-Ranges" class="headerlink" title="1.3 Ranges"></a>1.3 Ranges</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by liulixiang on 16/2/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    ranges()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ranges</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> a: IntRange = <span class="number">1</span>..<span class="number">10</span> <span class="comment">//闭区间,而不是左闭右开. 1, 2, ..., 10(含10)</span></span><br><span class="line">    <span class="comment">//遍历range,使用in语法</span></span><br><span class="line">    <span class="keyword">for</span> (x <span class="keyword">in</span> a) println(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了上面的声明方式,还有以下声明方式:</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="number">1</span>.rangeTo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====逆序====="</span>)</span><br><span class="line">    <span class="keyword">val</span> c:IntProgression = b.reversed()</span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> c) println(x)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====range求和====="</span>)</span><br><span class="line">    println(<span class="string">"sum of ints <span class="variable">$c</span> = <span class="subst">$&#123;c.sum()&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====递减的range====="</span>)</span><br><span class="line">    <span class="keyword">val</span> d = <span class="number">10</span>.downTo(<span class="number">1</span>) <span class="comment">//不能用10..1</span></span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> d) println(x)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====省略括号======"</span>)</span><br><span class="line">    <span class="keyword">val</span> e = <span class="number">10</span> downTo <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> e) println(x)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====根据变量声明range======"</span>)</span><br><span class="line">    <span class="keyword">val</span> m = <span class="number">8</span></span><br><span class="line">    <span class="keyword">val</span> n = -<span class="number">3</span></span><br><span class="line">    <span class="keyword">val</span> f = IntRange(Math.min(m, n), Math.max(m, n))</span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> f) println(x)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=====指定步长======"</span>)</span><br><span class="line">    <span class="keyword">val</span> g = <span class="number">100</span> downTo <span class="number">1</span> step <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> g) print(<span class="string">"<span class="variable">$x</span>\t"</span>)</span><br><span class="line">    println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-数组"><a href="#1-4-数组" class="headerlink" title="1.4 数组"></a>1.4 数组</h3><h3 id="1-5-Strings-and-String-Interpolation"><a href="#1-5-Strings-and-String-Interpolation" class="headerlink" title="1.5 Strings and String Interpolation"></a>1.5 Strings and String Interpolation</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    characters_and_strings()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">characters_and_strings</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//字符</span></span><br><span class="line">    println(<span class="string">"=====字符====="</span>)</span><br><span class="line">    <span class="keyword">val</span> a:<span class="built_in">Char</span> = <span class="string">'\u0041'</span></span><br><span class="line">    <span class="keyword">if</span> (a.toInt() == <span class="number">65</span>)&#123;</span><br><span class="line">        println(<span class="string">"match"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串</span></span><br><span class="line">    println(<span class="string">"=====字符====="</span>)</span><br><span class="line">    <span class="keyword">val</span> b:String = <span class="string">"Hello"</span></span><br><span class="line">    println(b)</span><br><span class="line">    println(<span class="string">"取字符串中的字符:<span class="subst">$&#123;b[<span class="number">0</span>]&#125;</span>"</span>)</span><br><span class="line">    println(<span class="string">"遍历字符串中的字符:"</span>)</span><br><span class="line">    <span class="keyword">for</span>(letter <span class="keyword">in</span> b) print(<span class="string">"<span class="variable">$letter</span>\t"</span>)</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原始字符串</span></span><br><span class="line">    println(<span class="string">"=====原始字符串====="</span>)</span><br><span class="line">    <span class="keyword">val</span> raw = <span class="string">"""Hello</span></span><br><span class="line"><span class="string">"test"</span></span><br><span class="line"><span class="string">world"""</span></span><br><span class="line"><span class="string">    println(raw)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //字符串模板</span></span><br><span class="line"><span class="string">    println("=====字符串模板=====")</span></span><br><span class="line"><span class="string">    val c = 123.0</span></span><br><span class="line"><span class="string">    val d = "c = <span class="variable">$c</span>, price = <span class="subst">$&#123;<span class="string">'$'</span>&#125;</span><span class="subst">$&#123;c/<span class="number">10</span>&#125;</span>"</span></span><br><span class="line"><span class="string">    println(d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //range</span></span><br><span class="line"><span class="string">    println("=====range=====")</span></span><br><span class="line"><span class="string">    val e = "<span class="subst">$&#123;(<span class="number">10</span> downTo <span class="number">1</span>).toList().map &#123; it.toString().toList() &#125;</span>.joinToString()&#125;"</span></span><br><span class="line"><span class="string">    println(e)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-控制流"><a href="#2-控制流" class="headerlink" title="2. 控制流"></a>2. 控制流</h2><h3 id="2-1-Nullability"><a href="#2-1-Nullability" class="headerlink" title="2.1 Nullability"></a>2.1 Nullability</h3><p>在kotlin中<code>var x:String = null</code>是不允许的，因为它要求<code>x</code>不能为空。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面的<code>args</code>表示的是由不能为空的<code>String</code>组成的不能为空的<code>Array</code>。</p>
<p>如果为null该怎么办，在类型名后添加<code>?</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    nullability()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nullability</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y:String? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//下面的是错误的</span></span><br><span class="line">    <span class="comment">//println(y.length)</span></span><br><span class="line">    <span class="keyword">var</span> len: <span class="built_in">Int</span>? = y?.length</span><br><span class="line">    println(len)</span><br><span class="line">    <span class="comment">//或者这样返回-1，其中?:类似else，也就是说如果y是Null，就返回-1</span></span><br><span class="line">    <span class="keyword">var</span> len2:<span class="built_in">Int</span> = y?.length ?: -<span class="number">1</span></span><br><span class="line">    println(len2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：1.系统库其实自动添加了null 检查，比如 System.out.println，其实是System?.out?.println</span></span><br><span class="line">    <span class="comment">//关闭null检查：y!!.length 如果此时y为null会抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-If-语句"><a href="#2-2-If-语句" class="headerlink" title="2.2 If 语句"></a>2.2 If 语句</h3><p>第一种是 <code>? :</code>形式<br>if语句直接返回值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    if_statement()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">if_statement</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//? :</span></span><br><span class="line">    <span class="keyword">val</span> temp = <span class="number">20</span></span><br><span class="line">    <span class="keyword">val</span> feel = <span class="keyword">if</span> (temp &lt; <span class="number">10</span>)</span><br><span class="line">        <span class="string">"cold"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; <span class="number">20</span>)</span><br><span class="line">        <span class="string">"warm"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">"ok"</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"it feels <span class="variable">$feel</span> outside"</span>)</span><br><span class="line">    println(<span class="string">"it is <span class="subst">$&#123;if(temp &gt; <span class="number">20</span>) <span class="string">"warm"</span> else <span class="string">"ok"</span>&#125;</span> today"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-根据循环自动类型转换-Flow-Based-Typing"><a href="#2-3-根据循环自动类型转换-Flow-Based-Typing" class="headerlink" title="2.3 根据循环自动类型转换(Flow-Based Typing)"></a>2.3 根据循环自动类型转换(Flow-Based Typing)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">flow_based_typing</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s:String? = <span class="string">"hjkh"</span></span><br><span class="line">    <span class="keyword">if</span>(s!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//不需要s?.length</span></span><br><span class="line">        println(s.length)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x: Cloneable = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">is</span> IntArray)&#123;</span><br><span class="line">        <span class="comment">//不需要(x as IntArray).size</span></span><br><span class="line">        println(x.size)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-for遍历-for-Iteration"><a href="#2-4-for遍历-for-Iteration" class="headerlink" title="2.4 for遍历(for Iteration)"></a>2.4 for遍历(for Iteration)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">for_loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//普通for循环</span></span><br><span class="line">    <span class="keyword">for</span> (a <span class="keyword">in</span> (<span class="number">10</span> downTo <span class="number">1</span>)) print(<span class="string">"<span class="variable">$a</span>\t"</span>)</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组for循环</span></span><br><span class="line">    <span class="keyword">val</span> ints = intArrayOf(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>((index, value) <span class="keyword">in</span> ints.withIndex())&#123;</span><br><span class="line">        println(<span class="string">"<span class="variable">$index</span>:\t<span class="variable">$value</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字典for循环</span></span><br><span class="line">    <span class="keyword">val</span> capitals = mapOf(<span class="string">"Paris"</span> to <span class="string">"France"</span>, <span class="string">"London"</span> to <span class="string">"UK"</span>)</span><br><span class="line">    <span class="keyword">for</span> ((capital, country) <span class="keyword">in</span> capitals)&#123;</span><br><span class="line">        println(<span class="string">"<span class="subst">$&#123;country&#125;</span>'s capital is <span class="variable">$capital</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-when表达式"><a href="#2-5-when表达式" class="headerlink" title="2.5 when表达式"></a>2.5 when表达式</h3><h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><h3 id="3-1-顶层函数-Top-Level-Function"><a href="#3-1-顶层函数-Top-Level-Function" class="headerlink" title="3.1 顶层函数(Top-Level Function)"></a>3.1 顶层函数(Top-Level Function)</h3><p>谈论顶层函数之前需要先讨论package，如果没有指定package，就会放到默认包中。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSamples.Functions</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">say_hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> KotlinSamples.Functions.*</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    say_hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-返回类型和参数-Return-Types-and-Arguments"><a href="#3-2-返回类型和参数-Return-Types-and-Arguments" class="headerlink" title="3.2 返回类型和参数(Return Types and Arguments)"></a>3.2 返回类型和参数(Return Types and Arguments)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"4*3 is <span class="subst">$&#123;triple(<span class="number">4</span>)&#125;</span>"</span>)</span><br><span class="line">    println(<span class="string">"4*4 is <span class="subst">$&#123;sqr(<span class="number">4</span>)&#125;</span>"</span>)</span><br><span class="line">    println(<span class="string">"pay <span class="subst">$&#123;calculate_wages(<span class="number">160</span>)&#125;</span>"</span>)</span><br><span class="line">    <span class="comment">//命名参数</span></span><br><span class="line">    println(<span class="string">"pay <span class="subst">$&#123;calculate_wages(hourly_rate = <span class="number">20.0</span>)&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">triple</span><span class="params">(x:<span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sqr</span><span class="params">(x:<span class="type">Int</span>)</span></span> = x * x</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calculate_wages</span><span class="params">(hours:<span class="type">Int</span> = <span class="number">160</span>, hourly_rate:<span class="type">Double</span> = <span class="number">100.0</span>)</span></span>: <span class="built_in">Double</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hours*hourly_rate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-可变长参数函数-Variable-Argument-Functions"><a href="#3-3-可变长参数函数-Variable-Argument-Functions" class="headerlink" title="3.3 可变长参数函数(Variable-Argument Functions)"></a>3.3 可变长参数函数(Variable-Argument Functions)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(<span class="string">"result is <span class="subst">$&#123;sum_up(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)&#125;</span>"</span>)</span><br><span class="line">    println(<span class="string">"result is <span class="subst">$&#123;sum_up2(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span>"</span>)</span><br><span class="line">    <span class="comment">//解包操作</span></span><br><span class="line">    <span class="keyword">val</span> stuff = intArrayOf(<span class="number">1</span>,<span class="number">2</span> ,<span class="number">3</span>)</span><br><span class="line">    println(sum_up(<span class="number">3</span>, <span class="number">5</span>, *stuff, <span class="number">1</span>, <span class="number">9</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可变长参数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum_up</span><span class="params">(<span class="keyword">vararg</span> values:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (v <span class="keyword">in</span> values)&#123;</span><br><span class="line">        result += v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式的解法</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum_up2</span><span class="params">(<span class="keyword">vararg</span> values:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> values.sum()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-内签函数-Local-a-k-a-Nested-or-Inner-Functions"><a href="#3-4-内签函数-Local-a-k-a-Nested-or-Inner-Functions" class="headerlink" title="3.4 内签函数(Local a.k.a. Nested or Inner Functions)"></a>3.4 内签函数(Local a.k.a. Nested or Inner Functions)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//解包赋值</span></span><br><span class="line">    <span class="keyword">val</span> (x1, x2) = solve_quadratic_equation(<span class="number">1.0</span>, <span class="number">10.0</span>, <span class="number">16.0</span>)</span><br><span class="line">    println(<span class="string">"x1 = <span class="variable">$x1</span>, x2 = <span class="variable">$x2</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">solve_quadratic_equation</span><span class="params">(a:<span class="type">Double</span>, b:<span class="type">Double</span>, c:<span class="type">Double</span>)</span></span>: Pair&lt;<span class="built_in">Double</span>, <span class="built_in">Double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">calculate_discriminant</span><span class="params">()</span></span>: <span class="built_in">Double</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b*b - <span class="number">4</span>*a*c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> root_disc = Math.sqrt(calculate_discriminant())</span><br><span class="line">    <span class="keyword">return</span> Pair((-b+root_disc)/(<span class="number">2</span>*a), (-b-root_disc)/(<span class="number">2</span>*a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-扩展函数和扩展属性-Extension-Functions-and-Properties"><a href="#3-5-扩展函数和扩展属性-Extension-Functions-and-Properties" class="headerlink" title="3.5 扩展函数和扩展属性(Extension Functions and Properties)"></a>3.5 扩展函数和扩展属性(Extension Functions and Properties)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    extension_functions()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩展函数</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> ArrayList<span class="type">&lt;T&gt;</span>.<span class="title">swap</span><span class="params">(index1:<span class="type">Int</span>, index2:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//this指向实例</span></span><br><span class="line">    <span class="keyword">val</span> temp = <span class="keyword">this</span>[index1]</span><br><span class="line">    <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">    <span class="keyword">this</span>[index2] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给所有的对象添加函数，用Any?</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span> == <span class="literal">null</span>) println(<span class="string">"Object is null"</span>)</span><br><span class="line">    <span class="keyword">else</span> println(<span class="string">"Object is <span class="subst">$&#123;this.toString()&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展函数</span></span><br><span class="line"><span class="keyword">val</span> String?.empty: <span class="built_in">Boolean</span></span><br><span class="line">    <span class="keyword">get</span>() = (<span class="keyword">this</span> == <span class="literal">null</span> || <span class="keyword">this</span>.length == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">extension_functions</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> mylist = arrayListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">//调用扩展函数</span></span><br><span class="line">    mylist.swap(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    println(mylist)</span><br><span class="line">    mylist.print()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> s:String? = <span class="literal">null</span></span><br><span class="line">    s.print()</span><br><span class="line">    <span class="comment">//调用扩展属性</span></span><br><span class="line">    println(s.empty)</span><br><span class="line">    println(<span class="string">""</span>.empty)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-中缀函数-Infix-Functions"><a href="#3-6-中缀函数-Infix-Functions" class="headerlink" title="3.6 中缀函数(Infix Functions)"></a>3.6 中缀函数(Infix Functions)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    infix_functions()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义中缀函数</span></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Double</span>.<span class="title">averageWith</span><span class="params">(other: <span class="type">Double</span>)</span></span>:<span class="built_in">Double</span>&#123;</span><br><span class="line">    <span class="comment">//this是左边的运算符</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> + other) / <span class="number">2.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">infix_functions</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> x = <span class="string">'z'</span> downTo <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">for</span>(a <span class="keyword">in</span> x) print(<span class="string">"<span class="variable">$a</span>\t"</span>)</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> capitals = mapOf(<span class="string">"Paris"</span> to <span class="string">"France"</span>, <span class="string">"London"</span> to <span class="string">"UK"</span>)</span><br><span class="line">    <span class="keyword">for</span>((key, value) <span class="keyword">in</span> capitals)</span><br><span class="line">        println(<span class="string">"<span class="variable">$key</span>\t<span class="variable">$value</span>"</span>)</span><br><span class="line">    println()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用中缀函数</span></span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="number">10.0</span></span><br><span class="line">    println(<span class="string">"The average of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a averageWith b&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Lambda函数"><a href="#4-Lambda函数" class="headerlink" title="4 Lambda函数"></a>4 Lambda函数</h2><h3 id="4-1-Lambda函数"><a href="#4-1-Lambda函数" class="headerlink" title="4.1 Lambda函数"></a>4.1 Lambda函数</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSamples.Lambda</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> product = &#123;x:<span class="built_in">Int</span>, y:<span class="built_in">Int</span> -&gt; x * y&#125;</span><br><span class="line">    println(<span class="string">"<span class="subst">$&#123;product(<span class="number">2</span>, <span class="number">3</span>)&#125;</span>"</span>)</span><br><span class="line">    <span class="comment">//可以把签名放在前面</span></span><br><span class="line">    <span class="keyword">val</span> product2:(<span class="built_in">Int</span>, <span class="built_in">Int</span>)-&gt;<span class="built_in">Int</span> = &#123;x, y -&gt; x* y&#125;</span><br><span class="line">    println(<span class="string">"<span class="subst">$&#123;product2(<span class="number">4</span>, <span class="number">6</span>)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//lambda作为参数</span></span><br><span class="line">    <span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> n = numbers.count &#123; it &gt; <span class="number">2</span> &#125; <span class="comment">//等价于number.count(&#123;x-&gt;x&gt;2&#125;)</span></span><br><span class="line">    println(n)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//闭包,kotlin中允许在lambda中修改外界的值</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    numbers.forEach &#123; sum += it &#125;</span><br><span class="line">    println(<span class="string">"sum of <span class="variable">$numbers</span> is <span class="variable">$sum</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-高阶函数"><a href="#4-2-高阶函数" class="headerlink" title="4.2 高阶函数"></a>4.2 高阶函数</h3><p>高阶函数是含有函数作为参数的函数，或者是返回值是函数的函数。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> numbers = listOf(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> maxvalue = max(numbers) &#123;x, y -&gt; x &lt; y&#125;</span><br><span class="line">    println(maxvalue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">max</span><span class="params">(collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;, less:(<span class="type">T</span>, <span class="type">T</span>)-&gt;<span class="type">Boolean</span>)</span></span>: T?&#123;</span><br><span class="line">    <span class="keyword">var</span> max:T? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span>(x <span class="keyword">in</span> collection)&#123;</span><br><span class="line">        <span class="keyword">if</span> (max == <span class="literal">null</span> || less(max, x))</span><br><span class="line">            max = x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-带接受者的函数类型"><a href="#4-3-带接受者的函数类型" class="headerlink" title="4.3 带接受者的函数类型"></a>4.3 带接受者的函数类型</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">//Function type with receiver</span></span><br><span class="line">    <span class="comment">//类似扩展函数,但是只能作用于局部,而且这个函数是个lambda表达式,被存储在变量中</span></span><br><span class="line">    fun_type_with_recevier()</span><br><span class="line">    <span class="comment">//由于increaseBy是局部变量,因此下面的代码无法执行</span></span><br><span class="line">    <span class="comment">//var y = 2</span></span><br><span class="line">    <span class="comment">//y.increaseBy(10)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun_type_with_recevier</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明形式类似扩展函数,但是返回到变量中</span></span><br><span class="line">    <span class="keyword">val</span> increaseBy = <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="params">(value:<span class="type">Int</span>)</span></span> = <span class="keyword">this</span> + value</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">    println(<span class="string">"<span class="variable">$x</span> + 3 = <span class="subst">$&#123;x.increaseBy(<span class="number">3</span>)&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4-Functors"><a href="#4-4-Functors" class="headerlink" title="4.4 Functors"></a>4.4 Functors</h3><p>不知道为什么，一直报错：Error:(10, 15) Kotlin: operator modifier is required on ‘invoke’ in ‘Average’</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Average</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(<span class="keyword">vararg</span> values: <span class="type">Double</span>)</span></span>:<span class="built_in">Double</span>&#123;</span><br><span class="line">        <span class="keyword">val</span> sum = values.sum()</span><br><span class="line">        <span class="keyword">return</span> sum/values.size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a = Average()</span><br><span class="line">    <span class="comment">//functor</span></span><br><span class="line">    <span class="keyword">val</span> avg = a(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">    println(avg)</span><br><span class="line"><span class="comment">//    fun String.invoke():String&#123;</span></span><br><span class="line"><span class="comment">//        return "("+this+")"</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    val str = "hello"</span></span><br><span class="line"><span class="comment">//    println("$&#123;str()&#125;")</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-类"><a href="#5-类" class="headerlink" title="5 类"></a>5 类</h2><h3 id="5-1-属性-property"><a href="#5-1-属性-property" class="headerlink" title="5.1 属性(property)"></a>5.1 属性(property)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> name:String <span class="comment">//如果不初始化,需要加lateinit</span></span><br><span class="line">    <span class="keyword">var</span> age:<span class="built_in">Int</span> = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> canVote:<span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = age &gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">var</span> ssn = <span class="string">"00000"</span></span><br><span class="line">        <span class="keyword">get</span>() = field</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            println(<span class="string">"<span class="variable">$name</span>'s ssn is changed to <span class="variable">$value</span>"</span>)</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> me = Person()</span><br><span class="line">    me.name = <span class="string">"lixiang"</span></span><br><span class="line">    me.age = <span class="number">28</span></span><br><span class="line">    println(<span class="string">"<span class="subst">$&#123;me.name&#125;</span> can <span class="subst">$&#123;if (!me.canVote) <span class="string">"not "</span> else <span class="string">""</span>&#125;</span>vote"</span>)</span><br><span class="line">    me.ssn = <span class="string">"123456"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-构造函数和初始化"><a href="#5-2-构造函数和初始化" class="headerlink" title="5.2 构造函数和初始化"></a>5.2 构造函数和初始化</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意,class的构造中需要给参数带上var或者val才是添加属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>(<span class="keyword">var</span> name:String, <span class="keyword">val</span> age:<span class="built_in">Int</span>)&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        println(<span class="string">"<span class="variable">$name</span> is <span class="variable">$age</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> me = Human(<span class="string">"Lixiang"</span>, <span class="number">28</span>)</span><br><span class="line">    println(<span class="string">"My name is <span class="subst">$&#123;me.name&#125;</span>, and my age is <span class="subst">$&#123;me.age&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-委托属性-Delegated-Properties"><a href="#5-3-委托属性-Delegated-Properties" class="headerlink" title="5.3 委托属性(Delegated Properties)"></a>5.3 委托属性(Delegated Properties)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSample.demo3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.properties.Delegates</span><br><span class="line"><span class="keyword">import</span> kotlin.reflect.KProperty</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span></span>&#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef:<span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>:String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="variable">$thisRef</span>, thank you for delegating '<span class="subst">$&#123;property.name&#125;</span>' to me!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">        println(<span class="string">"<span class="variable">$value</span> has been assigned to '<span class="subst">$&#123;property.name&#125;</span>' in <span class="variable">$thisRef</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//委托</span></span><br><span class="line">    <span class="keyword">var</span> name: String <span class="keyword">by</span> Delegate()</span><br><span class="line">    <span class="comment">//委托的一种用法,惰性</span></span><br><span class="line">    <span class="keyword">val</span> lazyValue: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        println(<span class="string">"lazyValue初始化"</span>)</span><br><span class="line">        <span class="string">"test"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//委托的用法,通知,其中"John"是初始值</span></span><br><span class="line">    <span class="keyword">var</span> othername: String <span class="keyword">by</span> Delegates.observable(<span class="string">"John"</span>) &#123;</span><br><span class="line">        prop, old, new -&gt; println(<span class="string">"<span class="subst">$&#123;prop.name&#125;</span> <span class="variable">$old</span> -&gt; <span class="variable">$new</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p = Person()</span><br><span class="line">    p.name = <span class="string">"Lixiang"</span></span><br><span class="line">    <span class="keyword">val</span> s = p.name</span><br><span class="line">    println(s)</span><br><span class="line">    <span class="comment">//只求一次值</span></span><br><span class="line">    println(p.lazyValue)</span><br><span class="line">    println(p.lazyValue)</span><br><span class="line">    println(p.lazyValue)</span><br><span class="line">    p.othername = <span class="string">"Jack"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-数据类-Data-Classes"><a href="#5-4-数据类-Data-Classes" class="headerlink" title="5.4 数据类(Data Classes)"></a>5.4 数据类(Data Classes)</h3><p>数据类主要用来存储数据</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSample.demo4</span><br><span class="line"></span><br><span class="line"><span class="comment">//data class用来保存数据,他有以下几种方法</span></span><br><span class="line"><span class="comment">//equals()/hashCode()</span></span><br><span class="line"><span class="comment">//toString()</span></span><br><span class="line"><span class="comment">//copy() 深拷贝</span></span><br><span class="line"><span class="comment">//destructuring 解包操作</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name:String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)&#123;</span><br><span class="line">    <span class="comment">//你也可以重写</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"My name is <span class="variable">$name</span>, age is <span class="variable">$age</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a = User(<span class="string">"Lixiang"</span>, <span class="number">20</span>)</span><br><span class="line">    println(a)</span><br><span class="line">    <span class="keyword">val</span> b = User(<span class="string">"Lixiang"</span>, <span class="number">20</span>)</span><br><span class="line">    println(a == b)</span><br><span class="line">    println(a === b)</span><br><span class="line">    <span class="keyword">val</span> c = a.copy()</span><br><span class="line">    println(c == a)</span><br><span class="line">    println(c ===a)</span><br><span class="line">    <span class="comment">//解包</span></span><br><span class="line">    <span class="keyword">val</span> (name, age) = c</span><br><span class="line">    println(<span class="string">"<span class="variable">$name</span>, <span class="variable">$age</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-单例-Singleton"><a href="#5-5-单例-Singleton" class="headerlink" title="5.5 单例(Singleton)"></a>5.5 单例(Singleton)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSample.demo5</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">NewCartersianPoint</span><span class="params">(x:<span class="type">Double</span>, y:<span class="type">Double</span>)</span></span>: Point&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x, y)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">NewPolarPoint</span><span class="params">(rho: <span class="type">Double</span>, theta: <span class="type">Double</span>)</span></span>: Point&#123;</span><br><span class="line">        <span class="keyword">return</span> Point(rho*Math.cos(theta), rho*Math.sin(theta))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>(<span class="keyword">val</span> x: <span class="built_in">Double</span>, <span class="keyword">val</span> y: <span class="built_in">Double</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pf = PointFactory()</span><br><span class="line">    <span class="keyword">var</span> point = pf.NewPolarPoint(<span class="number">3.0</span>, Math.PI/<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"<span class="subst">$&#123;point.x&#125;</span> <span class="subst">$&#123;point.y&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-6-伴随对象-Companion-Objects"><a href="#5-6-伴随对象-Companion-Objects" class="headerlink" title="5.6 伴随对象(Companion Objects)"></a>5.6 伴随对象(Companion Objects)</h3><p>Kotlin中没有静态方法，使用伴随对象来实现类似静态方法的效果</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> KotlinSample.demo6</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意,伴随对象并不是真正的static的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>(<span class="keyword">var</span> x: <span class="built_in">Double</span>, <span class="keyword">var</span> y: <span class="built_in">Double</span>)&#123;</span><br><span class="line">    <span class="comment">//伴随对象,使用companion object修饰,其中Factory可以注释掉,也就是下面的代码也是可用的:</span></span><br><span class="line">    <span class="comment">//companion object &#123;</span></span><br><span class="line">    <span class="comment">//伴随对象还能实现接口</span></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> <span class="comment">/*Factory*/</span> : IFactory&lt;Point&gt;&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: Point &#123;</span><br><span class="line">            <span class="keyword">return</span> Point(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">createCarterian</span><span class="params">(x: <span class="type">Double</span>, y: <span class="type">Double</span>)</span></span>: Point = Point(x, y)</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">createPolar</span><span class="params">(x: <span class="type">Double</span>, y: <span class="type">Double</span>)</span></span>: Point = Point(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> simplePoint = Point(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//var factoryPoint = Point.Factory.createCarterian(1.0, 2.0)</span></span><br><span class="line">    <span class="comment">//类似静态方法的调用</span></span><br><span class="line">    <span class="keyword">var</span> factoryPoint2 = Point.createPolar(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaultPoint = Point.create()</span><br><span class="line">    <span class="comment">//或者如果没有给伴随对象起名字,也可以用下面这个方法</span></span><br><span class="line">    <span class="keyword">var</span> defaultPoint2 = Point.Companion.create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-继承-Inheritance"><a href="#5-7-继承-Inheritance" class="headerlink" title="5.7 继承(Inheritance)"></a>5.7 继承(Inheritance)</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有open的class才能被继承</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String)&#123;</span><br><span class="line">    <span class="comment">//同样只有open方法才能被overwrite</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"I'm <span class="variable">$name</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类已经有了name,所以不能再给这里的name添加val/var</span></span><br><span class="line"><span class="comment">//Person有构造方法,因此必须对其进行调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span>(name: String, <span class="keyword">var</span> subordinates: List&lt;Person&gt;) : Person(name)&#123;</span><br><span class="line">    <span class="comment">//重写方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">talk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"I'm <span class="variable">$name</span>, I have <span class="subst">$&#123;subordinates.size&#125;</span> subordinates"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> lixiang = Person(<span class="string">"理想"</span>)</span><br><span class="line">    lixiang.talk()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> boss = Manager(<span class="string">"龙"</span>, listOf(lixiang))</span><br><span class="line">    boss.talk()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-8-接口-Interfaces"><a href="#5-8-接口-Interfaces" class="headerlink" title="5.8 接口(Interfaces)"></a>5.8 接口(Interfaces)</h3><h3 id="5-9-类委托-Class-Delegation"><a href="#5-9-类委托-Class-Delegation" class="headerlink" title="5.9 类委托(Class Delegation)"></a>5.9 类委托(Class Delegation)</h3><hr>
<h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><h3 id="6-1-枚举-Enumerations"><a href="#6-1-枚举-Enumerations" class="headerlink" title="6.1 枚举(Enumerations)"></a>6.1 枚举(Enumerations)</h3><h3 id="6-2-异常-Exceptions"><a href="#6-2-异常-Exceptions" class="headerlink" title="6.2 异常(Exceptions)"></a>6.2 异常(Exceptions)</h3><h3 id="6-3-操作符重载-Operator-Overloads"><a href="#6-3-操作符重载-Operator-Overloads" class="headerlink" title="6.3 操作符重载(Operator Overloads)"></a>6.3 操作符重载(Operator Overloads)</h3><h3 id="6-4-Type-Safe-Builders"><a href="#6-4-Type-Safe-Builders" class="headerlink" title="6.4 Type-Safe Builders"></a>6.4 Type-Safe Builders</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Kotlin,学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Nancy Web框架</title>
    <url>/2014/09/12/Nancy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Nancy框架"><a href="#Nancy框架" class="headerlink" title="Nancy框架"></a>Nancy框架</h1><h2 id="一、创建第一个Nancy应用"><a href="#一、创建第一个Nancy应用" class="headerlink" title="一、创建第一个Nancy应用"></a>一、创建第一个Nancy应用</h2><ol>
<li>安装<a href="http://visualstudiogallery.msdn.microsoft.com/f1e29f61-4dff-4b1e-a14b-6bd0d307611a" target="_blank" rel="noopener">Nancy项目模板</a></li>
<li>创建<code>Nancy Empty Web Application with ASP.NET Hosting</code></li>
<li>添加<code>Nancy module</code>,它是一个标准C#类，通过添加下面几行代码定义了web应用的路由处理方法。</li>
<li>编译并运行。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HelloModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public HelloModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Get[&quot;&#x2F;&quot;] &#x3D; parameters &#x3D;&gt; &quot;Hello World&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、探索Nancy的module"><a href="#二、探索Nancy的module" class="headerlink" title="二、探索Nancy的module"></a>二、探索Nancy的module</h2><p>Module继承自<code>NancyModule</code>类。Module是必不可少的.它不仅定义了路由，还提供了许多其他信息，比如请求、上下文、构造响应的辅助方法、视图渲染等等。</p>
<h3 id="1-模块能够在全局被发现"><a href="#1-模块能够在全局被发现" class="headerlink" title="1. 模块能够在全局被发现"></a>1. 模块能够在全局被发现</h3><p>可以在任意地方定义module，比如外部的dll等，这为代码的复用带来很大的方便。不用担心效率问题，扫描module只在程序启动时发生。</p>
<h3 id="2-使用模块为路由创建一个根"><a href="#2-使用模块为路由创建一个根" class="headerlink" title="2. 使用模块为路由创建一个根"></a>2. 使用模块为路由创建一个根</h3><p>类似命名空间的概念，在创建构造方法时传给base一个名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ResourceModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public ResourceModule() : base(&quot;&#x2F;products&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; would capture routes to &#x2F;products&#x2F;list sent as a GET request</span><br><span class="line">        Get[&quot;&#x2F;list&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">            return &quot;The list of products&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、定义路由"><a href="#三、定义路由" class="headerlink" title="三、定义路由"></a>三、定义路由</h2><p>路由是在module的构造方法中定义的。为了定义一个路由，你需要声明<code>方法</code>+<code>模式</code>+<code>动作</code>+(可选)<code>条件</code></p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductsModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public ProductsModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Get[&quot;&#x2F;products&#x2F;&#123;id&#125;&quot;] &#x3D; _ &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;do something</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者异步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProductsModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public ProductsModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Get[&quot;&#x2F;products&#x2F;&#123;id&#125;&quot;, runAsync: true] &#x3D; async (_, token) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;do something long and tedious</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h3><p>支持HTTP常见方法：<code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code></p>
<h3 id="2-模式"><a href="#2-模式" class="headerlink" title="2. 模式"></a>2. 模式</h3><p>模式能够自定义，Nancy提供了一些常用的：</p>
<ol>
<li>字面量 - <code>/some/literal/segments</code></li>
<li>捕获片段 - <code>/{name}</code>，获取URL的片段，并传给路由的Action</li>
<li>捕获可选片段 - <code>/{name?}</code>，添加了一个问号，片段就是可选的了</li>
<li>捕获可选/默认片段 - <code>/{name?default}</code></li>
<li>正则片段 - <code>/(?&lt;age&gt;[\d]{1,2})</code>，使用命名捕获组来捕获片段，如果不需要捕获，使用非捕获组，比如<code>(?:regex-goes-here)</code></li>
<li>贪心片段 - <code>/{name*}</code>，从/处开始捕获</li>
<li>贪心正则捕获 - <code>^(?&lt;name&gt;[a-z]{3, 10}(?:/{1})(?&lt;action&gt;[a-z]{5, 10}))$</code></li>
<li>多个捕获片段 - <code>/{file}.{extension}</code>或者<code>/{file}.ext</code></li>
</ol>
<h3 id="3-模式的优先级"><a href="#3-模式的优先级" class="headerlink" title="3. 模式的优先级"></a>3. 模式的优先级</h3><h3 id="4-动作"><a href="#4-动作" class="headerlink" title="4. 动作"></a>4. 动作</h3><p>动作时一个lambda表达式<code>Func&lt;dynamic, dynamic&gt;</code>，输入时<code>DynamicDictionary</code>，详见<a href="https://github.com/NancyFx/Nancy/wiki/Taking-a-look-at-the-DynamicDictionary" target="_blank" rel="noopener">此处</a>.</p>
<p>响应可以使任意的model，最终的结果会被<a href="https://github.com/NancyFx/Nancy/wiki/Content-Negotiation" target="_blank" rel="noopener">Content Negotiation</a>处理。但是如果返回值是<code>Response</code>类型，则原样返回。</p>
<p><code>Response</code>对象有几个隐形转换操作：</p>
<ol>
<li><code>int</code>变为Http的状态</li>
<li><code>HttpStatusCode</code>枚举值</li>
<li><code>string</code>直接是相应的body</li>
<li><code>Action&lt;Stream&gt;</code>则写道response stream中</li>
</ol>
<h3 id="5-条件"><a href="#5-条件" class="headerlink" title="5. 条件"></a>5. 条件</h3><p>路由条件用来过滤（比如登录非登录）。使用<code>Func&lt;NancyContext, bool&gt;</code>的lambda表达式定义.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Post[&quot;&#x2F;login&quot;, (ctx) &#x3D;&gt; ctx.Request.Form.remember] &#x3D; _ &#x3D;&gt; </span><br><span class="line">&#123;</span><br><span class="line">     return &quot;Handling code when remember is true!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Post[&quot;&#x2F;login&quot;, (ctx) &#x3D;&gt; !ctx.Request.Form.remember] &#x3D; _ &#x3D;&gt; </span><br><span class="line">&#123;</span><br><span class="line">     return &quot;Handling code when remember is false!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-路由片段约束"><a href="#6-路由片段约束" class="headerlink" title="6. 路由片段约束"></a>6. 路由片段约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;intConstraint&#x2F;&#123;value:int&#125;&quot;] &#x3D; _ &#x3D;&gt; &quot;Value &quot; + _.value + &quot; is an integer.&quot;;</span><br></pre></td></tr></table></figure>
<p>只有为int的才会匹配。</p>
<p>约束：</p>
<ul>
<li><code>int</code></li>
<li><code>decimal</code></li>
<li><code>guid</code></li>
<li><code>bool</code></li>
<li><code>alpha</code></li>
<li><code>datetime</code></li>
<li><code>datetime(format)</code></li>
<li><code>min(minimum)</code></li>
<li><code>max(maximum)</code></li>
<li><code>range(minimum, maximum)</code></li>
<li><code>minlength(length)</code></li>
<li><code>maxlength(length)</code></li>
<li><code>length(minimum, maximum)</code></li>
</ul>
<h4 id="6-1-自定义约束"><a href="#6-1-自定义约束" class="headerlink" title="6.1 自定义约束"></a>6.1 自定义约束</h4><p>实现<code>IRouteSegmentConstraint</code>接口，或者继承自</p>
<ul>
<li><code>RouteSegmentConstraintBase&lt;T&gt;</code> - Base class for a named constraint.</li>
<li><code>ParameterizedRouteSegmentConstraintBase&lt;T&gt;</code> - Base class for a named constraint that accepts arguments.</li>
</ul>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>一个email约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class EmailRouteSegmentConstraint : RouteSegmentConstraintBase&lt;string&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public override string Name</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return &quot;email&quot;; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override bool TryMatch(string constraint, string segment, out string matchedValue)</span><br><span class="line">    &#123;</span><br><span class="line">        if (segment.Contains(&quot;@&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            matchedValue &#x3D; segment;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        matchedValue &#x3D; null;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;profile&#x2F;&#123;value:email&#125;&quot;] &#x3D; _ &#x3D;&gt; &quot;Value &quot; + _.value + &quot; is an e-mail address.&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="7-选择去调用路由的秘诀"><a href="#7-选择去调用路由的秘诀" class="headerlink" title="7. 选择去调用路由的秘诀"></a>7. 选择去调用路由的秘诀</h3><p>一个请求有时符合多个模式，此时记住：</p>
<ol>
<li>module的顺序在启动时不定</li>
<li>同一module中的路由是按顺序来的</li>
<li>多个匹配中，得分最高的匹配</li>
<li>得分相同的匹配按照启动时的顺序匹配</li>
</ol>
<h3 id="8-疯狂的路由"><a href="#8-疯狂的路由" class="headerlink" title="8. 疯狂的路由"></a>8. 疯狂的路由</h3><p>一些可能的用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; would capture routes like &#x2F;hello&#x2F;nancy sent as a GET request</span><br><span class="line">Get[&quot;&#x2F;hello&#x2F;&#123;name&#125;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return &quot;Hello &quot; + parameters.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; would capture routes like &#x2F;favoriteNumber&#x2F;1234, but not &#x2F;favoriteNumber&#x2F;asdf as a GET request</span><br><span class="line">Get[&quot;&#x2F;favoriteNumber&#x2F;&#123;value:int&#125;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return &quot;So your favorite number is &quot; + parameters.value + &quot;?&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; would capture routes like &#x2F;products&#x2F;1034 sent as a DELETE request</span><br><span class="line">Delete[@&quot;&#x2F;products&#x2F;(?&lt;id&gt;[\d]&#123;1,7&#125;)&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return 200;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; would capture routes like &#x2F;users&#x2F;192&#x2F;add&#x2F;moderator sent as a POST request</span><br><span class="line">Post[&quot;&#x2F;users&#x2F;&#123;id&#125;&#x2F;add&#x2F;&#123;category&#125;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return HttpStatusCode.OK;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="四、自定义路由"><a href="#四、自定义路由" class="headerlink" title="四、自定义路由"></a>四、自定义路由</h2><p><a href="http://www.philliphaydon.com/2013/04/nancyfx-implementing-your-own-routing/" target="_blank" rel="noopener">http://www.philliphaydon.com/2013/04/nancyfx-implementing-your-own-routing/</a></p>
<h2 id="五、异步"><a href="#五、异步" class="headerlink" title="五、异步"></a>五、异步</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><p>Before/After管道、主路由委托都可以使用async.语法绝大部分与同步代码一致，但需要注意下面的变化：</p>
<ul>
<li>before/after钩子接受两个参数，context和cancellation token(取消令牌)，而不仅仅是context</li>
<li>路由定义有一个附加的bool参数，并且委托接受两个参数，一个捕获的参数，另一个cancellation token.</li>
</ul>
<h3 id="2-语法例子"><a href="#2-语法例子" class="headerlink" title="2 语法例子"></a>2 语法例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public MainModule()</span><br><span class="line">&#123;</span><br><span class="line">    Before +&#x3D; async (ctx, ct) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            this.AddToLog(&quot;Before Hook Delay\n&quot;);</span><br><span class="line">            await Task.Delay(5000);</span><br><span class="line"></span><br><span class="line">            return null;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    After +&#x3D; async (ctx, ct) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            this.AddToLog(&quot;After Hook Delay\n&quot;);</span><br><span class="line">            await Task.Delay(5000);</span><br><span class="line">            this.AddToLog(&quot;After Hook Complete\n&quot;);</span><br><span class="line"></span><br><span class="line">            ctx.Response &#x3D; this.GetLog();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    Get[&quot;&#x2F;&quot;, true] &#x3D; async (x, ct) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            this.AddToLog(&quot;Delay 1\n&quot;);</span><br><span class="line">            await Task.Delay(1000);</span><br><span class="line"></span><br><span class="line">            this.AddToLog(&quot;Delay 2\n&quot;);</span><br><span class="line">            await Task.Delay(1000);</span><br><span class="line"></span><br><span class="line">            this.AddToLog(&quot;Executing async http client\n&quot;);</span><br><span class="line">            var client &#x3D; new HttpClient();</span><br><span class="line">            var res &#x3D; await client.GetAsync(&quot;http:&#x2F;&#x2F;nancyfx.org&quot;);</span><br><span class="line">            var content &#x3D; await res.Content.ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">            this.AddToLog(&quot;Response: &quot; + content.Split(&#39;\n&#39;)[0] + &quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">            return (Response)this.GetLog();</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、查看DynamicDictionary"><a href="#六、查看DynamicDictionary" class="headerlink" title="六、查看DynamicDictionary"></a>六、查看DynamicDictionary</h2><p><code>DynamicDictionary</code>类似字典，但功能更多.从请求中获取的值都保存到它里面。可以使用属性或者index来使用捕获的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;hello&#x2F;&#123;name&#125;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return &quot;Hello &quot; + parameters.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Get[&quot;&#x2F;goodbye&#x2F;&#123;name&#125;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return &quot;Goodbye &quot; + parameters[&quot;name&quot;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>存储的值可以显示或者隐式的转换为基础类型或者特殊属性.使用<code>HasValue</code>决定是否被赋值。值已经实现了<code>IEquatable&lt;&gt;</code>和<code>IConvertible</code>接口。</p>
<h2 id="七、module的before-after钩子"><a href="#七、module的before-after钩子" class="headerlink" title="七、module的before/after钩子"></a>七、module的before/after钩子</h2><p>除了为特定的路由定义处理程序,module还可以拦截匹配某个路由的请求,请求前后都能做到。重要的是要理解,只有传入的请求匹配模块的路由之一，这些拦截器才会被调用。</p>
<h3 id="1-在路由被调用前拦截请求"><a href="#1-在路由被调用前拦截请求" class="headerlink" title="1. 在路由被调用前拦截请求"></a>1. 在路由被调用前拦截请求</h3><p>Before拦截器能让你修改请求，甚至可以通过返回一个response来放弃请求。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Before +&#x3D; ctx &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;null or a Response object&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定义Before拦截器的语法与定义路由有些不同。因为它是定义在module上，被所有路由调用，所以不需要匹配模式。</p>
<p>传给拦截器的是当前请求的NancyContext实例。</p>
<p>最后的不同就是拦截器的返回值，如果返回<code>null</code>，拦截器将主动权转给路由；如果返回<code>Response</code>对象，则路由不起作用。</p>
<h3 id="2-After拦截器"><a href="#2-After拦截器" class="headerlink" title="2. After拦截器"></a>2. After拦截器</h3><p>与定义Before烂机器相同，但是没有返回值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">After +&#x3D; ctx &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; Modify ctx.Response</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Before拦截器可以修改Request，相应的，After拦截器可以修改Response。</p>
<h2 id="八、Application的Before-After和OnError管道"><a href="#八、Application的Before-After和OnError管道" class="headerlink" title="八、Application的Before,After和OnError管道"></a>八、Application的Before,After和OnError管道</h2><p>应用管道能在所有的路由上执行，是全局性的。</p>
<h3 id="1-Before拦截"><a href="#1-Before拦截" class="headerlink" title="1.Before拦截"></a>1.Before拦截</h3><p>应用级的<code>Before</code>钩子通过<code>Func&lt;NancyContext, Response&gt;</code>函数定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipelines.BeforeRequest +&#x3D; (ctx) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;null or a Response object&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>异步版本的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipelines.BeforeRequest +&#x3D; async (ctx, token) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;null or a Response object&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-After拦截"><a href="#2-After拦截" class="headerlink" title="2. After拦截"></a>2. After拦截</h3><p>After拦截器通过`Action<NancyContext>定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipelines.AfterRequest +&#x3D; (ctx) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; Modify ctx.Response</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-错误拦截器"><a href="#3-错误拦截器" class="headerlink" title="3. 错误拦截器"></a>3. 错误拦截器</h3><p><code>OnError</code>拦截器用来拦截路由发生的错误。通过它可以获取<code>NancyContext</code>和发生的异常。</p>
<p><code>OnError</code>拦截器通过<code>Func&lt;NancyContext, Exception, Response&gt;</code>函数定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipelines.OnError +&#x3D; (ctx, ex) &#x3D;&gt; &#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>System.AggregateExceptions在OnError管道中的注意事项：</strong></p>
<p>路由是通过许多嵌套的Task(<code>System.Threading.Tasks.Task</code>)来执行的。如果那个任务出现了问题，异常会被包装到<code>System.AggregateException</code>。<code>System.AggregateException</code>可以持有任意个异常。</p>
<p>如果只有一个异常，Nancy会解包异常并且交给<code>OnError</code>管道。如果发生多个异常，Nancy会使用<code>System.AggregateException</code>，以避免吞异常。</p>
<h3 id="4-构建自己的钩子"><a href="#4-构建自己的钩子" class="headerlink" title="4. 构建自己的钩子"></a>4. 构建自己的钩子</h3><p>在<a href="https://github.com/NancyFx/Nancy/wiki/Bootstrapper" target="_blank" rel="noopener">Bootstrapper</a>中创建系统级的钩子.可以在<code>ApplicationStartup</code>或者<code>RequestStartup</code>方法中定义它们。这是因为也许你需要在钩子中使用容器中的一些东西。两个方法的不同之处在于范围不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected override void RequestStartup(TinyIoCContainer requestContainer, IPipelines pipelines, NancyContext context)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过使用<code>pipelines</code>中适当的属性来创建钩子。它允许你获取<code>BeforeRequest</code>, <code>AfterRequest</code>和<code>OnError</code>属性。</p>
<h2 id="九、模型绑定"><a href="#九、模型绑定" class="headerlink" title="九、模型绑定"></a>九、模型绑定</h2><p>发送数据给Nancy可以有多种方法，比如Query String, 路由捕获参数、请求体request body。手工处理这些不同的方法也可以，但是还有一种方法就是统一处理，绑定到<code>model</code>。</p>
<p>Nancy只用一行代码就能处理上述的所有情况，并且能接受<code>JSON</code>和<code>XML</code>形式的请求。</p>
<p>也可以扩展Nancy的模型绑定。</p>
<p>Nancy的模型绑定在<code>NancyModule</code>中被定义为一个单独的扩展方法。该扩展在<code>Nancy.ModelBinding</code>命名空间里，并且添加了Bind()和BindTo()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Foo f &#x3D; this.Bind();</span><br><span class="line"></span><br><span class="line">var f &#x3D; this.Bind&lt;Foo&gt;();</span><br><span class="line"></span><br><span class="line">var f &#x3D; this.BindTo(instance);</span><br></pre></td></tr></table></figure>

<p>上面3个有着相同的功能，他们提供了做同一事物的不同方法。前两个使用Bind()重载来创建<code>Foo</code>类型的实例，并且绑定；BindTo()则绑定到现有实例。</p>
<h3 id="1-屏蔽不想要的信息"><a href="#1-屏蔽不想要的信息" class="headerlink" title="1. 屏蔽不想要的信息"></a>1. 屏蔽不想要的信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var f &#x3D; this.Bind&lt;Foo&gt;(f &#x3D;&gt; f.id, f &#x3D;&gt; f.creator, f &#x3D;&gt; f.createddate);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var f &#x3D; this.Bind&lt;Foo&gt;(&quot;id&quot;, &quot;creator&quot;, &quot;createddate&quot;);</span><br></pre></td></tr></table></figure>

<p>当绑定到到arrary, list或者ienumerable时，屏蔽的是序列中的元素。</p>
<h3 id="2-绑定配置"><a href="#2-绑定配置" class="headerlink" title="2. 绑定配置"></a>2. 绑定配置</h3><p>使用<code>BindingConfig</code>实例来修改model binder的默认行为。</p>
<p>下面是<code>BindingConfig</code>提供的一些配置项：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td>BodyOnly</td>
<td>是否只绑定request body。这种情况下，request和context参数都不会被绑定。如果没有body并且没有选项，那么绑定就不会放生</td>
<td>false</td>
</tr>
<tr>
<td>IgnoreErrors</td>
<td>是否忽略绑定错误并且继续下一个属性</td>
<td>false</td>
</tr>
<tr>
<td>Overwrite</td>
<td>丙丁是否可以覆盖没有默认值的属性</td>
<td>true</td>
</tr>
</tbody></table>
<p>不准Overwrite还有一个快捷方法：<code>BindingConfig.NoOverwrite</code></p>
<h3 id="3-反序列化rich-request-body-payloads-负载"><a href="#3-反序列化rich-request-body-payloads-负载" class="headerlink" title="3. 反序列化rich request body payloads(负载)"></a>3. 反序列化rich request body payloads(负载)</h3><p>有时你像在请求中发送结构化的数据，比如<code>JSON</code>或者<code>XML</code>，并且绑定到模型。模型绑定器支持这种反序列化。</p>
<p>Nancy支持两种反序列化：JSON和XML。绑定器根据Http的<code>Content-type</code>头来决定使用哪一种反序列化。</p>
<p>默认使用JSON反序列化来处理<code>application/json</code>, <code>text/json</code>和<code>application/vnd....+json</code>。同样的使用XML反序列化来处理<code>application/xml</code>, <code>text/xml</code>和<code>application/vnd....+xml</code></p>
<p>对于其他模型绑定器，你可以使用自己的反序列化，并且Nancy会自动检测他们，任何用户定义的绑定器的优先级都高于内建的。<br><strong>注意：</strong>如果你使用Nancy.Json.JsonSetting.MaxJsonLength Exceeded错误，那是因为你的payloads太高了，在Bootstrapper中更改限制：<code>ApplicationStartup</code>中设置<code>Nancy.Json.JsonSettings.MaxJsonLength=int.MaxValue</code></p>
<h3 id="4-模型绑定Checkbox"><a href="#4-模型绑定Checkbox" class="headerlink" title="4. 模型绑定Checkbox"></a>4. 模型绑定Checkbox</h3><p>要绑定复选框到bool值，确定设置<code>value=true</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberMe"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LoginModel</span><br><span class="line">&#123;</span><br><span class="line">    public bool RememberMe &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-绑定到list"><a href="#5-绑定到list" class="headerlink" title="5. 绑定到list"></a>5. 绑定到list</h3><h4 id="5-1-绑定arrary到单独的对象"><a href="#5-1-绑定arrary到单独的对象" class="headerlink" title="5.1 绑定arrary到单独的对象"></a>5.1 绑定arrary到单独的对象</h4><p>如果有一个form:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/ArrayOnObject"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Tags"</span> <span class="attr">value</span>=<span class="string">"Tag1,Tag2,Tag3"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Ints"</span> <span class="attr">value</span>=<span class="string">"1,2,3,4,4,5,6,3,2,21,1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而且有一个类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Posts</span><br><span class="line">&#123;</span><br><span class="line">  public string[] Tags &#123; get; set; &#125;</span><br><span class="line">  public int[] Ints &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个简单的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var listOfPosts &#x3D; this.Bind&lt;Posts&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="5-2-绑定到对象的list"><a href="#5-2-绑定到对象的list" class="headerlink" title="5.2 绑定到对象的list"></a>5.2 绑定到对象的list</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/SimpleListDemo"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      User 1:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name[0]"</span> <span class="attr">value</span>=<span class="string">"thecodejunkie"</span> /&gt;</span> </span><br><span class="line">      Commits <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Commits[0]"</span> <span class="attr">value</span>=<span class="string">"1068"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      User 2:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name[1]"</span> <span class="attr">value</span>=<span class="string">"grumpydev"</span> /&gt;</span>  </span><br><span class="line">      Commits <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Commits[1]"</span> <span class="attr">value</span>=<span class="string">"1049"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      User 3:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name[2]"</span> <span class="attr">value</span>=<span class="string">"jchannon"</span> /&gt;</span>  </span><br><span class="line">      Commits <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Commits[2]"</span> <span class="attr">value</span>=<span class="string">"109"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      User 4:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name[3]"</span> <span class="attr">value</span>=<span class="string">"prabirshrestha"</span> /&gt;</span>  </span><br><span class="line">      Commits <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Commits[3]"</span> <span class="attr">value</span>=<span class="string">"75"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      User 5:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Name[4]"</span> <span class="attr">value</span>=<span class="string">"phillip-haydon"</span> /&gt;</span>  </span><br><span class="line">      Commits <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Commits[4]"</span> <span class="attr">value</span>=<span class="string">"40"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Test the binding thingy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用<code>this.Bind&lt;List&lt;User&gt;&gt;();</code>来绑定对象列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User</span><br><span class="line">&#123;</span><br><span class="line">   public string Name &#123; get; set; &#125;</span><br><span class="line">   public int Commits &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-HTML-form中的List分隔符"><a href="#5-3-HTML-form中的List分隔符" class="headerlink" title="5.3 HTML form中的List分隔符"></a>5.3 HTML form中的List分隔符</h4><p>两种分隔符</p>
<ul>
<li>下划线(<code>Name_1</code>, <code>Name_2</code>等)</li>
<li>括号(<code>Name[1]</code>, <code>Name[2]</code>等)</li>
</ul>
<h2 id="十、Bootstrapper"><a href="#十、Bootstrapper" class="headerlink" title="十、Bootstrapper"></a>十、Bootstrapper</h2><p>bootstrapper负责自动发现模型、自定义模型绑定、依赖等等。可以被替换掉。</p>
<h3 id="1-简单的修改bootstrapper"><a href="#1-简单的修改bootstrapper" class="headerlink" title="1. 简单的修改bootstrapper"></a>1. 简单的修改bootstrapper</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)</span><br><span class="line">    &#123;</span><br><span class="line">         &#x2F;&#x2F; your customization goes here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-找到合适的bootstrapper"><a href="#2-找到合适的bootstrapper" class="headerlink" title="2. 找到合适的bootstrapper"></a>2. 找到合适的bootstrapper</h3><p>应用启动时，它会寻找自定义的bootstrap，如果没有找到，则使用<code>DefaultNancyBootstrap</code>。每个应用只能有<strong>一个</strong>bootstrapper. 如果有多个，则Nancy寻找最底层的bootstrapper。</p>
<h3 id="3-使用自动注册"><a href="#3-使用自动注册" class="headerlink" title="3. 使用自动注册"></a>3. 使用自动注册</h3><p>注入自己的依赖到NancyModule中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Home : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public Home(IMessageService service)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;If there is only one implementation of IMessageService in the application,</span><br><span class="line">        &#x2F;&#x2F; TinyIoC will resolve the dependency on its own and inject it in the module.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十一、视图引擎"><a href="#十一、视图引擎" class="headerlink" title="十一、视图引擎"></a>十一、视图引擎</h2><p>视图引擎就是输入“模板”和“模型”，输出HTML（大部分情况下）到浏览器。</p>
<p>Nancy默认使用<a href="https://github.com/grumpydev/SuperSimpleViewEngine" target="_blank" rel="noopener"><code>SuperSimpleViewEngine</code></a>。它支持一些必要的功能：layout布局、partials部分、models模型、conditions条件和iterations循环。你可以使用这个而不无需其他依赖。它支持<code>.html</code>和<code>.sshtml</code>文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@Master['MasterPage']</span><br><span class="line"></span><br><span class="line">@Section['Content']</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This content from the index page<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Partials<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Login box below rendered via a partial view with no model.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        @Partial['login'];</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Box below is rendered via a partial with a sub-model passed in.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The submodel is a list which the partial iterates over with Each<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">        @Partial['user', Model.Users];</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Encoding<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Model output can also be encoded:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>@!Model.NaughtyStuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">@EndSection</span><br></pre></td></tr></table></figure>

<p>除此之外，Nancy还支持Razor, Spark, NDjango和dotLiquid引擎。通过添加引用，Nancy会自动的根据文件后缀名调用对应的引擎。</p>
<h3 id="1-在路由中渲染视图"><a href="#1-在路由中渲染视图" class="headerlink" title="1. 在路由中渲染视图"></a>1. 在路由中渲染视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;products&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return View[&quot;products.html&quot;, someModel];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>模板说明：</p>
<ol>
<li>视图文件名: “products.html”</li>
<li>如果没有后缀，而且有多个同名模板，则会收到<code>AmbigiousViewsException</code>错误。</li>
<li>一个相对于跟的路径(比如：<code>products/products.html</code>)</li>
</ol>
<p>更多参见<a href="https://github.com/NancyFx/Nancy/wiki/View-location-conventions" target="_blank" rel="noopener">视图位置约定</a></p>
<h3 id="2-从模型中解析视图的名称"><a href="#2-从模型中解析视图的名称" class="headerlink" title="2.从模型中解析视图的名称"></a>2.从模型中解析视图的名称</h3><p>如果值传递给View一个模型，Nancy会用模型名（去掉”Model”后缀）作为视图名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;products&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return View[new ProductsModel()];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果找不到，就会报406 Not Acceptable.</p>
<h2 id="十二、超简单视图引擎"><a href="#十二、超简单视图引擎" class="headerlink" title="十二、超简单视图引擎"></a>十二、超简单视图引擎</h2><p>SSVE基于正则，支持<code>sshtml</code>, <code>html</code>, <code>html</code>文件后缀。</p>
<p>模型可以是标准类型，或者<code>ExpandoObjects</code>（或者实现了<code>IDynamicMetaObjectProvider</code> 实现了<code>IDictionary&lt;string, object&gt;</code>的对象）。</p>
<p>所有的命令都可以有分号，但不是必须的。<code>[.Parameters]</code>这样的参数可以使任意层级的，比如<code>This.Property.That.Property</code>。</p>
<p>注意：所有引号都是<em>单引号</em>.</p>
<h3 id="1-标准变量替换"><a href="#1-标准变量替换" class="headerlink" title="1. 标准变量替换"></a>1. 标准变量替换</h3><p>如果变量不能替换，则使用<code>[Err!]</code>替换。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Model[.Parameters]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello @Model.Name, your age is @Model.User.Age</span><br></pre></td></tr></table></figure>

<h3 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h3><p>循环不能嵌套</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Each[.Parameters]</span><br><span class="line">   [@Current[.Parameters]]</span><br><span class="line">@EndEach</span><br></pre></td></tr></table></figure>

<p><code>@Each</code>表示循环；<code>@Current</code>表示当前变量，使用方法同<code>@Model</code>。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Each.Users</span><br><span class="line">   Hello @Current.Name!</span><br><span class="line">@EndEach</span><br></pre></td></tr></table></figure>

<h3 id="3-条件"><a href="#3-条件" class="headerlink" title="3. 条件"></a>3. 条件</h3><p>参数必须是bool，或能隐式转化。嵌套的@If @IfNot不支持。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@If[Not].Parameters</span><br><span class="line">   [contents]</span><br><span class="line">@EndIf</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@IfNot.HasUsers</span><br><span class="line">   No users found!</span><br><span class="line">@EndIf</span><br></pre></td></tr></table></figure>

<h3 id="4-隐式条件"><a href="#4-隐式条件" class="headerlink" title="4. 隐式条件"></a>4. 隐式条件</h3><p>如果module实现了<code>ICollection</code>，那你就能使用隐式转换。使用<code>Has</code>前缀。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Has[CollectionPropertyName]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@If.HasUsers</span><br><span class="line">   Users found!</span><br><span class="line">@EndIf</span><br></pre></td></tr></table></figure>
<h3 id="5-HTML编码"><a href="#5-HTML编码" class="headerlink" title="5. HTML编码"></a>5. HTML编码</h3><p><code>@Model</code>和<code>@Current</code>都可以有一个<code>!</code>，用来编码HTML：</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@!Model[.Parameter]</span><br><span class="line">@!Current[.Parameter]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@!Model.Test</span><br><span class="line"></span><br><span class="line">@Each</span><br><span class="line">   @!Current.Test</span><br><span class="line">@EndEach</span><br></pre></td></tr></table></figure>

<h3 id="6-部分Patials"><a href="#6-部分Patials" class="headerlink" title="6. 部分Patials"></a>6. 部分Patials</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Partial[&#39;&lt;view name&gt;&#39;[, Model.Property]]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Renders the partial view with the same model as the parent</span><br><span class="line">@Partial[&#39;subview.sshtml&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Renders the partial view using the User as the model</span><br><span class="line">@Partial[&#39;subview.sshtml&#39;, Model.User];</span><br></pre></td></tr></table></figure>

<h3 id="7-Master页和section"><a href="#7-Master页和section" class="headerlink" title="7. Master页和section"></a>7. Master页和section</h3><p>可以声明master页和节。不必为每个节提供内容。Master能用<code>@Module</code>，并且扩展名可以省略。</p>
<p>可以多次使用<code>@Section</code></p>
<p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Master[&#39;&lt;name&gt;&#39;]</span><br><span class="line"></span><br><span class="line">@Section[&#39;&lt;name&gt;&#39;]</span><br><span class="line">@EndSection</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; master.sshtml</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">@Section[&#39;Content&#39;];</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; index.sshtml</span><br><span class="line">@Master[&#39;master.sshtml&#39;]</span><br><span class="line"></span><br><span class="line">@Section[&#39;Content&#39;]</span><br><span class="line">   This is content on the index page</span><br><span class="line">@EndSection</span><br></pre></td></tr></table></figure>

<h3 id="8-防止伪造token"><a href="#8-防止伪造token" class="headerlink" title="8. 防止伪造token"></a>8. 防止伪造token</h3><p>防止CSRF</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AntiForgeryToken</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@AntiForgeryToken</span><br></pre></td></tr></table></figure>

<h3 id="9-路径扩展"><a href="#9-路径扩展" class="headerlink" title="9. 路径扩展"></a>9. 路径扩展</h3><p>扩展相对路径为整体路径。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Path[&#39;&lt;relative-path&gt;&#39;]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Path[&#39;~&#x2F;relative&#x2F;url&#x2F;image.png&#39;]</span><br></pre></td></tr></table></figure>

<h3 id="10-扩展SSVE"><a href="#10-扩展SSVE" class="headerlink" title="10. 扩展SSVE"></a>10. 扩展SSVE</h3><h2 id="十二、Razor引擎"><a href="#十二、Razor引擎" class="headerlink" title="十二、Razor引擎"></a>十二、Razor引擎</h2><p>这个Razor引擎跟ASP.NET MVC的有点不一样。</p>
<p>注意，Nancy仍然绑定模型到<code>@Model</code>，而不是ASP.NET中的<code>@model</code></p>
<h3 id="1-安装Razor"><a href="#1-安装Razor" class="headerlink" title="1. 安装Razor"></a>1. 安装Razor</h3><p>只需要添加<code>Nancy.ViewEngines.Razor.dll</code>（使用nuget安装<code>Nancy.ViewEngines.Razor</code>）。然后试图模板以<code>cshtml</code>或<code>vbhtml</code>结尾即可。</p>
<h3 id="2-配置Razor"><a href="#2-配置Razor" class="headerlink" title="2. 配置Razor"></a>2. 配置Razor</h3><h2 id="十三、实现自己的视图引擎需要注意的地方"><a href="#十三、实现自己的视图引擎需要注意的地方" class="headerlink" title="十三、实现自己的视图引擎需要注意的地方"></a>十三、实现自己的视图引擎需要注意的地方</h2><h2 id="十四、视图位置约定"><a href="#十四、视图位置约定" class="headerlink" title="十四、视图位置约定"></a>十四、视图位置约定</h2><h3 id="1-查看默认约定"><a href="#1-查看默认约定" class="headerlink" title="1. 查看默认约定"></a>1. 查看默认约定</h3><p>视图位置的约定通过<code>Func&lt;string, dynamic, ViewLocationContext, string&gt;</code>方法以及下面的一些默认约定来定义。</p>
<h4 id="1-1-根约定"><a href="#1-1-根约定" class="headerlink" title="1.1 根约定"></a>1.1 根约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return viewName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个约定会在根目录里寻找视图。但是如果视图包含一个相对路径，视图名称执行对应于根路径的路径。比如，视图<code>admin/index</code>会在<code>admin/index</code>目下寻找视图。</p>
<h4 id="1-2-视图文件夹约定"><a href="#1-2-视图文件夹约定" class="headerlink" title="1.2 视图文件夹约定"></a>1.2 视图文件夹约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return string.Concat(&quot;views&#x2F;&quot;, viewName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，视图<code>admin/index</code>会在<code>views/admin/index</code>下查找对应的视图。</p>
<h4 id="1-3-视图和模块路径约定"><a href="#1-3-视图和模块路径约定" class="headerlink" title="1.3 视图和模块路径约定"></a>1.3 视图和模块路径约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return string.Concat(&quot;views&#x2F;&quot;, viewLocationContext.ModulePath, &quot;&#x2F;&quot;, viewName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于模块products的视图<code>admin/index</code>，会在<code>views/products/admin/index</code>中查找视图。</p>
<h4 id="1-4-模块路径约定"><a href="#1-4-模块路径约定" class="headerlink" title="1.4 模块路径约定"></a>1.4 模块路径约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return string.Concat(viewLocationContext.ModulePath, &quot;&#x2F;&quot;, viewName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个约定会在与模块名相同的文件夹中查找视图。</p>
<h4 id="1-5-模块名称约定"><a href="#1-5-模块名称约定" class="headerlink" title="1.5 模块名称约定"></a>1.5 模块名称约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return string.Concat(viewLocationContext.ModuleName, &quot;&#x2F;&quot;, viewName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找以模块名为前缀的对应视图。</p>
<h4 id="1-6-视图模块名称约定"><a href="#1-6-视图模块名称约定" class="headerlink" title="1.6 视图模块名称约定"></a>1.6 视图模块名称约定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(viewName, model, viewLocationContext) &#x3D;&gt; &#123;</span><br><span class="line">    return string.Concat(&quot;views&#x2F;&quot;, viewLocationContext.ModuleName, &quot;&#x2F;&quot;, viewName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找views文件夹下以模块名为前缀的对应视图。</p>
<h3 id="2-从模型类型推断是退名"><a href="#2-从模型类型推断是退名" class="headerlink" title="2. 从模型类型推断是退名"></a>2. 从模型类型推断是退名</h3><p>如果没有提供视图名而只提供了视图，那么：</p>
<ul>
<li><code>Customer</code>类型的模型-&gt;<code>Customer</code>视图名</li>
<li><code>CustomerModel</code>类型的模型-&gt; <code>Customer</code>视图名</li>
</ul>
<h3 id="3-自定义约定"><a href="#3-自定义约定" class="headerlink" title="3. 自定义约定"></a>3. 自定义约定</h3><p>自定义一个bootstrapper，然后添加约定到<code>Conventions.ViewLocationConventions</code>集合。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomConventionsBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void ApplicationStartup(TinyIoCContainer container, Nancy.Bootstrapper.IPipelines pipelines)</span><br><span class="line">    &#123;</span><br><span class="line">        this.Conventions.ViewLocationConventions.Add((viewName, model, context) &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            return string.Concat(&quot;custom&#x2F;&quot;, viewName);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如这个会查找custom文件夹下的视图名称。</p>
<p><code>ViewLocationConventions</code>是一个标准的列表，可以进行修改。</p>
<h3 id="3-使用IConventions定义自己的约定"><a href="#3-使用IConventions定义自己的约定" class="headerlink" title="3. 使用IConventions定义自己的约定"></a>3. 使用IConventions定义自己的约定</h3><p>你也可以实现<code>IConvention</code>接口，并在<code>Initialise</code>方法中添加约定到<code>ViewLocationConventions</code>属性中。</p>
<p>Nancy会定位所有接口的实现，并且执行约定，这些发生在他们被传递给bootstrapper的<code>ConfigureConventions</code>方法之前。</p>
<h2 id="十五、本地化"><a href="#十五、本地化" class="headerlink" title="十五、本地化"></a>十五、本地化</h2><p>Nancy内建了本地化。有一系列的<a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Conventions/DefaultCultureConventions.cs" target="_blank" rel="noopener">约定</a>描述了如何决定当前文化，还有一些根据文化选择视图的<a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Conventions/DefaultViewLocationConventions.cs" target="_blank" rel="noopener">约定</a>。</p>
<p>所以，对于<code>de-DE</code>的文化他会寻找<code>Home-de-DE</code>的视图。</p>
<p>不仅如此，还会有rese文件，比如<code>Text.resx</code>， <code>Text.de-DE.resx</code>（可以被<a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Localization/ResourceBasedTextResource.cs" target="_blank" rel="noopener">重写</a>).</p>
<p>Razor本地化的<a href="https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Demo.Razor.Localization" target="_blank" rel="noopener">例子</a></p>
<h2 id="十六、测试应用"><a href="#十六、测试应用" class="headerlink" title="十六、测试应用"></a>十六、测试应用</h2><p>使用<a href="http://nuget.org/" target="_blank" rel="noopener">NuGet</a>来安装<code>Nancy.Testing</code>。</p>
<p>测试应当与主应用分开。</p>
<p>为了测试路由，使用helper类<code>Browser</code>。使用bootstrap实例化Browser。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Fact]</span><br><span class="line">public void Should_return_status_ok_when_route_exists()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Given</span><br><span class="line">    var bootstrapper &#x3D; new DefaultNancyBootstrapper();</span><br><span class="line">    var browser &#x3D; new Browser(bootstrapper);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; When</span><br><span class="line">    var result &#x3D; browser.Get(&quot;&#x2F;&quot;, with &#x3D;&gt; &#123;</span><br><span class="line">        with.HttpRequest();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Then</span><br><span class="line">    Assert.Equal(HttpStatusCode.OK, result.StatusCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="十七、根路径"><a href="#十七、根路径" class="headerlink" title="十七、根路径"></a>十七、根路径</h2><p>Nancy通过<code>IRootPathProvider</code>接口的唯一方法<code>GetRootPath</code>来确定根路径。</p>
<h3 id="1-改变跟路径"><a href="#1-改变跟路径" class="headerlink" title="1. 改变跟路径"></a>1. 改变跟路径</h3><p>改变根路径需要做两件事：</p>
<p>首先，自定义一个类实现<code>IRootPathProvider</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomRootPathProvider : IRootPathProvider</span><br><span class="line">&#123;</span><br><span class="line">    public string GetRootPath()</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;What ever path you want to use as your application root&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，根路径是绝对路径。</p>
<p>其次，在自定义的Bootstrapper中重写<code>RootPathProvider</code>属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override IRootPathProvider RootPathProvider</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return new CustomRootPathProvider(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-上传文件"><a href="#2-上传文件" class="headerlink" title="2. 上传文件"></a>2. 上传文件</h3><p>在Nancy中要上传文件，你需要接受上传文件的content stream, 在磁盘上创建文件，并将stream写入到磁盘。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var uploadDirectory &#x3D;  Path.Combine(pathProvider.GetRootPath(), &quot;Content&quot;, &quot;uploads&quot;);</span><br><span class="line"></span><br><span class="line">if (!Directory.Exists(uploadDirectory))</span><br><span class="line">&#123;</span><br><span class="line">    Directory.CreateDirectory(uploadDirectory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (var file in Request.Files)</span><br><span class="line">&#123;</span><br><span class="line">    var filename &#x3D; Path.Combine(uploadDirectory, file.Name);</span><br><span class="line">    using (FileStream fileStream &#x3D; new FileStream(filename, FileMode.Create))</span><br><span class="line">    &#123;</span><br><span class="line">        file.Value.CopyTo(fileStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中的<code>pathProvider</code>是在模块的构造函数中传递进来的，通过它的<code>GetRootPath()</code>来获取跟路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public HomeModule(IRootPathProvider pathProvider)</span><br></pre></td></tr></table></figure>


<h2 id="十八、管理静态内容"><a href="#十八、管理静态内容" class="headerlink" title="十八、管理静态内容"></a>十八、管理静态内容</h2><p><strong>简而言之：把东西都放到<code>/Content</code>文件夹内，仅此而已</strong></p>
<h2 id="十九、诊断"><a href="#十九、诊断" class="headerlink" title="十九、诊断"></a>十九、诊断</h2><p>Nancy自带诊断功能：<code>http://&lt;address-of-your-application&gt;/_Nancy/</code></p>
<h3 id="1-配置到dashboard的访问"><a href="#1-配置到dashboard的访问" class="headerlink" title="1. 配置到dashboard的访问"></a>1. 配置到dashboard的访问</h3><p>添加密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override DiagnosticsConfiguration DiagnosticsConfiguration</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return new DiagnosticsConfiguration &#123; Password &#x3D; @&quot;A2\6mVtH&#x2F;XRT\p,B&quot;&#125;; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-去除诊断"><a href="#2-去除诊断" class="headerlink" title="2. 去除诊断"></a>2. 去除诊断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void ApplicationStartup(TinyIoc.TinyIoCContainer container, IPipelines pipelines)</span><br><span class="line">    &#123;</span><br><span class="line">        DiagnosticsHook.Disable(pipelines);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-有哪些工具呢？"><a href="#3-有哪些工具呢？" class="headerlink" title="3. 有哪些工具呢？"></a>3. 有哪些工具呢？</h3><p><code>Information</code>, <code>Interactive Diagnostics</code>, <code>Request Tracing</code>, <code>Configuration</code></p>
<h4 id="3-1-信息"><a href="#3-1-信息" class="headerlink" title="3.1 信息"></a>3.1 信息</h4><h4 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h4><p>Nancy中<code>StaticConfiguration</code>可以用来配置程序的行为，配置页面提供了配置方法。</p>
<p>注意，系统重启后配置页面的内容失效。</p>
<p>要想永久保存配置，请在bootstrapper的<code>ApplicationStartup</code>中设置。</p>
<h4 id="3-3-请求跟踪"><a href="#3-3-请求跟踪" class="headerlink" title="3.3 请求跟踪"></a>3.3 请求跟踪</h4><p>请求跟踪因为性能原因默认关闭，可以再<code>Configuration</code>页开启，也可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CustomBootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void ApplicationStartup(TinyIoC.TinyIoCContainer container, IPipelines pipelines)</span><br><span class="line">    &#123;</span><br><span class="line">        StaticConfiguration.EnableRequestTracing &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟踪日志可以通过<code>NancyContext</code>中得到。和容易添加自己的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HomeModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public HomeModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Get[&quot;&#x2F;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">            this.Context.Trace.TraceLog.WriteLog(s &#x3D;&gt; s.AppendLine(&quot;Root path was called&quot;));</span><br><span class="line">            return HttpStatusCode.Ok;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>WriteLog</code>方法是用一个接受<code>StringBuilder</code>的函数是为了调试关闭时直接不调用函数，从而避免性能损耗。</p>
<h4 id="3-4-交互式的诊断"><a href="#3-4-交互式的诊断" class="headerlink" title="3.4 交互式的诊断"></a>3.4 交互式的诊断</h4><p>只要实现了<code>IDiagnosticsProvider</code>接口，Nancy诊断会自动发现它，并且把它暴露给交互工具。</p>
<h5 id="（1）IDiagnosticsProvider接口"><a href="#（1）IDiagnosticsProvider接口" class="headerlink" title="（1）IDiagnosticsProvider接口"></a>（1）IDiagnosticsProvider接口</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Defines the functionality a diagnostics provider.</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IDiagnosticsProvider</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets the name of the provider.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;value&gt;A &lt;see cref&#x3D;&quot;string&quot;&#x2F;&gt; containing the name of the provider.&lt;&#x2F;value&gt;</span><br><span class="line">   string Name &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">   &#x2F;&#x2F;&#x2F; Gets the description of the provider.</span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;value&gt;A &lt;see cref&#x3D;&quot;string&quot;&#x2F;&gt; containing the description of the provider.&lt;&#x2F;value&gt;</span><br><span class="line">   string Description &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">   &#x2F;&#x2F;&#x2F; Gets the object that contains the interactive diagnostics methods.</span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">   &#x2F;&#x2F;&#x2F; &lt;value&gt;An instance of the interactive diagnostics object.&lt;&#x2F;value&gt;</span><br><span class="line">   object DiagnosticObject &#123; get; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="（2）可诊断的对象"><a href="#（2）可诊断的对象" class="headerlink" title="（2）可诊断的对象"></a>（2）可诊断的对象</h5><p>任何公共方法都会暴露给交互诊断面板。方法可以是能被JSON序列化的任意类型。类型的返回值会被返回成<a href="http://www.servicestack.net/docs/framework/json-report-format" target="_blank" rel="noopener">JSON Report Format</a></p>
<h5 id="（3）提供描述给方法"><a href="#（3）提供描述给方法" class="headerlink" title="（3）提供描述给方法"></a>（3）提供描述给方法</h5><p>两种方法：<br>1、使用attribute: <code>Nancy.Diagnostics.DescriptionAttribute</code></p>
<p>2、使用property：使用与方法同名但添加了<code>Description</code>后缀的属性，比如<code>NameOfYourMethodDescription</code>描述了<code>NameOfYourMethod</code>方法。</p>
<h5 id="（4）自定义模板输出"><a href="#（4）自定义模板输出" class="headerlink" title="（4）自定义模板输出"></a>（4）自定义模板输出</h5><h5 id="（5）创建诊断提供者"><a href="#（5）创建诊断提供者" class="headerlink" title="（5）创建诊断提供者"></a>（5）创建诊断提供者</h5><h2 id="二十、添加自己的favicon"><a href="#二十、添加自己的favicon" class="headerlink" title="二十、添加自己的favicon"></a>二十、添加自己的favicon</h2><h3 id="1-替换默认的FavIcon"><a href="#1-替换默认的FavIcon" class="headerlink" title="1. 替换默认的FavIcon"></a>1. 替换默认的FavIcon</h3><p>在应用中防止一个_favicon_的文件，名称以<code>.icon</code>或<code>.png</code>结尾即可。</p>
<h3 id="2-使用内嵌icon"><a href="#2-使用内嵌icon" class="headerlink" title="2. 使用内嵌icon"></a>2. 使用内嵌icon</h3><p>在Bootstrapper中重写<code>FavIcon</code>属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Bootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    private byte[] favicon;</span><br><span class="line"></span><br><span class="line">    protected override byte[] FavIcon</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; return this.favicon?? (this.favicon&#x3D; LoadFavIcon()); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private byte[] LoadFavIcon()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;TODO: remember to replace &#39;AssemblyName&#39; with the prefix of the resource</span><br><span class="line">        using (var resourceStream &#x3D; GetType().Assembly.GetManifestResourceStream(&quot;AssemblyName.favicon.ico&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            var tempFavicon &#x3D; new byte[resourceStream.Length];</span><br><span class="line">            resourceStream.Read(tempFavicon, 0, (int)resourceStream.Length);</span><br><span class="line">            return tempFavicon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-移除ICON"><a href="#3-移除ICON" class="headerlink" title="3. 移除ICON"></a>3. 移除ICON</h3><p>设置Bootstrapper的<code>FavIcon</code>属性为<code>null</code>。</p>
<h2 id="二十一、添加自定义的错误页面"><a href="#二十一、添加自定义的错误页面" class="headerlink" title="二十一、添加自定义的错误页面"></a>二十一、添加自定义的错误页面</h2><p>第一篇:<a href="http://mike-ward.net/blog/post/00824/custom-error-pages-in-nancyfx" target="_blank" rel="noopener">http://mike-ward.net/blog/post/00824/custom-error-pages-in-nancyfx</a></p>
<p>第二篇：<a href="https://blog.tommyparnell.com/custom-error-pages-in-nancy/" target="_blank" rel="noopener">https://blog.tommyparnell.com/custom-error-pages-in-nancy/</a></p>
<h2 id="二十二、加密帮助方法"><a href="#二十二、加密帮助方法" class="headerlink" title="二十二、加密帮助方法"></a>二十二、加密帮助方法</h2><p>命名空间:<code>Nancy.Cryptography</code></p>
<h3 id="1-IEncryptionProvider-接口"><a href="#1-IEncryptionProvider-接口" class="headerlink" title="1. IEncryptionProvider 接口"></a>1. IEncryptionProvider 接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Provides symmetrical encryption support</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IEncryptionProvider</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Encrypt and base64 encode the string</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;data&quot;&gt;Data to encrypt&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Encrypted string&lt;&#x2F;returns&gt;</span><br><span class="line">    string Encrypt(string data);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Decrypt string</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;data&quot;&gt;Data to decrypt&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Decrypted string&lt;&#x2F;returns&gt;</span><br><span class="line">    string Decrypt(string data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nancy提供了两个默认实现</p>
<ul>
<li><code>NoEncryptionProvider</code>:没有加密，仅仅是base64</li>
<li><code>RijndaelEncryptionProvider</code>: 使用Rijndael算法，使用256位的key和128为的初始向量，加密base64字符串。</li>
</ul>
<h3 id="2-IHmacProvider-接口"><a href="#2-IHmacProvider-接口" class="headerlink" title="2. IHmacProvider 接口"></a>2. IHmacProvider 接口</h3><p>用来签名，防止篡改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Creates Hash-based Message Authentication Codes (HMACs)</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IHmacProvider</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets the length of the HMAC signature in bytes</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    int HmacLength &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Create a hmac from the given data</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;data&quot;&gt;Data to create hmac from&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Hmac bytes&lt;&#x2F;returns&gt;</span><br><span class="line">    byte[] GenerateHmac(string data);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Create a hmac from the given data</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;data&quot;&gt;Data to create hmac from&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Hmac bytes&lt;&#x2F;returns&gt;</span><br><span class="line">    byte[] GenerateHmac(byte[] data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nancy也提供了一个默认实现：<code>DefaultHmacProvider</code>，使用<code>IKeyGenerator</code>来产生一个key来用SHA-256来进行hash。</p>
<h3 id="3-IKeyGenerator-接口"><a href="#3-IKeyGenerator-接口" class="headerlink" title="3. IKeyGenerator 接口"></a>3. IKeyGenerator 接口</h3><p>用来产生key来加密和数字签名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Provides key byte generation</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IKeyGenerator</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Generate a sequence of bytes</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;count&quot;&gt;Number of bytes to return&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Array &lt;see cref&#x3D;&quot;count&quot;&#x2F;&gt; bytes&lt;&#x2F;returns&gt;</span><br><span class="line">    byte[] GetBytes(int count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nancy提供了两个默认实现。</p>
<ul>
<li><p><code>RandomKeyGenerator</code>使用<code>RNGCryptoServiceProvider</code>产生了一个随机定长的key</p>
</li>
<li><p><code>PassphraseKeyGenerator</code>使用密码、静态盐以及可选循环数字，以及<code>Rfc2898DeriveBytes</code>来产生一个key</p>
</li>
</ul>
<p><strong>注意</strong>，如果使用<code>PassphraseKeyGenerator</code>，它的初始化应当在应用启动时使用，因为它太慢了。这意味着盐是静态的，因此密码一定要足够长和复杂。</p>
<h3 id="4-加密配置类型CryptographyConfiguration"><a href="#4-加密配置类型CryptographyConfiguration" class="headerlink" title="4. 加密配置类型CryptographyConfiguration"></a>4. 加密配置类型CryptographyConfiguration</h3><p>这是一个存储<code>IEncryptionProvider</code>和<code>IHmacProvider</code>的简便方法。它有两个静态属性：</p>
<ul>
<li><code>Default</code>使用<code>RijndaelEncryptionProvider</code>和<code>DefaultHmacProvider</code>，两个都使用<code>RandomKeyGenerator</code>。</li>
<li><code>NoEncryption</code>使用<code>NoEncryption</code>和<code>DefaultHmacProvider</code>，两个也都使用<code>RandomKeyGenerator</code>.</li>
</ul>
<p>可以单独使用<code>CryptographyConfiguration</code>，也可以在bootstrapper中配置一个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Gets the cryptography configuration</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">protected virtual CryptographyConfiguration CryptographyConfiguration</span><br><span class="line">&#123;</span><br><span class="line">    get &#123; return CryptographyConfiguration.Default; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二十三、Content-negotiation-内容协商"><a href="#二十三、Content-negotiation-内容协商" class="headerlink" title="二十三、Content negotiation(内容协商)"></a>二十三、Content negotiation(内容协商)</h2><p>当返回不是<code>Response</code>类型时，使用response processor来根据请求的<code>Accept</code>来处理。</p>
<p>###1. Response Processor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IResponseProcessor</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets a set of mappings that map a given extension (such as .json)</span><br><span class="line">    &#x2F;&#x2F;&#x2F; to a media range that can be sent to the client in a vary header.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    IEnumerable&lt;Tuple&lt;string, MediaRange&gt;&gt; ExtensionMappings &#123; get; &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Determines whether the the processor can handle a given content type and model.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    ProcessorMatch CanProcess(MediaRange requestedMediaRange, dynamic model, NancyContext context);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Process the response.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    Response Process(MediaRange requestedMediaRange, dynamic model, NancyContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Response Processor是自发现的，也可以在Bootstrap中配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Bootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override NancyInternalConfiguration InternalConfiguration</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            var processors &#x3D; new[]</span><br><span class="line">            &#123;</span><br><span class="line">                typeof(SomeProcessor),</span><br><span class="line">                typeof(AnotherProcessor)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            return NancyInternalConfiguration.WithOverrides(x &#x3D;&gt; x.ResponseProcessors &#x3D; processors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-匹配优先级"><a href="#1-1-匹配优先级" class="headerlink" title="1.1 匹配优先级"></a>1.1 匹配优先级</h4><p>当相应准备转化请求媒体的格式时，Nancy会查询所有的processor的<code>CanProcess</code>方法，并且会聚合<code>ProcessorMatch</code>的返回值。</p>
<p><code>ProcessorMatch</code>类型确保每个processor让Nancy知道它们对媒体类型的支持程度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ProcessorMatch</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets or sets the match result based on the content type</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public MatchResult RequestedContentTypeResult &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets or sets the match result based on the model</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public MatchResult ModelResult &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MatchResult</code>枚举了匹配程度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum MatchResult</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; No match, nothing to see here, move along</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    NoMatch,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Will accept anything</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    DontCare,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Matched, but in a non-specific way such as a wildcard match or fallback</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    NonExactMatch,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Exact specific match</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    ExactMatch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有的<code>ProcessorMatch</code>会按照Match程度降序排列，最匹配的被执行。如果有两个匹配程度相同，Nancy会选择其中一个。</p>
<h4 id="1-2-默认响应处理器"><a href="#1-2-默认响应处理器" class="headerlink" title="1.2 默认响应处理器"></a>1.2 默认响应处理器</h4><p>Nancy提供了一些默认响应处理器</p>
<ul>
<li><code>JsonProcessor</code> - 当请求类型为<code>application/json</code>或者<code>application/vnd.foobar+json</code>时，转化返回值为json；</li>
<li><code>ViewProcessor</code> - 当请求类型为<code>text/html</code>时，使用返回值作为model，返回视图。视图使用<a href="https://github.com/NancyFx/Nancy/wiki/View-location-conventions" target="_blank" rel="noopener">视图位置约定</a>；</li>
<li><code>XmlProcessor</code> - 当请求为<code>application/xml</code>或者为<code>application/vnd.foobar+xml</code>时，返回xml。</li>
</ul>
<h3 id="2-控制协商"><a href="#2-控制协商" class="headerlink" title="2. 控制协商"></a>2. 控制协商</h3><p><code>Nancy.Responses.Negotiation</code>命名空间中的<code>Negotiator</code>用来控制协商。<code>Negotiator</code>有一个属性：<code>NegotiationContext</code>. <code>NegotiationContext</code>可以用来控制响应的协商。</p>
<p>但是一般不会直接使用<code>Negotiator</code>和<code>NegotiationContext</code>，因为<code>NancyModule</code>包含了一个帮助方法<code>Negotiate</code>，用来更好的创造<code>Negotiator</code>实例。</p>
<p>在路由中使用<code>Negotiator</code>的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return Negotiate</span><br><span class="line">        .WithModel(new RatPack &#123;FirstName &#x3D; &quot;Nancy &quot;&#125;)</span><br><span class="line">        .WithMediaRangeModel(&quot;text&#x2F;html&quot;, new RatPack &#123;FirstName &#x3D; &quot;Nancy fancy pants&quot;&#125;)</span><br><span class="line">        .WithView(&quot;negotiatedview&quot;)</span><br><span class="line">        .WithHeader(&quot;X-Custom&quot;, &quot;SomeValue&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Negotiator</code>包含了用来配置返回<code>Negotiator</code>实例的一些方法。</p>
<ul>
<li><code>WithHeader</code> - 添加一个Http头；</li>
<li><code>WithHeaders</code> - 添加一个Http的头集合；</li>
<li><code>WithView</code> - 使用视图；</li>
<li><code>WithModel</code> - 使用模型；</li>
<li><code>WithMediaRangeModel</code> - 使用特定的媒体类型和模型，如果失败了，就使用<code>WithModel</code>指定的模型；</li>
<li><code>WithFullNegotiation</code> - 设置允许媒体类型为<code>*/*</code>的帮助方法；</li>
<li><code>WithAllowedMediaRange</code> - 指定允许的媒体范围。默认是”/“,但是一旦指定一个特定的内容类型，通配符就会被移走。</li>
<li><code>WithStatusCode</code> - 状态码</li>
</ul>
<h3 id="3-支持文件扩展名"><a href="#3-支持文件扩展名" class="headerlink" title="3. 支持文件扩展名"></a>3. 支持文件扩展名</h3><p>Nancy支持基于扩展名来设置协商的处理，此时传递正常的可接受的头。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get[&quot;&#x2F;ratpack&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">    return new RatPack &#123;FirstName &#x3D; &quot;Nancy &quot;&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>它既可以通过<code>/ratpack</code>和设置的<code>application/json</code>头来调用，也可以使用<code>/ratpack.json</code>并且不设置<code>application/json</code>来调用，两个结果一样。</p>
<p>内部Nancy是通过检测扩展名，并查询可用的响应处理器的<code>ExtensionMappings</code>属性来查看是否有支持的扩展。如果有，就调用并且设置对应的头信息，但是如果有更优先的处理器，则用更优先的处理器，除非更优先的处理器失败了，才会使用扩展。</p>
<h3 id="4-强制可接受的头-Accept-Header"><a href="#4-强制可接受的头-Accept-Header" class="headerlink" title="4. 强制可接受的头(Accept Header)"></a>4. 强制可接受的头(Accept Header)</h3><p>约定的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Func&lt;</span><br><span class="line">   IEnumerable&lt;Tuple&lt;string, decimal&gt;&gt;,</span><br><span class="line">   NancyContext,</span><br><span class="line">   IEnumerable&lt;Tuple&lt;string, decimal&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>这个函数接受<code>NancyContext</code>和当前头，并且期望你返回修改后的可接受头列表。</p>
<p>默认情况下，Nancy在<code>Nancy.Conventions.BuiltInAcceptHeaderCoercions class</code>中提供了如下约定，其中加*的表示是默认默认被转换的：</p>
<ul>
<li><code>BoostHtml</code>(*) - 如果text/html的优先级低于其他内容类型，则提高优先级；</li>
<li><code>CoerceBlankAcceptHeader</code>(*) - 如果没有指定请求头，就分配一个默认的；</li>
<li><code>CoerceStupidBrowsers</code> - 对于老浏览器，替换请求头，即使它们说是请求xml还是返回html。</li>
</ul>
<p>更改哪一个强制起作用时在bootstrapper中的<code>ConfigureConventions</code>来设置的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Bootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void ConfigureConventions(NancyConventions nancyConventions)</span><br><span class="line">    &#123;</span><br><span class="line">        base.ConfigureConventions(nancyConventions);</span><br><span class="line"></span><br><span class="line">        this.Conventions.AcceptHeaderCoercionConventions.Add((acceptHeaders, ctx) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Modify the acceptHeaders by adding, removing or updating the current</span><br><span class="line">            &#x2F;&#x2F; values.</span><br><span class="line"></span><br><span class="line">            return acceptHeaders;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然你也可以继承你自己的bootstrapper。</p>
<h3 id="5-使用IConventions来定义自己的约定"><a href="#5-使用IConventions来定义自己的约定" class="headerlink" title="5. 使用IConventions来定义自己的约定"></a>5. 使用IConventions来定义自己的约定</h3><p>可以通过实现<code>IConventions</code>接口来创造一个类，并在它的<code>Initialise</code>方法中添加自己的约定到传递进来的参数的<code>AcceptHeaderCoercionConventions</code>属性中。</p>
<p>在所有的接口被传递给bootstrapper的<code>ConfigureConventions</code>的方法之前，Nancy会定位所有的接口实现，并且激发这些约定。</p>
<h3 id="6-自动协商头"><a href="#6-自动协商头" class="headerlink" title="6. 自动协商头"></a>6. 自动协商头</h3><p>Nancy会自动添加链接和各种各样的头到协商响应中。链接头链接。连接头会连接到根据文件扩展来的其他代表中。</p>
<h3 id="7-更多信息"><a href="#7-更多信息" class="headerlink" title="7. 更多信息"></a>7. 更多信息</h3><ul>
<li><a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation/" target="_blank" rel="noopener">Nancy and Content Negotiation</a></li>
<li><a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/" target="_blank" rel="noopener">Revisting Content Negotiation and APIs part 1</a></li>
<li><a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/" target="_blank" rel="noopener">Revisting Content Negotiation and APIs part 2</a></li>
<li><a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/" target="_blank" rel="noopener">Revisting Content Negotiation and APIs part 3</a></li>
</ul>
<h2 id="二十四、使用转换器来扩展序列化"><a href="#二十四、使用转换器来扩展序列化" class="headerlink" title="二十四、使用转换器来扩展序列化"></a>二十四、使用转换器来扩展序列化</h2><h2 id="二十五、授权"><a href="#二十五、授权" class="headerlink" title="二十五、授权"></a>二十五、授权</h2><p>Nancy中的验证使用扩展点：比如应用管道、模块管道、<code>NancyContext</code>和其他的一些扩展方法。所以你可以写自己的验证来替换默认提供的验证。</p>
<p>Nancy提供了以下几种验证，通过Nuget安装：</p>
<ul>
<li>表单(<code>Nancy.Authentication.Forms</code>)</li>
<li>基本(<code>Nancy.Authentication.Basic</code>)</li>
<li>无状态(<code>Nancy.Authentication.Stateless</code>)</li>
</ul>
<h3 id="1-了解用户"><a href="#1-了解用户" class="headerlink" title="1. 了解用户"></a>1. 了解用户</h3><p>Nancy中用户使用<code>IUserIdentity</code>接口代表，它提供了一些用户的基本信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IUserIdentity</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets or sets the name of the current user.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    string UserName &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Gets or set the claims of the current user.</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    IEnumerable&lt;string&gt; Claims &#123; get; set; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你应当提供基于自己应用需求的类来实现自己的用户接口。</p>
<p>要获得当前用户，只需要获取<code>NancyContext</code>的<code>CurrentUser</code>属性。返回<code>null</code>值表明当前请求未认证，其他的则表示已认证。</p>
<p>context在Nancy的大部分地方都能获取，所以不必担心能否获取当前请求的用户身份。</p>
<h3 id="2-保护你的资源"><a href="#2-保护你的资源" class="headerlink" title="2. 保护你的资源"></a>2. 保护你的资源</h3><p>可以在模块级和应用级来保护资源，方法是检测<code>NancyContext.CurrentUser</code>属性不为null。</p>
<p>这个任务可以通过在<a href="https://github.com/NancyFx/Nancy/wiki/The%20before%20and%20after%20module%20hooks" target="_blank" rel="noopener">模块管道</a>的<code>Before</code>中实现。这个钩子允许我们终结当前请求的执行，返回其它资源，比如当未验证用户视图访问安全资源时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SecureModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public SecureModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Before +&#x3D; ctx &#x3D;&gt; &#123;</span><br><span class="line">            return (this.Context.CurrentUser &#x3D;&#x3D; null) ? new HtmlResponse(HttpStatusCode.Unauthorized) : null;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Your routes here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在每个模块上添加安全代码违反了DRY原则，更是一个无聊的任务。使用扩展方法！</p>
<p>Nancy有一些扩展方法包装了这些任务，彻底的减少了要写的代码量。</p>
<p>下面是一些可用的扩展方法：</p>
<ul>
<li><code>RequiresAuthentication</code> - 确保验证用户是可用的，或者返回<code>HttpStatusCode.Unauthorized</code>. 对于认证的用户，<code>CurrentUser</code>不能为<code>null</code>，而且<code>UserName</code>不能为空；</li>
<li><code>RequiresClaims</code> - 用户必须满足声明列表中所有的条件才能获取资源；</li>
<li><code>RequiresAnyClaim</code> - 见上一条，但是只需满足任意一条；</li>
<li><code>RequiresValidatedClaims</code> - 通过自定义函数，来全部自我掌控验证流程，函数格式<code>Func&lt;IEnumerable&lt;string&gt;, bool&gt;</code>；</li>
<li><code>RequiresHttps</code> - 只允许https访问；</li>
</ul>
<p>这些都是<code>NancyModule</code>类的扩展方法，要使用它们需要添加<code>Nancy.Security</code>命名空间。</p>
<p>使用扩展方法，前面的例子可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SecureModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public SecureModule()</span><br><span class="line">    &#123;</span><br><span class="line">        this.RequiresAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Your routes here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然还可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SecureModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public SecureModule()</span><br><span class="line">    &#123;</span><br><span class="line">        this.RequiresHttps();</span><br><span class="line">        this.RequiresAuthentication();</span><br><span class="line">        this.RequiresClaims(new [] &#123; &quot;Admin&quot; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Your routes here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户必须通过https，被授权，而且拥有Admin claim才能访问上面的路由。</p>
<h3 id="3-创造你自己的安全扩展"><a href="#3-创造你自己的安全扩展" class="headerlink" title="3. 创造你自己的安全扩展"></a>3. 创造你自己的安全扩展</h3><p>为了创造自己的安全扩展，你只需要添加扩展方法到<code>NancyModule</code>，并且绑定到<code>Before</code>管道，并检查证书。</p>
<p>比如，下面说明了<code>RequiresAuthentication</code>如何工作的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static class ModuleSecurity</span><br><span class="line">&#123;</span><br><span class="line">    public static void RequiresAuthentication(this NancyModule module)</span><br><span class="line">    &#123;</span><br><span class="line">        module.Before.AddItemToEndOfPipeline(RequiresAuthentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Response RequiresAuthentication(NancyContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        Response response &#x3D; null;</span><br><span class="line">        if ((context.CurrentUser &#x3D;&#x3D; null) ||</span><br><span class="line">            String.IsNullOrWhiteSpace(context.CurrentUser.UserName))</span><br><span class="line">        &#123;</span><br><span class="line">            response &#x3D; new Response &#123; StatusCode &#x3D; HttpStatusCode.Unauthorized &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-实现自己的验证provider"><a href="#4-实现自己的验证provider" class="headerlink" title="4. 实现自己的验证provider"></a>4. 实现自己的验证provider</h3><p>实际的验证provider实现根据不同的需求变化很大，但是基本模式如下：</p>
<ol>
<li><a href="https://github.com/NancyFx/Nancy/wiki/The%20Application%20Before,%20After%20and%20OnError%20pipelines" target="_blank" rel="noopener">应用管道</a>的<code>Before</code>钩子用来检查请求的证书（比如cookie, headers等等）。如果发现证书，则验证用户并授权给<code>NancyContext</code>的<code>CurrentUser</code>属性。</li>
<li><a href="https://github.com/NancyFx/Nancy/wiki/The%20before%20and%20after%20module%20hooks" target="_blank" rel="noopener">模块管道</a>的<code>Before</code>钩子用来确认当前的请求是被认证的用户执行，如果不是，则拒绝并返回<code>HttpStatusCode.Unauthorized</code></li>
<li><a href="https://github.com/NancyFx/Nancy/wiki/The%20Application%20Before,%20After%20and%20OnError%20pipelines" target="_blank" rel="noopener">应用管道</a>的<code>After</code>钩子用来检查请求是否因为认证失败而被丢弃，比如检查<code>HttpStatusCode.Unauthorized</code>(401)状态码。如果检测到了就帮助用户去认证，比如重定向到login表单或者使用header的帮助通知客户端。</li>
</ol>
<h3 id="5-无状态认证"><a href="#5-无状态认证" class="headerlink" title="5. 无状态认证"></a>5. 无状态认证</h3><p>无状态认证就是在每个请求中进行检查，根据请求的一些信息，来决定是否应该被确认为一个已认证的请求。</p>
<p>比如你检查请求来确认查询字符串的参数是否传递了api key，或者是否包含某些head， 有或者请求是否来自某些特定的ip。</p>
<p>使用无状态认证需要做下面几件事：</p>
<ol>
<li>安装<code>Nancy.Authentication.Stateless</code>包</li>
<li>配置并开启无状态认证</li>
<li><a href="https://github.com/NancyFx/Nancy/wiki/Authentication-overview" target="_blank" rel="noopener">保护资源</a></li>
</ol>
<h4 id="5-1-配置并开启无状态认证"><a href="#5-1-配置并开启无状态认证" class="headerlink" title="5.1 配置并开启无状态认证"></a>5.1 配置并开启无状态认证</h4><p>在bootstrapper中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StatelessAuthentication.Enable(pipelines, statelessAuthConfiguration);</span><br></pre></td></tr></table></figure>

<p>被传递到<code>StatelessAuthentication.Enable</code>方法中的<code>statelessAuthConfiguration</code>变量，是一个<code>StatelessAuthenticationConfiguration</code>类型的实例，它能够让你自定义无状态认证提供者的行为。</p>
<p>定义<code>StatelessAuthenticationConfiguration</code>类型实例的时候，需要有一个<code>Func&lt;NancyContext, IUserIdentity&gt;</code>类型的参数。这个函数用来检查请求或者context中的其他相关内容，并且在请求未通过验证时返回<code>null</code>，否则返回合适的<a href="https://github.com/NancyFx/Nancy/wiki/Authentication-overview" target="_blank" rel="noopener"><code>IUserIdentity</code></a>.</p>
<h4 id="5-2-简单配置"><a href="#5-2-简单配置" class="headerlink" title="5.2 简单配置"></a>5.2 简单配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var configuration &#x3D;</span><br><span class="line">    new StatelessAuthenticationConfiguration(ctx &#x3D;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        if (!ctx.Request.Query.apikey.HasValue)</span><br><span class="line">        &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; This would where you authenticated the request. IUserApiMapper is</span><br><span class="line">        &#x2F;&#x2F; not a Nancy type.</span><br><span class="line">        var userValidator &#x3D; </span><br><span class="line">            container.Resolve&lt;IUserApiMapper&gt;();</span><br><span class="line"></span><br><span class="line">        return userValidator.GetUserFromAccessToken(ctx.Request.Query.apikey);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-Form认证"><a href="#6-Form认证" class="headerlink" title="6. Form认证"></a>6. Form认证</h3><p>详细例子见Nancy解决方案中<code>Nancy.Demo.Authentication.Forms</code>例子</p>
<p>为了开启form认证，需要完成：</p>
<ol>
<li>安装<code>Nancy.Authentication.Forms</code>包</li>
<li>实现<code>IUserMapper</code></li>
<li>实现路由来处理login和logout</li>
<li>配置并开启Form认证</li>
</ol>
<h4 id="6-1-User-mapper"><a href="#6-1-User-mapper" class="headerlink" title="6.1 User mapper"></a>6.1 User mapper</h4><p>User mapper用来负责从标示符identifier映射到用户。标示符是一个令牌，被存储在认证cookie中，用来代表执行请求的用户身份，避免每次请求时输入证书。</p>
<p>使用GUID来做标示符，如果用username来做标示符容易被嗅探并攻击。GUID还很难读取，而且每个GUID都不一样，增加了嗅探的难度。</p>
<p>注意，需要知道标示符对每个用户来说都是永久的并且是唯一的。</p>
<p><code>IUserMapper</code>接口的定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IUserMapper</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; Get the real username from an identifier</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;identifier&quot;&gt;User identifier&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;context&quot;&gt;The current NancyFx context&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;Matching populated IUserIdentity object, or empty&lt;&#x2F;returns&gt;</span><br><span class="line">    IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-2-修改应用，处理form认证"><a href="#6-2-修改应用，处理form认证" class="headerlink" title="6.2 修改应用，处理form认证"></a>6.2 修改应用，处理form认证</h4><p>有了<code>IUserMapper</code>后，下一步就是在不需要认证的地方添加login和logout了。</p>
<p>下面是一个模块的基础框架。请注意资源的路径和模块的名称可以使任意的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LoginModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public LoginModule()</span><br><span class="line">    &#123;</span><br><span class="line">        Get[&quot;&#x2F;login&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; Called when the user visits the login page or is redirected here because</span><br><span class="line">            &#x2F;&#x2F; an attempt was made to access a restricted resource. It should return</span><br><span class="line">            &#x2F;&#x2F; the view that contains the login form</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Get[&quot;&#x2F;logout&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; Called when the user clicks the sign out button in the application. Should</span><br><span class="line">            &#x2F;&#x2F; perform one of the Logout actions (see below)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Post[&quot;&#x2F;login&quot;] &#x3D; parameters &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; Called when the user submits the contents of the login form. Should</span><br><span class="line">            &#x2F;&#x2F; validate the user based on the posted form data, and perform one of the</span><br><span class="line">            &#x2F;&#x2F; Login actions (see below)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Nancy.Authentication.Forms</code>命名空间中有一些扩展方法可供使用：</p>
<ul>
<li><code>LoginAndRedirect</code> - 登录用户并重定向用户到他们来时的url。或者也可以提供一个预留的url，用来在没有重定向url时使用。如果使用form提交，注意使用action=””，因为它会保留returnUrl原封不动。</li>
<li><code>LoginWithoutRedirect</code> - 登录用户，并且返回响应和状态码200(ok)</li>
<li><code>Login</code>会调用当前请求的<code>IsAjaxRequest</code>的扩展方法，并且如果不是Ajax调用，则执行<code>LoginAndRedirect</code>方法，否则执行<code>LoginWithoutRedirect</code>方法</li>
<li><code>LogoutAndRedirect</code> - 登出用户，并提供重定向</li>
<li><code>LogoutWithoutRedirect</code> - 登出用户并返回状态码为200(OK)的响应</li>
<li><code>Logout</code>会调用当前请求的<code>IsAjaxRequest</code>方法，如果不是ajax请求，则执行<code>LogoutAndRedirect</code>，否则执行<code>LogoutWithoutRedirect</code></li>
</ul>
<p><strong>注意1：</strong> <code>Nancy.Extensions.RequestExtensions</code>中的<code>IsAjaxRequest</code>扩展方法会检查<code>X-Requested-With</code>头，并且在其包含值<code>XMLHttpRequest</code>时返回true</p>
<p><strong>注意2：</strong> 请确认路径的定义login和logout的页面没有要求使用登录。</p>
<h4 id="6-3-启用form认证"><a href="#6-3-启用form认证" class="headerlink" title="6.3 启用form认证"></a>6.3 启用form认证</h4><p>在bootstrapper中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FormsAuthentication.Enable(pipelines, formsAuthConfiguration);</span><br></pre></td></tr></table></figure>

<p>既可以在<code>ApplicationStartup</code>中又可以在<code>RequestStartup</code>中添加。到底在何处加，取决于<code>IUserMapper</code>，即user mapper到底是有应用级的生命周期还是请求级的生命周期。</p>
<p>传递给<code>FormsAuthentication.Enable</code>方法的<code>formsAuthConfiguration</code>变量是<code>FormsAuthenticationConfiguration</code>类型，它能让你自定义form认证提供者的行为。</p>
<p>比如，下面是一个基本的认证配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var formsAuthConfiguration &#x3D;</span><br><span class="line">new FormsAuthenticationConfiguration()</span><br><span class="line">&#123;</span><br><span class="line">    RedirectUrl &#x3D; &quot;~&#x2F;login&quot;,</span><br><span class="line">    UserMapper &#x3D; container.Resolve&lt;IUserMapper&gt;(),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>下面是一些配置项：</p>
<ul>
<li><code>RedirectingQuerystringKey</code>：默认名是<code>returnUrl</code></li>
<li><code>RedirectingUrl</code>：未认证的用户应当被重定向的url，一般是登录页面<code>~/login</code></li>
<li><code>UserMapper</code>: <code>IUserMapper</code>在认证时应该被使用</li>
<li><code>RequiresSSL</code>: SSL</li>
<li><code>DisableRedirect</code>: 遇到未认证时，是否重定向到登陆页</li>
<li><code>CryptographyConfiguration</code>: <code>CryptographyConfiguration.Default</code>与form认证cookie配合使用。<code>CryptographyConfiguration.Default</code>是默认的。</li>
</ul>
<h4 id="6-4-关于加密，还有一些话"><a href="#6-4-关于加密，还有一些话" class="headerlink" title="6.4 关于加密，还有一些话"></a>6.4 关于加密，还有一些话</h4><p>默认使用<code>RandomKeyGenerator</code>，这意味着每次程序启动时会产生一个新的秘钥，那么应用重启回到这认证cookie失效，在多台机器负载均衡时也会出现这种问题，别怕，看看<a href="https://github.com/NancyFx/Nancy/wiki/The%20cryptography%20helpers" target="_blank" rel="noopener">加密配置</a></p>
<p>下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cryptographyConfiguration &#x3D; new CryptographyConfiguration(</span><br><span class="line">    new RijndaelEncryptionProvider(new PassphraseKeyGenerator(&quot;SuperSecretPass&quot;, new byte[] &#123; 1, 2, 3, 4, 5, 6, 7, 8 &#125;)),</span><br><span class="line">    new DefaultHmacProvider(new PassphraseKeyGenerator(&quot;UberSuperSecure&quot;, new byte[] &#123; 1, 2, 3, 4, 5, 6, 7, 8 &#125;)));</span><br><span class="line"></span><br><span class="line">var config &#x3D; </span><br><span class="line">    new FormsAuthenticationConfiguration()</span><br><span class="line">    &#123;</span><br><span class="line">        CryptographyConfiguration &#x3D; cryptographyConfiguration,</span><br><span class="line">        RedirectUrl &#x3D; &quot;&#x2F;login&quot;,</span><br><span class="line">        UserMapper &#x3D; container.Resolve&lt;IUserMapper&gt;(),</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="6-5-跟多"><a href="#6-5-跟多" class="headerlink" title="6.5 跟多"></a>6.5 跟多</h4><ul>
<li><p><a href="http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/" target="_blank" rel="noopener">Forms authentication with nancyfx</a></p>
</li>
<li><p><a href="http://www.philliphaydon.com/2012/12/configuring-multiple-forms-authentication-sections-with-nancyfx/" target="_blank" rel="noopener">Multiple forms authentication sections</a></p>
</li>
</ul>
<h3 id="7-令牌认证"><a href="#7-令牌认证" class="headerlink" title="7. 令牌认证"></a>7. 令牌认证</h3><p>详细例子在Nancy解决方案中的<code>Nancy.Demo.Authentication.Token</code>中。</p>
<h4 id="7-1-认识Nancy的令牌认证"><a href="#7-1-认识Nancy的令牌认证" class="headerlink" title="7.1 认识Nancy的令牌认证"></a>7.1 认识Nancy的令牌认证</h4><p>Nancy令牌认证工程是为了多种客户端(iOS, Android, Angular SPA等等)能与统一后台Nancy应用而创建的。</p>
<h4 id="7-2-基本原理"><a href="#7-2-基本原理" class="headerlink" title="7.2 基本原理"></a>7.2 基本原理</h4><p>令牌认证与授权在下面这些需求下应运而生：</p>
<ul>
<li>没有cookie（不适所有的客户端都是浏览器）</li>
<li>避免一旦用户被认证/授权后，从后端数据存储中取回用户和权限信息</li>
<li>允许客户端应用在第一次授权后保存令牌，以便为后续请求使用</li>
<li>通过单向加密算法确保令牌没有被篡改，阻止嗅探冒充令牌攻击</li>
<li>使用有期限的可配置的key来进行令牌生成</li>
<li>使用server端的文件系统来存储私钥，这样即使应用重启也能恢复。注意：可以使用内存存储作为测试。</li>
</ul>
<h4 id="7-3-使用"><a href="#7-3-使用" class="headerlink" title="7.3 使用"></a>7.3 使用</h4><h5 id="7-3-1-Nancy配置"><a href="#7-3-1-Nancy配置" class="headerlink" title="7.3.1 Nancy配置"></a>7.3.1 Nancy配置</h5><p>令牌认证可以像form认证那样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Bootstrapper : DefaultNancyBootstrapper</span><br><span class="line">&#123;</span><br><span class="line">    protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        TokenAuthentication.Enable(pipelines, new TokenAuthenticationConfiguration(container.Resolve&lt;ITokenizer&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>令牌从<code>IUserIdentity</code>和<code>NancyContext</code>中，通过实现<code>ITokenizer</code>接口产生。默认实现是<code>Tokenizer</code>，它提供了一些可配置的方法。默认情况下，它产生一个令牌包含下面部分：</p>
<ul>
<li>用户名</li>
<li>Pipe separated list of user claims</li>
<li>UTC当前时间</li>
<li>客户端的”User-Agent”头（必须）</li>
</ul>
<p>建议配置Tokenizer，使用其他附加能代表用户唯一设备的信息。</p>
<p>下面举例说明了如何初始化用户认证，并且返回生成的令牌给客户端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AuthModule : NancyModule</span><br><span class="line">&#123;</span><br><span class="line">    public AuthModule(ITokenizer tokenizer)</span><br><span class="line">        : base(&quot;&#x2F;auth&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        Post[&quot;&#x2F;&quot;] &#x3D; x &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var userName &#x3D; (string)this.Request.Form.UserName;</span><br><span class="line">                var password &#x3D; (string)this.Request.Form.Password;</span><br><span class="line"></span><br><span class="line">                var userIdentity &#x3D; UserDatabase.ValidateUser(userName, password);</span><br><span class="line"></span><br><span class="line">                if (userIdentity &#x3D;&#x3D; null)</span><br><span class="line">                &#123;</span><br><span class="line">                    return HttpStatusCode.Unauthorized;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var token &#x3D; tokenizer.Tokenize(userIdentity, Context);</span><br><span class="line"></span><br><span class="line">                return new</span><br><span class="line">                    &#123;</span><br><span class="line">                        Token &#x3D; token,</span><br><span class="line">                    &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        Get[&quot;&#x2F;validation&quot;] &#x3D; _ &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                this.RequiresAuthentication();</span><br><span class="line">                return &quot;Yay! You are authenticated!&quot;;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        Get[&quot;&#x2F;admin&quot;] &#x3D; _ &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            this.RequiresClaims(new[] &#123; &quot;admin&quot; &#125;);</span><br><span class="line">            return &quot;Yay! You are authorized!&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-3-2-客户端配置"><a href="#7-3-2-客户端配置" class="headerlink" title="7.3.2 客户端配置"></a>7.3.2 客户端配置</h5><p>一旦你的客户端接收到了token，那么你必须使用token来设置HTTP头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Token &#123;your-token-goes-here&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-幕后的工作"><a href="#8-幕后的工作" class="headerlink" title="8. 幕后的工作"></a>8. 幕后的工作</h4><p><a href="https://github.com/NancyFx/Nancy/commit/9ae0a5494bc335c3d940d730ae5d5f18c1018836" target="_blank" rel="noopener">https://github.com/NancyFx/Nancy/commit/9ae0a5494bc335c3d940d730ae5d5f18c1018836</a></p>
]]></content>
      <categories>
        <category>DotNET</category>
      </categories>
      <tags>
        <tag>Nancy, C#, .NET, web</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记01-构建应用</title>
    <url>/2016/08/10/Spring%E7%AC%94%E8%AE%B001-%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-1-一个Spring的简单Java应用"><a href="#1-1-一个Spring的简单Java应用" class="headerlink" title="1.1 一个Spring的简单Java应用"></a>1.1 一个Spring的简单Java应用</h2><h3 id="1-1-1-创建应用"><a href="#1-1-1-创建应用" class="headerlink" title="1.1.1 创建应用"></a>1.1.1 创建应用</h3><p>这里，我们用Gradle创建Spring的应用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group &#39;lx.spring.core&#39;</span><br><span class="line">version &#39;1.0-SNAPSHOT&#39;</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;java&#39;</span><br><span class="line"></span><br><span class="line">sourceCompatibility &#x3D; 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#39;org.springframework&#39;, name: &#39;spring-context&#39;, version: &#39;4.3.2.RELEASE&#39;</span><br><span class="line">    testCompile group: &#39;org.springframework&#39;, name: &#39;spring-test&#39;, version: &#39;4.3.2.RELEASE&#39;</span><br><span class="line">    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.11&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-定义entity"><a href="#1-1-2-定义entity" class="headerlink" title="1.1.2 定义entity"></a>1.1.2 定义entity</h3><p>spring希望我们尽可能的使用接口，因此，我们声明，<code>Team</code>, <code>Game</code>接口，然后创建对应的实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Team &#123;</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Game &#123;</span><br><span class="line">    void setHomeTeam(Team team);</span><br><span class="line">    Team getHomeTeam();</span><br><span class="line">    void setAwayTeam(Team team);</span><br><span class="line">    Team getAwayTeam();</span><br><span class="line">    String playGame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的实现类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Cubs implements Team &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Chicago Cubs&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class RedSox implements Team &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Bostom Red Sox&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Royals implements Team &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return &quot;Kansas City Royals&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BaseballGame implements Game &#123;</span><br><span class="line">    private Team homeTeam;</span><br><span class="line">    private Team awayTeam;</span><br><span class="line"></span><br><span class="line">    public BaseballGame() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BaseballGame(Team homeTeam, Team awayTeam) &#123;</span><br><span class="line">        this.homeTeam &#x3D; homeTeam;</span><br><span class="line">        this.awayTeam &#x3D; awayTeam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Team getHomeTeam() &#123;</span><br><span class="line">        return homeTeam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setHomeTeam(Team homeTeam) &#123;</span><br><span class="line">        this.homeTeam &#x3D; homeTeam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Team getAwayTeam() &#123;</span><br><span class="line">        return awayTeam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setAwayTeam(Team awayTeam) &#123;</span><br><span class="line">        this.awayTeam &#x3D; awayTeam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String playGame() &#123;</span><br><span class="line">        return Math.random() &lt; 0.5 ? getHomeTeam().getName() :</span><br><span class="line">                getAwayTeam().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-使用Java注解来进行调用"><a href="#1-1-3-使用Java注解来进行调用" class="headerlink" title="1.1.3 使用Java注解来进行调用"></a>1.1.3 使用Java注解来进行调用</h3><p>为了让我们的应用能够使用定义的entity，我们需要做配置，配置的方法多种多样，我们这里使用Java对象进行配置，创建一个配置类<code>AppConfig</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        return new BaseballGame(redSox(), cubs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Team redSox() &#123;</span><br><span class="line">        return new RedSox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Team cubs() &#123;</span><br><span class="line">        return new Cubs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>game()</code>方法中调用了<code>redSox()</code>和<code>cubs()</code>方法，后面我们会进行讲解。</p>
<h3 id="1-1-4-运行应用"><a href="#1-1-4-运行应用" class="headerlink" title="1.1.4 运行应用"></a>1.1.4 运行应用</h3><p>现在有了bean和对应的config，我们可以对他们进行调用了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import lx.spring.core.entities.Game;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line">public class RunDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"></span><br><span class="line">        Game game &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">        System.out.println(game.playGame());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见Spring隐藏了细节，让代码变得简单。</p>
<h2 id="1-2-基于Java的配置"><a href="#1-2-基于Java的配置" class="headerlink" title="1.2 基于Java的配置"></a>1.2 基于Java的配置</h2><p>基于Java的配置是目前Spring应用的推荐做法。之前有做法是基于XML进行配置的。</p>
<p>为什么现在推荐用java进行配置呢？</p>
<p>因为这样做能让配置集中，有时候一个java文件就能包含所有配置了。其次，能让IDE进行错误提示。最后，可以利用Java语言的强大功能做一些其他工作。</p>
<p>使用Java进行配置的缺点是你要记住你的源码中有一些是既不属于业务，也不属于repository，而只是配置文件。</p>
<p>我们来看看之前的注解。文档在<a href="http://docs.spring.io/spring/docs/current/javadoc-api/" target="_blank" rel="noopener">http://docs.spring.io/spring/docs/current/javadoc-api/</a> </p>
<h3 id="1-2-1-Configuration注解"><a href="#1-2-1-Configuration注解" class="headerlink" title="1.2.1 @Configuration注解"></a>1.2.1 <code>@Configuration</code>注解</h3><p>文档中关于<code>@Cofiguration</code>注解内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(value&#x3D;TYPE)</span><br><span class="line"> @Retention(value&#x3D;RUNTIME)</span><br><span class="line"> @Documented</span><br><span class="line"> @Component</span><br><span class="line">public @interface Configuration</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime, for example:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">     @Bean</span><br><span class="line">     public MyBean myBean() &#123;</span><br><span class="line">         &#x2F;&#x2F; instantiate, configure and return bean ...</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的<code>public MyBean myBean()</code>方法，在XML中<code>myBean</code>对应ID（每个Bean都有一个唯一的ID），<code>MyBean</code>则对应XML中的类型。也就是说我们有一个叫做<code>myBean</code>的Bean，类型是<code>MyBean</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        return new BaseballGame(redSox(), cubs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Team redSox() &#123;</span><br><span class="line">        return new RedSox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Team cubs() &#123;</span><br><span class="line">        return new Cubs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在我们的例子中，<code>game</code>这个Bean又调用了<code>redSox()</code>和<code>cubs()</code>，后面我们会详细解释Bean的范围。现在我们要知道一件事情就是，基本上，Spring会假设这些类都是单例的，也就是如果实例不存在，就实例化，然后放入Spring Context中，如果实例存在，就返回实例。</p>
<p>要启动一个Spring容器，我们使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; </span><br><span class="line">	new AnnotationConfigApplicationContext(AppConfig.class);</span><br></pre></td></tr></table></figure>

<p>除此之外，我们还可以从Context中获取其他信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取Bean的数量</span><br><span class="line">System.out.println(&quot;Bean的数量&quot; + context.getBeanDefinitionCount());</span><br><span class="line">&#x2F;&#x2F;获取Bean的名称</span><br><span class="line">for (String name :</span><br><span class="line">        context.getBeanDefinitionNames()) &#123;</span><br><span class="line">    System.out.println(name );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bean的数量12</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">appConfig</span><br><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor</span><br><span class="line">org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor</span><br><span class="line">redSox</span><br><span class="line">cubs</span><br><span class="line">game</span><br></pre></td></tr></table></figure>

<p>我们可以看到，除了自己的Bean之外，还有一些其他的基础设施Bean，此外<code>appConfig</code>本身也是一个Bean.</p>
<h3 id="1-2-2-Import和-ImportResource注解"><a href="#1-2-2-Import和-ImportResource注解" class="headerlink" title="1.2.2 @Import和@ImportResource注解"></a>1.2.2 <code>@Import</code>和<code>@ImportResource</code>注解</h3><p>与<code>@Cofiguration</code>能一起用的还有:</p>
<ul>
<li><code>@Import</code> 可以从别的Config中导入配置</li>
<li><code>@ImportResource</code> 从非Java文件中导入配置，比如从XML文件中导入配置</li>
</ul>
<p>这些能够用于项目模块比较多的情况下。</p>
<p>现在，我们新建一个类<code>InfrastructureConfig</code>，一般来说基础设置配置的是数据库连接池、或者其他数据源等。 但是现在我们需要修改<code>build.gradle</code>来添加<code>spring-jdbc</code>依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile group: &#39;org.springframework&#39;, name: &#39;spring-jdbc&#39;, version: &#39;4.3.2.RELEASE&#39;</span><br></pre></td></tr></table></figure>

<p><code>InfrastructureConfig</code>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package lx.spring.core;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class InfrastructureConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource() &#123;</span><br><span class="line">        return new DriverManagerDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以在<code>AppConfig</code>中使用<code>InfrastructureConfig</code>了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(InfrastructureConfig.class)</span><br><span class="line">public class AppConfig &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>现在假设我们的<code>BaseballGame</code>需要一个<code>DataSource</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BaseballGame implements Game &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public void setDataSource(DataSource dataSource) &#123;</span><br><span class="line">        this.dataSource &#x3D; dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们再修改<code>AppConfig</code>，让Bean自动配置<code>DataSource</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Game game(DataSource dataSource) &#123;</span><br><span class="line">    BaseballGame game &#x3D; new BaseballGame(redSox(), cubs());</span><br><span class="line">    game.setDataSource(dataSource);</span><br><span class="line">    return game;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们给<code>game()</code>这个Bean添加了参数<code>DataSource</code>，Spring会自动根据参数来查找对应的Bean（这里这个Bean在<code>InfrastructureConfig</code>中），然后产生一个参数，来进行配置。</p>
<p>以上就是用Java进行配置的方法，下面我们用基于注解的配置。</p>
<h2 id="1-3-基于注解的配置"><a href="#1-3-基于注解的配置" class="headerlink" title="1.3 基于注解的配置"></a>1.3 基于注解的配置</h2><p>这一节我们需要接触两个概念：<code>Autowired</code>、<code>ComponentScan</code>和<code>Component</code>。</p>
<h3 id="1-3-1-Autowired注解"><a href="#1-3-1-Autowired注解" class="headerlink" title="1.3.1 @Autowired注解"></a>1.3.1 <code>@Autowired</code>注解</h3><p>我们再来看看之前关于<code>game</code>的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(InfrastructureConfig.class)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Game game(DataSource dataSource) &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(redSox(), cubs());</span><br><span class="line">        game.setDataSource(dataSource);</span><br><span class="line">        return game;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，如果我们不知道<code>InfrastructureConfig</code>里的内容的话，<code>DataSouce</code>看起来有些奇怪，我们可以使用<code>Autowired</code>来寻找所有的Bean并且找到匹配的Bean:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">...</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired &#x2F;&#x2F;重点在这里</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123; &#x2F;&#x2F;此处已经不需要参数了</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(redSox(), cubs());</span><br><span class="line">        game.setDataSource(dataSource); &#x2F;&#x2F;直接引用</span><br><span class="line">        return game;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><code>@Autowired</code>意味着自动按照<strong>类型</strong>触发，也就是<strong>只有一个</strong>这种<strong>类型</strong>的<strong>Bean</strong>时才起作用。</li>
<li><code>@Autowired</code>对Bean的声明形式没有要求，可以是XML, Java或者使用<code>@Component</code>等声明。</li>
</ol>
<p>我们之前系统里只有一个<code>DataSource</code>，所以这么做没问题，但是如果我们将这种方法用到<code>BaseballGame</code>身上，就会有问题。下面我们来看看如何解决这个问题。</p>
<h3 id="1-3-2-ComponentScan-Component-以及-Qualifier注解"><a href="#1-3-2-ComponentScan-Component-以及-Qualifier注解" class="headerlink" title="1.3.2 @ComponentScan,@Component 以及@Qualifier注解"></a>1.3.2 <code>@ComponentScan</code>,<code>@Component</code> 以及<code>@Qualifier</code>注解</h3><p><code>@ComponentScan</code>会扫描当前文件夹及其子文件夹下，但是最好指定<code>basePackages</code>参数，告诉它从哪里开始扫描。 </p>
<p>现在我们再次修改<code>AppConfig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired @Qualifier(&quot;redSox&quot;)</span><br><span class="line">    private Team home;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired @Qualifier(&quot;cubs&quot;)</span><br><span class="line">    private Team away;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(home, away);</span><br><span class="line">        game.setDataSource(dataSource);</span><br><span class="line">        return game;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>@Qualifier</code>就是前面说的如果存在多个相同类型的Bean时，如何让<code>@Autowired</code>能正常工作的解决方法。</p>
<p>另外，我们还需要对<code>RedSox</code>和<code>Cubs</code>类添加<code>@Component</code>注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RedSox implements Team &#123;...&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Cubs implements Team &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>使用注解声明的优点：我们不需要单独写Bean的配置，只需要声明就可以了。但这也有一些潜在的缺点：Bean可能散布在整个项目中，那我们需要大量的扫描，但是在现实中，我们一般会把Bean放到一个特殊的包中。一般来说，主要有下面几种常用的包：</p>
<ul>
<li>repositories</li>
<li>services</li>
<li>controllers</li>
</ul>
<p><strong>注意</strong>，扫描只在应用启动时进行一次，运行的时候是不会再扫描的。</p>
<h3 id="1-3-3-Resource注解"><a href="#1-3-3-Resource注解" class="headerlink" title="1.3.3 @Resource注解"></a>1.3.3 <code>@Resource</code>注解</h3><p>Java提供了一个标准的注解<code>@Resource</code>，也是用来自动触发，但与Spring的<code>Autowired</code>不同，它不是按照类型，而是<strong>按照名字</strong>触发。 </p>
<p>下面的例子是就是Spring根据变量的名字去找对应的Bean.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.annotation.Resource;</span><br><span class="line">...</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private Team redSox;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private Team cubs;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(redSox, cubs);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但一般我们好少这么做，因为这样的话我们就没法改变量的名字了。</p>
<p>现在我们学习了使用Java配置、使用注解配置，接下来我们来看看使用XML进行配置，有点丑，但之前一直这么用，所以还是了解一下比较好。</p>
<h2 id="1-4-基于XML的配置"><a href="#1-4-基于XML的配置" class="headerlink" title="1.4 基于XML的配置"></a>1.4 基于XML的配置</h2><p>对于基于注解的配置，我们必须要有源码才行。对于基于Java的配置，则是有些库根本就不支持这样的做法。XML配置有时会提供一些比较简便的配置方法，因此我们最好还是了解一下。 </p>
<h3 id="1-4-1-XML配置声明"><a href="#1-4-1-XML配置声明" class="headerlink" title="1.4.1 XML配置声明"></a>1.4.1 XML配置声明</h3><p>我们在<code>main/resources</code>下创建<code>applicationContext.xml</code>，注意，在IDEA中请用<code>new-&gt;XML Configuration File-&gt;Spring config</code>来新建。</p>
<p>为了方便，现在，我们先把<code>AppConfig</code>中的内容注释掉，把<code>RunDemo</code>的调用容器的也注释掉。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;bean id&#x3D;&quot;redSox&quot; class&#x3D;&quot;lx.spring.core.entities.RedSox&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;cubs&quot; class&#x3D;&quot;lx.spring.core.entities.Cubs&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;game&quot; class&#x3D;&quot;lx.spring.core.entities.BaseballGame&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;awayTeam&quot; ref&#x3D;&quot;redSox&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;homeTeam&quot; ref&#x3D;&quot;cubs&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>Bean由3部分组成，<code>id</code>, <code>class</code>和<code>property</code>。注意<code>property</code>可以使用<code>ref</code>来引用其他的Bean，也可以使用<code>value</code>来指定值。</p>
<h3 id="1-4-2-加载XML配置"><a href="#1-4-2-加载XML配置" class="headerlink" title="1.4.2 加载XML配置"></a>1.4.2 加载XML配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，此时输出的Bean的数量只有4个（也就是XML中声明的数量）。</p>
<h3 id="1-4-3-在XML配置中使用Bean扫描"><a href="#1-4-3-在XML配置中使用Bean扫描" class="headerlink" title="1.4.3 在XML配置中使用Bean扫描"></a>1.4.3 在XML配置中使用Bean扫描</h3><p>我们要使用Bean扫描该怎么办呢？我们给XML添加命名空间就好了。</p>
<pre><code>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/beans/spring-context.xsd&quot;&gt;

    &lt;context:component-scan base-package=&quot;lx.spring.core&quot;/&gt;
    ...</code></pre><p>这个时候除了<code>DataSource</code>需要声明外，其他的Bean不需要再XML文件中声明，只需要像之前那样使用注解声明就可以了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记02-配置Bean</title>
    <url>/2016/08/11/Spring%E7%AC%94%E8%AE%B002-%E9%85%8D%E7%BD%AEBean/</url>
    <content><![CDATA[<h2 id="2-1-构造函数和Setter注入"><a href="#2-1-构造函数和Setter注入" class="headerlink" title="2.1 构造函数和Setter注入"></a>2.1 构造函数和Setter注入</h2><p>之前我们基于注解的配置是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired @Qualifier(&quot;redSox&quot;)</span><br><span class="line">    private Team home;</span><br><span class="line"></span><br><span class="line">    @Autowired @Qualifier(&quot;cubs&quot;)</span><br><span class="line">    private Team away;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(home, away);</span><br><span class="line">        game.setDataSource(dataSource);</span><br><span class="line">        return game;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们知道如果没有<code>@Qualifier</code>注解，就会报错。但是如果我们把<code>home</code>和<code>away</code>去掉，然后添加一个集合，像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">	...</span><br><span class="line">    @Autowired</span><br><span class="line">    private List&lt;Team&gt; teams;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(teams.get(0), teams.get(1));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们有多个相同类型的Bean，但是是以单个变量声明的，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired @Qualifier(&quot;redSox&quot;)</span><br><span class="line">private Team home;</span><br></pre></td></tr></table></figure>

<p>如果没有<code>@Qualifier</code>注解就会报错，但是想前面例子是用集合的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private List&lt;Team&gt; teams;</span><br></pre></td></tr></table></figure>

<p>就不会报错，他会扫描所有这个类型的Bean，然后放到集合中。</p>
<p>有的时候，我们需要确定是使用构造器注入还是setter方法注入，这里有一个指导原则：</p>
<p>如果这个依赖是必须的，比如数据库驱动等，那就使用构造器注入，这样初始化的时候就必须提供参数；如果依赖不是必须的，则使用setter注入。</p>
<p>在Bean构造好后，我们也可以修改，比如，我们在<code>RunDemo.java</code>中添加修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RunDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Game game &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">        System.out.println(game.playGame());</span><br><span class="line"></span><br><span class="line">        Team royals &#x3D; context.getBean(&quot;royals&quot;, Team.class);</span><br><span class="line">        game.setAwayTeam(royals);</span><br><span class="line">        System.out.println(game.playGame());</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Bean-Scopes"><a href="#2-2-Bean-Scopes" class="headerlink" title="2.2 Bean Scopes"></a>2.2 Bean Scopes</h2><p>其实之前对Bean的用法都不正确，但这是最简单的用法。</p>
<p>我们队<code>BaseballGame</code>添加<code>toString()</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">    return String.format(&quot;Game between %s at %s&quot;, awayTeam.getName(), homeTeam.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改<code>RunDemo</code>中的调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class RunDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        Team royals &#x3D; context.getBean(&quot;royals&quot;, Team.class);</span><br><span class="line"></span><br><span class="line">        Game game1 &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">        System.out.println(game1);</span><br><span class="line"></span><br><span class="line">        Game game2 &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">        game2.setAwayTeam(royals);</span><br><span class="line">        System.out.println(game2);</span><br><span class="line"></span><br><span class="line">        System.out.println(game1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出：</span><br><span class="line">&#x2F;&#x2F;Game between Bostom Red Sox at Chicago Cubs</span><br><span class="line">&#x2F;&#x2F;Game between Kansas City Royals at Chicago Cubs</span><br><span class="line">&#x2F;&#x2F;Game between Kansas City Royals at Chicago Cubs</span><br></pre></td></tr></table></figure>

<p>我们看一下输出，<code>game1</code>和<code>game2</code>输出是一样的，为什么？</p>
<p><strong>因为Spring Bean是单例模式</strong>,但是这也不难改变。如果我们希望哪个Bean不是单例的，只要添加注解<code>@Scope(&quot;prototype&quot;)</code>就可以了。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">	...</span><br><span class="line">    @Bean @Scope(&quot;prototype&quot;) &#x2F;&#x2F;注意这里给Bean添加了@Scope</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        BaseballGame game &#x3D; new BaseballGame(teams.get(0), teams.get(1));</span><br><span class="line">        game.setDataSource(dataSource);</span><br><span class="line">        return game;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Scope(&quot;prototype&quot;)</code>表示每次调用时都返回一个新的Bean。</p>
<p>这里体现了Spring的一个哲学，它意味着Spring管理的主要是可以看做是单例的，比如Service， Repository， 或者数据库连接池。Spring致力于提供基础设施。</p>
<p>在<a href="https://liulixiang1988.github.io/springbi-ji-01-gou-jian-ying-yong.html">上一节</a>我们用Java进行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Game game() &#123;</span><br><span class="line">        return new BaseballGame(redSox(), cubs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Team redSox() &#123;</span><br><span class="line">        return new RedSox();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意在<code>game()</code>里，我们又调用了<code>redSox()</code>，这是一个函数调用。那就有同学会问了，这难道不会产生新的Bean吗？不会的。这是为什么呢？因为Spring会重新继承配置，这里是<code>AppConfig</code>，然后重写这里面的方法。在<strong>子类</strong>中优点类似这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Team redSox() &#123;</span><br><span class="line">	if (redSox 已经在 appContext 中) &#123;</span><br><span class="line">		return redSox;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		&#x2F;&#x2F;调用super.redSox()</span><br><span class="line">		&#x2F;&#x2F;添加到appContext中</span><br><span class="line">		&#x2F;&#x2F;return redSox</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们再来看<code>@Scope</code>注解，默认值是<code>@Scope(&quot;singleton&quot;)</code>，还有<code>@Scope(&quot;prototype&quot;)</code>，如果在Spring MVC中，则还有：</p>
<ul>
<li><code>request</code></li>
<li><code>session</code></li>
</ul>
<p>当然你也可以定义自己的<code>Scope</code>，但我们还是应该记住：<strong>默认情况下Spring的Bean是单例的</strong>。</p>
<h2 id="2-3-工厂方法和工厂Bean"><a href="#2-3-工厂方法和工厂Bean" class="headerlink" title="2.3 工厂方法和工厂Bean"></a>2.3 工厂方法和工厂Bean</h2><p>工厂方法和工厂Bean一般主要用于XML配置Bean时。</p>
<h3 id="2-3-1-工厂方法"><a href="#2-3-1-工厂方法" class="headerlink" title="2.3.1 工厂方法"></a>2.3.1 工厂方法</h3><p>我们来看一看后面如何在XML中调用工厂方法。</p>
<p><code>java.text.NumberFormat</code>是一个抽象类，所以也就没法直接生成对象，但是它有一些静态工厂方法可以用于生成对象。我们在XML中添加一个它的<code>Bean</code>就需要像这样了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"nf"</span> <span class="attr">class</span>=<span class="string">"java.text.NumberFormat"</span> <span class="attr">factory-method</span>=<span class="string">"getCurrencyInstance"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意这里的<strong>factory-method</strong>，此时，我们可以再应用中这样调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">NumberFormat nf = context.getBean(NumberFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">double</span> amount = <span class="number">12345678.9012345</span>;</span><br><span class="line">System.out.println(nf.format(amount));</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//￥12,345,678.90</span></span><br></pre></td></tr></table></figure>

<p>从这个我们可以看出，Spring需要知道怎么去创建实例（构造方法还是工厂方法）才能给我们创建Bean。</p>
<h3 id="2-3-2-工厂Bean"><a href="#2-3-2-工厂Bean" class="headerlink" title="2.3.2 工厂Bean"></a>2.3.2 工厂Bean</h3><p>有时候，我们需要用别的类中的工厂方法来创建类，这个时候我们就需要使用工厂Bean。</p>
<p>这里我们举一个例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"javax.xml.parsers.DocumentBuilderFactory"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"documentBuilder"</span> <span class="attr">class</span>=<span class="string">"javax.xml.parsers.DocumentBuilder"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"newDocumentBuilder"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到<code>documentBuilder</code>是通过<code>factory</code>这个Bean的<code>newDocumentBuilder</code>方法中调用的。</p>
<p>当然，如果我们用的是Java配置，直接这么写就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public NumberFormat nf() &#123;</span><br><span class="line">	return NumberFormat.getCurrencyInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-初始化和销毁"><a href="#2-4-初始化和销毁" class="headerlink" title="2.4 初始化和销毁"></a>2.4 初始化和销毁</h2><p>有时候，我们希望在Bean创建后和销毁前做一些动作。</p>
<p>比如，对于我们之前定义的<code>BaseballGame</code>，我们添加两个方法<code>startGame</code>和<code>endGame</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BaseballGame implements Game &#123;</span><br><span class="line">	...    </span><br><span class="line">    public void startGame() &#123;</span><br><span class="line">        System.out.println(&quot;Start game!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void endGame() &#123;</span><br><span class="line">        System.out.println(&quot;End game!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-1-initMethod和destroyMethod属性"><a href="#2-4-1-initMethod和destroyMethod属性" class="headerlink" title="2.4.1 initMethod和destroyMethod属性"></a>2.4.1 initMethod和destroyMethod属性</h3><p>下面是重点，我们看看如何在创建后和销毁前调用<code>startGame</code>和<code>endGame</code>，再次返回到<code>AppConfig</code>中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean(initMethod &#x3D; &quot;startGame&quot;, destroyMethod &#x3D; &quot;endGame&quot;)</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">public Game game() &#123;</span><br><span class="line">    BaseballGame game &#x3D; new BaseballGame(teams.get(0), teams.get(1));</span><br><span class="line">    game.setDataSource(dataSource);</span><br><span class="line">    return game;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意，我们不能给intMethod和destroyMethod传递参数，因此必须要求对应的方法是无餐的。</strong></p>
<p>这里，我们用<code>@Bean</code>的<code>initMethod</code>和<code>destroyMethod</code>来指定对应的方法，接着我们再次执行下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Game game1 &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">System.out.println(game1);</span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">&#x2F;&#x2F;Start game!</span><br><span class="line">&#x2F;&#x2F;Game between Bostom Red Sox at Chicago Cubs</span><br></pre></td></tr></table></figure>

<p>但是我们执行时发现并没有输出销毁指定的方法，这是为什么？因为JVM可能这会并没有执行垃圾回收，所以对象也没有销毁。</p>
<h3 id="2-4-2-PostConstruct-和-PreDestroy"><a href="#2-4-2-PostConstruct-和-PreDestroy" class="headerlink" title="2.4.2 @PostConstruct 和 @PreDestroy"></a>2.4.2 @PostConstruct 和 @PreDestroy</h3><p>除了使用<code>@Bean(initMethod, destroyMethod)</code>， Java本身也提供了一些注解让我们来做初始化后和销毁前的一些工作，他们就是<code>@PostConstruct</code>和<code>@PreDestroy</code>，我们直接把它们应用到对应的方法上即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostConstruct</span><br><span class="line">public void startGame() &#123;</span><br><span class="line">    System.out.println(&quot;Start game!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PreDestroy</span><br><span class="line">public void endGame() &#123;</span><br><span class="line">    System.out.println(&quot;End game!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个方法我们必须有Bean对应的源码才行。</p>
<h3 id="2-4-3-AnnotationConfigApplicationContext-close方法"><a href="#2-4-3-AnnotationConfigApplicationContext-close方法" class="headerlink" title="2.4.3 AnnotationConfigApplicationContext.close方法"></a>2.4.3 AnnotationConfigApplicationContext.close方法</h3><p>我们之前看到输出时并没有输出对应的销毁前方法，当然我们也有方法让Bean销毁，那就是用<code>AnnotationConfigApplicationContext.close()</code>方法，注意这个方法会自动调用，但是对于<code>Scope(&quot;prototype&quot;)</code>的无效，必须是单例的才行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext context &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">Game game1 &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">System.out.println(game1);</span><br><span class="line">context.close();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记05-Spring事务</title>
    <url>/2016/08/19/Spring%E7%AC%94%E8%AE%B005-Spring%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="5-1-声明事务管理"><a href="#5-1-声明事务管理" class="headerlink" title="5.1 声明事务管理"></a>5.1 声明事务管理</h2><p>ACID 属性:</p>
<p>Atomic原子：All or Nothing</p>
<p>Consistent一致性: DB integrity constraints never violated</p>
<p>Isolated: How transactions see work done by others</p>
<p>Durable: Committed changes are permanent</p>
<p>我们一般是在Service层声明事务。</p>
<h3 id="5-1-1-Transactional注解"><a href="#5-1-1-Transactional注解" class="headerlink" title="5.1.1 @Transactional注解"></a>5.1.1 @Transactional注解</h3><p><code>@Transactional</code>注解允许我们管理一个事务管理器。Spring不直接提供事务管理器，它提供一个hook连接到已经存在的事务管理器，比如我们使用关系数据库，那Spring就是使用关系数据库的事务管理器。Spring的Bean和Entity允许我们请求事务管理器，设置属性（比如超时、只读等）。</p>
<p>应用Spring的事务需要两步：</p>
<ol>
<li>应用<code>Transactional</code>注解<br> a. XML格式<br> b. 写代码的方式</li>
<li>声明Platform Transaction Manager bean</li>
<li><code>@EnableTransactionManagement</code></li>
</ol>
<p><code>@Transactional</code>注解可以用于方法或者类。如果应用于一个类，那么这个类中的所有方法都应用了了这个注解，对于应用了类的注解，我们对单独的类重新使用<code>@Transactional</code>方法来覆盖。</p>
<p><code>@Transactional</code>方法提供了一些参数让我们来指定一些配置。</p>
<h3 id="5-1-2-PlatformTransactionManager接口"><a href="#5-1-2-PlatformTransactionManager接口" class="headerlink" title="5.1.2 PlatformTransactionManager接口"></a>5.1.2 PlatformTransactionManager接口</h3><p><code>PlatformTransactionManager</code>用来代表依赖平台的事务管理器。它的实现类有Hibernate, JPA等事务管理器。</p>
<h3 id="5-1-3-案例：账户应用"><a href="#5-1-3-案例：账户应用" class="headerlink" title="5.1.3 案例：账户应用"></a>5.1.3 案例：账户应用</h3><p>首先，我们定义entity:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package lx.spring.core.entities;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class Account &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private BigDecimal balance;</span><br><span class="line"></span><br><span class="line">    public Account() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Account(Long id, BigDecimal balance) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.balance &#x3D; balance;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; getter setter toString equals hashCode等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们使用<code>BigDecimal</code>类型来表示余额。</p>
<p>然后我们创建一个Repository，用来表示数据库的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package lx.spring.core.repositories;</span><br><span class="line">import lx.spring.core.entities.Account;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface AccountRepository &#123;</span><br><span class="line">    List&lt;Account&gt; getAccounts();</span><br><span class="line">    Account getAccount(Long id);</span><br><span class="line">    int getNumberOfCounts();</span><br><span class="line">    Long createAccount(BigDecimal initialBalance);</span><br><span class="line">    int deleteAccount(Long id);</span><br><span class="line">    void updateAccount(Account account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面我们将看到如何用Spring Data来处理数据。</p>
<p>第一步，我们用<code>@Transactional</code> 实体。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service @Transactional</span><br><span class="line">@Profile(&quot;test&quot;)</span><br><span class="line">public class AccountService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository repository;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getBalance(Long id) &#123;</span><br><span class="line">        return repository.getAccount(id).getBalance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal deposit(Long id, BigDecimal amount) &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(id);</span><br><span class="line">        BigDecimal newBalance &#x3D; account.getBalance().add(amount);</span><br><span class="line">        account.setBalance(newBalance);</span><br><span class="line">        repository.updateAccount(account);</span><br><span class="line">        return newBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal withdraw(Long id, BigDecimal amount) &#123;</span><br><span class="line">        return deposit(id, amount.negate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步是声明Bean来适应事务，我们打开<code>AppConfig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;transactionManager&quot;)</span><br><span class="line">    @Profile(&quot;test&quot;)</span><br><span class="line">    public PlatformTransactionManager transactionManagerForTest() &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSourceForTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">    @Profile(&quot;test&quot;)</span><br><span class="line">    public DataSource dataSourceForTest() &#123;</span><br><span class="line">        DataSource dataSource &#x3D; new BasicDataSource();</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>transactionManagerForTest()</code>是返回事务管理器的，同时，我们用<code>EnableTransactionManagement</code>来指明我们的容器用了事务管理。</p>
<h2 id="5-2-Isolation-levels-隔离层级"><a href="#5-2-Isolation-levels-隔离层级" class="headerlink" title="5.2 Isolation levels 隔离层级"></a>5.2 Isolation levels 隔离层级</h2><p><code>@Transactional</code>有一个属性是<code>Isolation</code>的，它是一个枚举，它有一下几个值：</p>
<ul>
<li><code>DEFAULT</code> 使用底层数据存储所用的隔离层级</li>
<li><code>READ_COMMITTED</code> dirty reads are prevented; non-repeatable reads and phantom reads can occur.只有在其他事务提交时在一个事务里才能看到改变后的数据。如果事务需要很久，那就一直锁定直到事务完成。</li>
<li><code>READ_UNCOMMITTED</code> dirty reads, non-repeatable reads and phantom reads can occur. 两个事务同时对于一行操作。如果一个事务读取了行，然后又修改了数据，那另一个事务可以看到其他事务修改后的数据。这个好处是速度非常快，你没有锁定行，问题是它有一定风险，比如你根据没有提交的数据做了一些动作，但是这些改变又回滚了。所以，使用时需要分析一下。<code>READ_UNCOMMITTED</code>是最高效但不是最优的选择。</li>
<li><code>REPEATABLE_READ</code> dirty reads and non-repeatable reads are prevented; phantom reads can occur.如果数据修改后发生了回滚，则回滚前后我们看到的数据都是一样的</li>
<li><code>SERIALIZABLE</code> dirty reads, non-repeatable reads and phantom reads are prevented 当我们查询或修改时，别的事务不能增加或修改表（整表锁定）</li>
</ul>
<p>一般情况下我们不会修改这个属性。</p>
<h2 id="5-3-Propagation-传播"><a href="#5-3-Propagation-传播" class="headerlink" title="5.3 Propagation 传播"></a>5.3 Propagation 传播</h2><p>Propagation说的是当事务执行时，我们的方法是否也是执行的。我们再回到<code>@Transactional</code>注解上来，它有一个属性是<code>Propagation</code>枚举。它有以下值：</p>
<ul>
<li><code>MANDATORY</code>:  1. tx-&gt;join tx; 2. no-&gt;throw a TransactionRequiredException</li>
<li><code>NESTED</code>: </li>
<li><code>NEVER</code>: 1. tx-&gt; throw an exception; 2. no-&gt;nothing</li>
<li><code>NOT_SUPPORTED</code>: 1. tx-&gt;suspend tx; run outside tx; resume tx; 2. no-&gt;nothing</li>
<li><code>REQUIRED</code>：最常用，如果一个事务发生，那么我们加入，这是默认的；如果没有，我们创建一个事务。</li>
<li><code>REQUIRES_NEW</code>：1. tx1-&gt; suspend tx1; create and run tx2; resume tx1; 2. no-&gt;create and run tx</li>
<li><code>SUPPORTS</code>: 1. tx-&gt;join tx; 2. no-&gt;nothing</li>
</ul>
<p>除了<code>NESTED</code>,其它的都是来自于J2EE。</p>
<h2 id="5-4-高效事务管理"><a href="#5-4-高效事务管理" class="headerlink" title="5.4 高效事务管理"></a>5.4 高效事务管理</h2><p>Spring提供了两种高效高效管理事务的方法：</p>
<ul>
<li>使用<code>TransactionTemplate</code></li>
<li>使用<code>PlatfromTransactionManager</code>实现</li>
</ul>
<h3 id="5-4-1-TransactionTemplate"><a href="#5-4-1-TransactionTemplate" class="headerlink" title="5.4.1 TransactionTemplate"></a>5.4.1 TransactionTemplate</h3><p><code>TransactionTemplate</code>非常有用。我们在<code>Service</code>的构造方法里有提供<code>PlatformTransactionManager</code>参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line">import org.springframework.transaction.TransactionStatus;</span><br><span class="line">import org.springframework.transaction.support.TransactionTemplate;</span><br><span class="line">import org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line">public class SimpleService &#123;</span><br><span class="line">    private final TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    public SimpleService(PlatformTransactionManager transactionManager) &#123;</span><br><span class="line">        Assert.notNull(transactionManager, &quot;The &#39;transactionManager&#39; argument must not be null&quot;);</span><br><span class="line">        this.transactionTemplate &#x3D; new TransactionTemplate(transactionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object someServiceMethod() &#123;</span><br><span class="line">        return transactionTemplate.execute((TransactionStatus status) -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;hello&quot;);</span><br><span class="line">            return &quot;aaa&quot;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void someServiceMethodWithouResult() &#123;</span><br><span class="line">        transactionTemplate.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void doInTransactionWithoutResult(TransactionStatus status) &#123;</span><br><span class="line">                System.out.println(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数<code>TransactionStatus</code>有<code>setRollbackOnly()</code>方法，用于回滚事务。</p>
<p>我们可以在构造方法中设置事务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SimpleService(PlatformTransactionManager transactionManager) &#123;</span><br><span class="line">    Assert.notNull(transactionManager, &quot;The &#39;transactionManager&#39; argument must not be null&quot;);</span><br><span class="line">    this.transactionTemplate &#x3D; new TransactionTemplate(transactionManager);</span><br><span class="line">    &#x2F;&#x2F;这里我们可以设置会话</span><br><span class="line">    this.transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">    this.transactionTemplate.setTimeout(30); &#x2F;&#x2F;30秒</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-2-PlatformTransactionManager"><a href="#5-4-2-PlatformTransactionManager" class="headerlink" title="5.4.2 PlatformTransactionManager"></a>5.4.2 PlatformTransactionManager</h3><p>我们也可以使用<code>org.springframework.transaction.PlatformTransactionManager</code>直接管理会话。将<code>PlatformTransactionManager</code>直接传给bean，然后可以使用<code>TransactionDefinistion</code>和<code>TransactionStatus</code>来初始化会话、回滚、提交等。</p>
<p>在<code>TransactionTemplate</code>和<code>PlatformTransactionManager</code>之间有限推荐第一个。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记03-面向切面编程AOP</title>
    <url>/2016/08/12/Spring%E7%AC%94%E8%AE%B003-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8BAOP/</url>
    <content><![CDATA[<h2 id="3-1-AOP的概念"><a href="#3-1-AOP的概念" class="headerlink" title="3.1 AOP的概念"></a>3.1 AOP的概念</h2><p>AOP适用于以下场景：代码交织(code tangling)和代码分散(code scattering)</p>
<p>代码交织是指一个方法完成多个功能，这几个功能之间又没有必然联系，比如我们需要做日志、检查授权和执行业务逻辑，如果我们不用AOP的话那这三个就混在一起了。</p>
<p>代码分散式指比如我们有多处需要做日志，然后这些代码在多个地方重复。</p>
<p>AOP允许我们将这些动作封装成一个类，然后告诉Spring我们希望在多个地方调用这个类（成为Aspect），从而避免代码交织和分散。 </p>
<p>AOP会设计到一下几个概念：</p>
<ul>
<li>连接点Join Point</li>
<li>切入点Point Cut</li>
<li>Advice</li>
<li>Aspect</li>
<li>Weaving</li>
</ul>
<h3 id="3-1-1-连接点-Join-Point-和切入点-Point-Cut"><a href="#3-1-1-连接点-Join-Point-和切入点-Point-Cut" class="headerlink" title="3.1.1 连接点(Join Point)和切入点(Point Cut)"></a>3.1.1 连接点(Join Point)和切入点(Point Cut)</h3><p>连接点，指的是我们能够应用我们Aspect的地方。这是告诉我们where to use the Aspects.<br>在一般概念的AOP上，我们可以在任何地方用Aspect，但是Spring对这一规则做了限制，我们只能用在Spring管理的Bean的公共方法中。</p>
<p>切入点一般来说可以认为和连接点类似。表示我们实际声明的连接点。</p>
<h3 id="3-1-2-Advice"><a href="#3-1-2-Advice" class="headerlink" title="3.1.2 Advice"></a>3.1.2 Advice</h3><p>Advice指的是我们想应用的方法(The functionality we want to apply)，比如是Before, After等。</p>
<h3 id="3-1-3-Aspect"><a href="#3-1-3-Aspect" class="headerlink" title="3.1.3 Aspect"></a>3.1.3 Aspect</h3><p>Aspect是Point Cut和Advice的结合，也就是我们什么时候做、做什么。</p>
<h3 id="3-1-4-Weaving"><a href="#3-1-4-Weaving" class="headerlink" title="3.1.4 Weaving"></a>3.1.4 Weaving</h3><p>将Aspect应用到系统的过程(The process of applying an aspect to our system)</p>
<p>好了，在将AOP应用到我们前面讲到的例子之前，我们先添加一些依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile group: &#39;org.springframework&#39;, name: &#39;spring-aop&#39;, version: &#39;4.3.2.RELEASE&#39;</span><br><span class="line">compile group: &#39;aopalliance&#39;, name: &#39;aopalliance&#39;, version: &#39;1.0&#39;</span><br><span class="line">compile group: &#39;org.aspectj&#39;, name: &#39;aspectjweaver&#39;, version: &#39;1.8.9&#39;</span><br></pre></td></tr></table></figure>

<p><code>spring-aop</code>底层是调用<code>aspectj</code>，但是有时候我们会直接使用<code>aspectj</code>因此这里还是直接添加一下依赖。</p>
<h2 id="3-2-定义切入点和应用Advice"><a href="#3-2-定义切入点和应用Advice" class="headerlink" title="3.2 定义切入点和应用Advice"></a>3.2 定义切入点和应用Advice</h2><p>这一节我们对之前的例子应用AOP。我们对<code>Game</code>做记录，记录下每个方法的调用，什么时候添加<code>setHomeTeam</code>, <code>setAwayTeam</code>等。</p>
<p>首先，我们需要在Bean配置里添加注解<code>@EnableAspectJAutoProxy</code>。这个注解表示Spring使用AspectJ的注解代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">@EnableAspectJAutoProxy</span><br><span class="line">public class AppConfig &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>第二部，我们新建一个<code>aspects</code>包，并在包下面创建<code>LoggingAspect</code>类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Component &#x2F;&#x2F;这样使用起来方便</span><br><span class="line">public class LoggingAspect &#123;</span><br><span class="line">    private Logger logger &#x3D; Logger.getLogger(getClass().getName());</span><br><span class="line">    @Before(&quot;execution(void lx.spring.core..*.set*(*))&quot;) &#x2F;&#x2F;指定Point Cut</span><br><span class="line">    public void callSetters() &#123;</span><br><span class="line">        logger.info(&quot;Setters called!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们创建了类，并用<code>@Aspect</code>标示它是一个Aspect。一个Aspect由切入点和Advice组成，<code>@Before</code>指定了切入点，也就是匹配所有<code>lx.spring.core</code>包及其下面的包中的<code>set</code>开头只有一个参数返回类型是<code>void</code>类型的方法。<code>callSetters()</code>方法是advice。</p>
<p>因为我们给Aspect加了<code>@Component</code>，加之我们在配置时用了<code>@ComponentScan</code>，所以现在我们什么都不用做，就会自动的调用这个方法了。是不是很神奇？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Team royals &#x3D; context.getBean(&quot;royals&quot;, Team.class);</span><br><span class="line">Team redSox &#x3D; context.getBean(&quot;redSox&quot;, Team.class);</span><br><span class="line">Team cubs &#x3D; context.getBean(&quot;cubs&quot;, Team.class);</span><br><span class="line"></span><br><span class="line">Game game1 &#x3D; context.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">System.out.println(game1);</span><br><span class="line">game1.setHomeTeam(royals);</span><br><span class="line">game1.setAwayTeam(redSox);</span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">&#x2F;&#x2F;Game between Bostom Red Sox at Chicago Cubs</span><br><span class="line">&#x2F;&#x2F;八月 12, 2016 10:24:44 上午 lx.spring.core.aspects.LoggingAspect callSetters</span><br><span class="line">&#x2F;&#x2F;信息: Setters called!</span><br><span class="line">&#x2F;&#x2F;八月 12, 2016 10:24:44 上午 lx.spring.core.aspects.LoggingAspect callSetters</span><br><span class="line">&#x2F;&#x2F;信息: Setters called!</span><br></pre></td></tr></table></figure>

<p>其实，我们的<code>callSetters()</code>方法可以添加<code>JoinPoint</code>参数，用来提供一些调用信息，这样大大提高了AOP的功能，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Before(&quot;execution(void lx.spring.core..*.set*(*))&quot;) &#x2F;&#x2F;指定Point Cut</span><br><span class="line">public void callSetters(JoinPoint joinPoint) &#123;</span><br><span class="line">    &#x2F;&#x2F;获取方法名</span><br><span class="line">    String method &#x3D; joinPoint.getSignature().getName();</span><br><span class="line">    &#x2F;&#x2F;获取参数</span><br><span class="line">    String args &#x3D; Arrays.stream(joinPoint.getArgs()).map(Object::toString).collect(Collectors.joining(&quot;, &quot;));</span><br><span class="line">    &#x2F;&#x2F;获取target，也就是所属的类</span><br><span class="line">    Object target &#x3D; joinPoint.getTarget();</span><br><span class="line">    logger.info(&quot;在&quot;+target+&quot;上调用&quot;+method+&quot;参数:&quot;+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-Advice的类型"><a href="#3-3-Advice的类型" class="headerlink" title="3.3 Advice的类型"></a>3.3 Advice的类型</h2><p>Advice包含很多内容，请查看Spring文档的AspectJ部分。这里举一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Around(&quot;execution(String playGame())&quot;)</span><br><span class="line">public Object checkForRain(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">    boolean rain &#x3D; Math.random() &lt; 0.5;</span><br><span class="line">    Object result &#x3D; null;</span><br><span class="line">    if (rain) &#123;</span><br><span class="line">        logger.info(pjp.getTarget() + &quot; rained out&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        result &#x3D; pjp.proceed();</span><br><span class="line">        logger.info(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是在执行前和执行后都会执行，其中<code>ProceedingJoinPoint.proceed()</code>会调用对应的方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记04-使用Spring进行测试</title>
    <url>/2016/08/12/Spring%E7%AC%94%E8%AE%B004-%E4%BD%BF%E7%94%A8Spring%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="4-1-标准测试注解和injecting-fixture"><a href="#4-1-标准测试注解和injecting-fixture" class="headerlink" title="4.1 标准测试注解和injecting fixture"></a>4.1 标准测试注解和injecting fixture</h2><p>Spring的一个特点是测试Component非常方便。</p>
<p>现在我们为<code>BaseballGame</code>创建<code>BaseballGameTest</code>。然后做测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BaseballGameTest &#123;</span><br><span class="line">    private Game game;</span><br><span class="line">    private ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() throws Exception &#123;</span><br><span class="line">        ctx &#x3D; new AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">        game &#x3D; ctx.getBean(&quot;game&quot;, Game.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void playGame() throws Exception &#123;</span><br><span class="line">        String home &#x3D; game.getHomeTeam().getName();</span><br><span class="line">        String away &#x3D; game.getAwayTeam().getName();</span><br><span class="line"></span><br><span class="line">        String result &#x3D; game.playGame();</span><br><span class="line"></span><br><span class="line">        assertTrue(result.contains(home) || result.contains(away));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGetAndSetHomeTeam() throws Exception &#123;</span><br><span class="line">        Team royals &#x3D; ctx.getBean(&quot;royals&quot;, Team.class);</span><br><span class="line">        game.setHomeTeam(royals);</span><br><span class="line">        assertEquals(royals.getName(), game.getHomeTeam().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里每次测试的时候，都要调用一次<code>setUp</code>，也就是我们的<code>ApplicationContext</code>会被反复创建很多次，Spring提供了一些方法让<code>ApplicationContext</code>只执行一次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class) &#x2F;&#x2F;</span><br><span class="line">@ContextConfiguration(classes &#x3D; AppConfig.class) &#x2F;&#x2F;</span><br><span class="line">public class BaseballGameTest &#123;</span><br><span class="line">    @Autowired &#x2F;&#x2F;</span><br><span class="line">    private Game game;</span><br><span class="line"></span><br><span class="line">    @Autowired &#x2F;&#x2F;</span><br><span class="line">    private ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void playGame() throws Exception &#123;</span><br><span class="line">        String home &#x3D; game.getHomeTeam().getName();</span><br><span class="line">        String away &#x3D; game.getAwayTeam().getName();</span><br><span class="line"></span><br><span class="line">        String result &#x3D; game.playGame();</span><br><span class="line"></span><br><span class="line">        assertTrue(result.contains(home) || result.contains(away));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGetAndSetHomeTeam() throws Exception &#123;</span><br><span class="line">        Team royals &#x3D; ctx.getBean(&quot;royals&quot;, Team.class);</span><br><span class="line">        game.setHomeTeam(royals);</span><br><span class="line">        assertEquals(royals.getName(), game.getHomeTeam().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们用<code>@RunWith(SpringJUnit4ClassRunner.class)</code>和<code>@ContextConfiguration(classes = AppConfig.class)</code>让我们可以直接用Bean和<code>ApplicationContext</code>。</p>
<h2 id="4-2-事务测试"><a href="#4-2-事务测试" class="headerlink" title="4.2 事务测试"></a>4.2 事务测试</h2><p>事务测试是当测试完成后，所有的测试操作都会回滚。我们用<code>@Transactional</code>来表示事务测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes &#x3D; AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">public class BaseballGameTest &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>还有<code>@Commit</code>的注解，表示会提交；<code>@Rollback</code>表示回滚；<code>@AfterTransaction</code>表示事务执行后再执行。</p>
<p>还有就是<code>@DirtiesContext</code>表示测试上下文会影响到应用中的上下文，当测试执行后重新加载应用的上下文。</p>
<p>我们看到Spring的事务测试和回滚机制非常棒，即使我们不用Spring也可以把它拿出来用于测试。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记06-使用JdbcTemplate进行数据访问</title>
    <url>/2016/08/23/Spring%E7%AC%94%E8%AE%B006-%E4%BD%BF%E7%94%A8JdbcTemplate%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="6-1-实例化和配置"><a href="#6-1-实例化和配置" class="headerlink" title="6.1 实例化和配置"></a>6.1 实例化和配置</h2><p>没有Spring的情况下，JDBC非常难用；有了Spring，JDBC就变得比较靠谱可用了。</p>
<p>这里我们在Bean中使用<code>DataSource</code>对<code>JdbcTemplate</code>进行初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">@Profile(&quot;test&quot;)</span><br><span class="line">public class JdbcAccountRepository implements AccountRepository &#123;</span><br><span class="line"></span><br><span class="line">    private JdbcTemplate template;</span><br><span class="line">    private static long nextId &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public JdbcAccountRepository(DataSource dataSource) &#123;</span><br><span class="line">        template &#x3D; new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面我们看如何配置多个<code>DataSource</code>。</p>
<h2 id="6-2-定义数据源Data-Source"><a href="#6-2-定义数据源Data-Source" class="headerlink" title="6.2 定义数据源Data Source"></a>6.2 定义数据源Data Source</h2><p>之前我们已经讲了<code>@Component</code>，但是在实际中我们更多的遇到的是<code>@Service</code>和<code>@Repository</code>，<code>@Controller</code>，这些其实也是<code>@Component</code>。</p>
<p>首先我们来添加一些依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#39;org.apache.commons&#39;, name: &#39;commons-dbcp2&#39;, version: &#39;2.1.1&#39;</span><br><span class="line"></span><br><span class="line">    compile group: &#39;org.springframework&#39;, name: &#39;spring-test&#39;, version: &#39;4.3.2.RELEASE&#39;</span><br><span class="line">    compile group: &#39;org.hamcrest&#39;, name: &#39;hamcrest-library&#39;, version: &#39;1.3&#39;</span><br><span class="line">	&#x2F;&#x2F;...</span><br><span class="line"></span><br><span class="line">    return&#39;com.h2database:h2:1.4.192&#39;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里我们用了返回，这是因为需要对应的驱动</p>
<p>我们修改<code>AppConfig.java</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean(name &#x3D; &quot;dataSource&quot;, destroyMethod &#x3D; &quot;shutdown&quot;)</span><br><span class="line">@Profile(&quot;test&quot;)</span><br><span class="line">public DataSource dataSourceForTest() &#123;</span><br><span class="line">    return new EmbeddedDatabaseBuilder()</span><br><span class="line">            .generateUniqueName(true)</span><br><span class="line">            .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">            .setScriptEncoding(&quot;UTF-8&quot;)</span><br><span class="line">            .ignoreFailedDrops(true)</span><br><span class="line">            .addScript(&quot;schema.sql&quot;)</span><br><span class="line">            .addScripts(&quot;data.sql&quot;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">@Profile(&quot;prod&quot;)</span><br><span class="line">public DataSource dataSourceForProd() &#123;</span><br><span class="line">    BasicDataSource dataSource &#x3D; new BasicDataSource();</span><br><span class="line">    dataSource.setDriverClassName(env.getProperty(&quot;db.driver&quot;));</span><br><span class="line">    dataSource.setUrl(env.getProperty(&quot;db.url&quot;));</span><br><span class="line">    dataSource.setUsername(env.getProperty(&quot;db.user&quot;));</span><br><span class="line">    dataSource.setPassword(env.getProperty(&quot;db.pass&quot;));</span><br><span class="line">    return dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="6-3-Profile注解和Environment"><a href="#6-3-Profile注解和Environment" class="headerlink" title="6.3 Profile注解和Environment"></a>6.3 Profile注解和Environment</h2><p>在项目中，我们需要多个环境（开发、测试、产品）等，每个环境对应的数据库也不同。Spring能通过<code>@Profile</code>来给不同的环境提供不同的配置Bean但是有相同的名称。</p>
<p><code>@Profile</code>可以放在配置类上，也可以放在Bean的方法上，如果用在Bean方法上，需要给<code>@Bean</code>提供<code>name</code>属性，这样可以让不同的Bean有相同的名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">@PropertySource(&quot;classpath:prod.properties&quot;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;dataSource&quot;, destroyMethod &#x3D; &quot;shutdown&quot;)</span><br><span class="line">    @Profile(&quot;test&quot;)</span><br><span class="line">    public DataSource dataSourceForTest() &#123;</span><br><span class="line">        return new EmbeddedDatabaseBuilder()</span><br><span class="line">                .generateUniqueName(true)</span><br><span class="line">                .setType(EmbeddedDatabaseType.H2)</span><br><span class="line">                .setScriptEncoding(&quot;UTF-8&quot;)</span><br><span class="line">                .ignoreFailedDrops(true)</span><br><span class="line">                .addScript(&quot;schema.sql&quot;)</span><br><span class="line">                .addScript(&quot;data.sql&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;transactionManager&quot;)</span><br><span class="line">    @Profile(&quot;test&quot;)</span><br><span class="line">    public PlatformTransactionManager transactionManagerForTest() &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSourceForTest());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;dataSource&quot;)</span><br><span class="line">    @Profile(&quot;prod&quot;)</span><br><span class="line">    public DataSource dataSourceForProd() &#123;</span><br><span class="line">        BasicDataSource dataSource &#x3D; new BasicDataSource();</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(&quot;db.driver&quot;));</span><br><span class="line">        dataSource.setUrl(env.getProperty(&quot;db.url&quot;));</span><br><span class="line">        dataSource.setUserName(env.getProperty(&quot;db.user&quot;));</span><br><span class="line">        dataSource.setPassword(env.getProperty(&quot;db.pass&quot;));</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;transactionManager&quot;)</span><br><span class="line">    @Profile(&quot;prod&quot;)</span><br><span class="line">    public PlatformTransactionManager transactionManagerForProd() &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSourceForProd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们看到<code>@Profile</code>提供了不同环境下的使用方式。同时需要注意一点是我们使用了<br><code>@PropertySource(&quot;classpath:prod.properties&quot;)</code>这样的注解，它会在<code>resources</code>下寻找<code>prod.properties</code>这个文件，然后使用了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private Environment env;</span><br></pre></td></tr></table></figure>

<p>接着就能读取变量了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">env.getProperty(&quot;db.url&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="6-4-实现CRUD方法"><a href="#6-4-实现CRUD方法" class="headerlink" title="6.4 实现CRUD方法"></a>6.4 实现CRUD方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">@Profile(&quot;test&quot;)</span><br><span class="line">public class JdbcAccountRepository implements AccountRepository &#123;</span><br><span class="line"></span><br><span class="line">    private JdbcTemplate template;</span><br><span class="line">    private static long nextId &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public JdbcAccountRepository(DataSource dataSource) &#123;</span><br><span class="line">        template &#x3D; new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Account&gt; getAccounts() &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;SELECT * FROM account&quot;;</span><br><span class="line">        return template.query(sqlText, new AccountMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Account getAccount(Long id) &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;SELECT * FROM account WHERE id&#x3D;?&quot;;</span><br><span class="line">        return template.queryForObject(sqlText, new AccountMapper(), id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getNumberOfCounts() &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;SELECT count(*) FROM account&quot;;</span><br><span class="line">        return template.queryForObject(sqlText, Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long createAccount(BigDecimal initialBalance) &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;insert into account(id, balance) values(?, ?)&quot;;</span><br><span class="line">        long id &#x3D; nextId ++;</span><br><span class="line">        int uc &#x3D; template.update(sqlText, id, initialBalance);</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteAccount(Long id) &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;delete from account where id&#x3D;?&quot;;</span><br><span class="line">        return template.update(sqlText, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void updateAccount(Account account) &#123;</span><br><span class="line">        String sqlText &#x3D; &quot;update account set balance&#x3D;? where id &#x3D; ?&quot;;</span><br><span class="line">        template.update(sqlText, account.getBalance(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class AccountMapper implements RowMapper&lt;Account&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Account mapRow(ResultSet rs, int rowNum) throws SQLException &#123;</span><br><span class="line">            return new Account(rs.getLong(&quot;id&quot;), rs.getBigDecimal(&quot;balance&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，我们需要提供实现<code>RowMapper</code>来返回对象类型。</p>
<h2 id="6-5-测试Repository"><a href="#6-5-测试Repository" class="headerlink" title="6.5 测试Repository"></a>6.5 测试Repository</h2><p>IDEA的打开最近文件、窗口的快捷键：<code>Cmd+E</code>.</p>
<p>我们创建<code>JdbcAccountRepositoryTest.java</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes &#x3D; AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">@ActiveProfiles(&quot;test&quot;)</span><br><span class="line">public class JdbcAccountRepositoryTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository repository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccounts() throws Exception &#123;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; repository.getAccounts();</span><br><span class="line">        &#x2F;&#x2F;1. 比较</span><br><span class="line">        assertThat(accounts.size(), is(3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(1L);</span><br><span class="line">        assertThat(account.getId(), is(1L));</span><br><span class="line">        &#x2F;&#x2F;2. 近似</span><br><span class="line">        assertThat(new BigDecimal(&quot;100.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void createAccount() throws Exception &#123;</span><br><span class="line">        Long id &#x3D; repository.createAccount(new BigDecimal(&quot;250.00&quot;));</span><br><span class="line">        &#x2F;&#x2F;3. 非空</span><br><span class="line">        assertThat(id, is(notNullValue()));</span><br><span class="line"></span><br><span class="line">        Account account &#x3D; repository.getAccount(id);</span><br><span class="line">        assertThat(account.getId(), is(id));</span><br><span class="line">        assertThat(new BigDecimal(&quot;250.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void updateAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(1L);</span><br><span class="line">        BigDecimal current &#x3D; account.getBalance();</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line">        account.setBalance(current.add(amount));</span><br><span class="line">        repository.updateAccount(account);</span><br><span class="line"></span><br><span class="line">        Account again &#x3D; repository.getAccount(1L);</span><br><span class="line">        assertThat(again.getBalance(), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void deleteAccount() throws Exception &#123;</span><br><span class="line">        for (Account account: repository.getAccounts()) &#123;</span><br><span class="line">            repository.deleteAccount(account.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意里面的<code>assertThat</code>, <code>is</code>, <code>closeTo</code>等。</p>
<p>现在我们再来看<code>AccountService</code>,它有事务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service @Transactional</span><br><span class="line">@Profile(&quot;test&quot;)</span><br><span class="line">public class AccountService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository repository;</span><br><span class="line"></span><br><span class="line">    @Transactional(readOnly &#x3D; true, propagation &#x3D; Propagation.SUPPORTS)</span><br><span class="line">    public BigDecimal getBalance(Long id) &#123;</span><br><span class="line">        return repository.getAccount(id).getBalance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal deposit(Long id, BigDecimal amount) &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(id);</span><br><span class="line">        BigDecimal newBalance &#x3D; account.getBalance().add(amount);</span><br><span class="line">        account.setBalance(newBalance);</span><br><span class="line">        repository.updateAccount(account);</span><br><span class="line">        return newBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal withdraw(Long id, BigDecimal amount) &#123;</span><br><span class="line">        return deposit(id, amount.negate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void transfer(Long fromId, Long toId, BigDecimal amount) &#123;</span><br><span class="line">        withdraw(fromId, amount);</span><br><span class="line">        deposit(toId, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们看看对应的测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes &#x3D; AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">@ActiveProfiles(&quot;test&quot;)</span><br><span class="line">public class AccountServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountService service;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void deposit() throws Exception &#123;</span><br><span class="line">        BigDecimal start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line"></span><br><span class="line">        service.deposit(1L, amount);</span><br><span class="line">        BigDecimal finish &#x3D; start.add(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void withdraw() throws Exception &#123;</span><br><span class="line">        BigDecimal start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line"></span><br><span class="line">        service.withdraw(1L, amount);</span><br><span class="line">        BigDecimal finish &#x3D; start.subtract(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void transfer() throws Exception &#123;</span><br><span class="line">        BigDecimal acct1start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal acct2start &#x3D; service.getBalance(2L);</span><br><span class="line"></span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line">        service.transfer(1L, 2L, amount);</span><br><span class="line">        BigDecimal acct1finish &#x3D; acct1start.subtract(amount);</span><br><span class="line">        BigDecimal acct2finish &#x3D; acct2start.add(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(acct1finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">        assertThat(acct2finish, is(closeTo(service.getBalance(2L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里事务运行的没问题。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记07-Hibernate JPA与Spring Data</title>
    <url>/2016/08/24/Spring%E7%AC%94%E8%AE%B007-Hibernate%20JPA%E4%B8%8ESpring%20Data/</url>
    <content><![CDATA[<h2 id="7-1-映射JPA实体"><a href="#7-1-映射JPA实体" class="headerlink" title="7.1 映射JPA实体"></a>7.1 映射JPA实体</h2><p>JPA: Java Persistence API 它是从EJB3中抽取出来的。</p>
<ul>
<li><code>EntityManagerFactory</code></li>
<li><code>EntityManager</code></li>
<li><code>persistence.xml</code></li>
<li><code>@Entity</code></li>
<li><code>@Column</code></li>
<li><code>@Table</code></li>
</ul>
<p>要使用JPA，我们需要添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile group: &#39;javax&#39;, name: &#39;javaee-api&#39;, version: &#39;7.0&#39;</span><br></pre></td></tr></table></figure>

<p>我们来新建数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Account &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Long id;</span><br><span class="line">    private BigDecimal balance;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后配置数据源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">@PropertySource(&quot;classpath:prod.properties&quot;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private Environment env;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource() &#123;</span><br><span class="line">        BasicDataSource dataSource &#x3D; new BasicDataSource();</span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(&quot;db.driver&quot;));</span><br><span class="line">        dataSource.setUrl(env.getProperty(&quot;db.url&quot;));</span><br><span class="line">        dataSource.setUsername(env.getProperty(&quot;db.user&quot;));</span><br><span class="line">        dataSource.setPassword(env.getProperty(&quot;db.pass&quot;));</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-Entity-Manager和Vendor-Adapter"><a href="#7-2-Entity-Manager和Vendor-Adapter" class="headerlink" title="7.2 Entity Manager和Vendor Adapter"></a>7.2 Entity Manager和Vendor Adapter</h2><p>首先我们先添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile group: &#39;org.springframework&#39;, name: &#39;spring-jdbc&#39;, version: &#39;4.3.2.RELEASE&#39; &#x2F;&#x2F;1. jdbc</span><br><span class="line">    compile group: &#39;org.springframework&#39;, name: &#39;spring-orm&#39;, version: &#39;4.3.2.RELEASE&#39; &#x2F;&#x2F;2. orm</span><br><span class="line">    compile group: &#39;org.apache.commons&#39;, name: &#39;commons-dbcp2&#39;, version: &#39;2.1.1&#39;  &#x2F;&#x2F;3. dbcp</span><br><span class="line">    compile group: &#39;org.hibernate&#39;, name: &#39;hibernate-core&#39;, version: &#39;5.2.2.Final&#39; &#x2F;&#x2F;4. hibernate</span><br><span class="line">	&#x2F;&#x2F;...</span><br><span class="line"></span><br><span class="line">    compile &#39;com.h2database:h2:1.4.192&#39; &#x2F;&#x2F;5. h2驱动</span><br><span class="line">    compile group: &#39;mysql&#39;, name: &#39;mysql-connector-java&#39;, version: &#39;6.0.3&#39; &#x2F;&#x2F;6. mysql驱动</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>现在我们来修改<code>AppConfig</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public JpaVendorAdapter jpaVendorAdapter() &#123;</span><br><span class="line">    HibernateJpaVendorAdapter adapter &#x3D; new HibernateJpaVendorAdapter();</span><br><span class="line">    adapter.setShowSql(true);</span><br><span class="line">    adapter.setGenerateDdl(true);</span><br><span class="line">    adapter.setDatabase(Database.MYSQL);</span><br><span class="line">    return adapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public LocalContainerEntityManagerFactoryBean entityManagerFactory (</span><br><span class="line">        DataSource dataSource, JpaVendorAdapter jpaVendorAdapter</span><br><span class="line">) &#123;</span><br><span class="line">    Properties props &#x3D; new Properties();</span><br><span class="line">    props.setProperty(&quot;hibernate.format_sql&quot;, String.valueOf(true));</span><br><span class="line"></span><br><span class="line">    LocalContainerEntityManagerFactoryBean emf &#x3D; new LocalContainerEntityManagerFactoryBean();</span><br><span class="line">    emf.setDataSource(dataSource);</span><br><span class="line">    emf.setPackagesToScan(&quot;lx.spring.core.entities&quot;);</span><br><span class="line">    emf.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class="line">    emf.setJpaProperties(props);</span><br><span class="line"></span><br><span class="line">    return emf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public PlatformTransactionManager transactionManager(EntityManagerFactory emf) &#123;</span><br><span class="line">    return new JpaTransactionManager(emf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public BeanPostProcessor persistenceTranslation() &#123;</span><br><span class="line">    return new PersistenceAnnotationBeanPostProcessor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-实现JPA-Repository"><a href="#7-3-实现JPA-Repository" class="headerlink" title="7.3 实现JPA Repository"></a>7.3 实现JPA Repository</h2><p>现在我们用EntityManagerFactory来实现JPA Repository。</p>
<p>我们来创建<code>AccountRepository</code>接口和<code>JpaAccountRepository</code>类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package lx.spring.core.repositories;</span><br><span class="line"></span><br><span class="line">import lx.spring.core.entities.Account;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface AccountRepository &#123;</span><br><span class="line">    List&lt;Account&gt; getAccounts();</span><br><span class="line"></span><br><span class="line">    Account getAccount(Long id);</span><br><span class="line"></span><br><span class="line">    int getNumberOfAccounts();</span><br><span class="line"></span><br><span class="line">    Long createAccount(BigDecimal initialBalance);</span><br><span class="line"></span><br><span class="line">    int deleteAccount(Long id);</span><br><span class="line"></span><br><span class="line">    void updateAccount(Account account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package lx.spring.core.repositories;</span><br><span class="line"></span><br><span class="line">import lx.spring.core.entities.Account;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import javax.persistence.EntityManager;</span><br><span class="line">import javax.persistence.PersistenceContext;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class JpaAccountRepository implements AccountRepository &#123;</span><br><span class="line">    private long nextId &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    @PersistenceContext &#x2F;&#x2F;Spring会注入</span><br><span class="line">    private EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Account&gt; getAccounts() &#123;</span><br><span class="line">        return entityManager.createQuery(&quot;select a from Account a&quot;, Account.class).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Account getAccount(Long id) &#123;</span><br><span class="line">        return entityManager.find(Account.class, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getNumberOfAccounts() &#123;</span><br><span class="line">        String jpaText &#x3D; &quot;select count(a.id) from Account a&quot;;</span><br><span class="line">        Long result &#x3D; (Long) entityManager.createQuery(jpaText).getSingleResult();</span><br><span class="line">        return result.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Long createAccount(BigDecimal initialBalance) &#123;</span><br><span class="line">        long id &#x3D; nextId++;</span><br><span class="line">        entityManager.persist(new Account(id, initialBalance));</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int deleteAccount(Long id) &#123;</span><br><span class="line">        entityManager.remove(getAccount(id));</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void updateAccount(Account account) &#123;</span><br><span class="line">        entityManager.merge(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们用的不是标准的SQL，而是JPA表达式。而且像<code>select count(a.id) from Account a</code>这些语句里都是类名和字段名，所以是区分大小写的。</p>
<h2 id="7-4-测试"><a href="#7-4-测试" class="headerlink" title="7.4 测试"></a>7.4 测试</h2><p>我们创建的测试和上一节类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes&#x3D;AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">public class JpaAccountRepositoryTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository repository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccounts() throws Exception &#123;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; repository.getAccounts();</span><br><span class="line">        assertThat(accounts.size(), is(3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getNumberOfAccounts() throws Exception &#123;</span><br><span class="line">        assertThat(repository.getNumberOfAccounts(), is(3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(1L);</span><br><span class="line">        assertThat(account.getId(), is(1L));</span><br><span class="line">        &#x2F;&#x2F;2. 近似</span><br><span class="line">        assertThat(new BigDecimal(&quot;100.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void createAccount() throws Exception &#123;</span><br><span class="line">        Long id &#x3D; repository.createAccount(new BigDecimal(&quot;250.00&quot;));</span><br><span class="line">        &#x2F;&#x2F;3. 非空</span><br><span class="line">        assertThat(id, is(notNullValue()));</span><br><span class="line"></span><br><span class="line">        Account account &#x3D; repository.getAccount(id);</span><br><span class="line">        assertThat(account.getId(), is(id));</span><br><span class="line">        assertThat(new BigDecimal(&quot;250.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void updateAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.getAccount(1L);</span><br><span class="line">        BigDecimal current &#x3D; account.getBalance();</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line">        account.setBalance(current.add(amount));</span><br><span class="line">        repository.updateAccount(account);</span><br><span class="line"></span><br><span class="line">        Account again &#x3D; repository.getAccount(1L);</span><br><span class="line">        assertThat(again.getBalance(), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void deleteAccount() throws Exception &#123;</span><br><span class="line">        for (Account account: repository.getAccounts()) &#123;</span><br><span class="line">            repository.deleteAccount(account.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        assertThat(repository.getNumberOfAccounts(), is(0));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes &#x3D; AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">public class AccountServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountService service;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void deposit() throws Exception &#123;</span><br><span class="line">        BigDecimal start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line"></span><br><span class="line">        service.deposit(1L, amount);</span><br><span class="line">        BigDecimal finish &#x3D; start.add(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void withdraw() throws Exception &#123;</span><br><span class="line">        BigDecimal start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line"></span><br><span class="line">        service.withdraw(1L, amount);</span><br><span class="line">        BigDecimal finish &#x3D; start.subtract(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void transfer() throws Exception &#123;</span><br><span class="line">        BigDecimal acct1start &#x3D; service.getBalance(1L);</span><br><span class="line">        BigDecimal acct2start &#x3D; service.getBalance(2L);</span><br><span class="line"></span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line">        service.transfer(1L, 2L, amount);</span><br><span class="line">        BigDecimal acct1finish &#x3D; acct1start.subtract(amount);</span><br><span class="line">        BigDecimal acct2finish &#x3D; acct2start.add(amount);</span><br><span class="line"></span><br><span class="line">        assertThat(acct1finish, is(closeTo(service.getBalance(1L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">        assertThat(acct2finish, is(closeTo(service.getBalance(2L), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-5-Spring-Data-JPA"><a href="#7-5-Spring-Data-JPA" class="headerlink" title="7.5 Spring Data JPA"></a>7.5 Spring Data JPA</h2><p>Spring Data JPA能够进一步简化我们的应用。首先我们添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile group: &#39;org.springframework.data&#39;, name: &#39;spring-data-jpa&#39;, version: &#39;1.10.2.RELEASE&#39;</span><br></pre></td></tr></table></figure>

<p>然后我们修改<code>AppConfig.java</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(basePackages &#x3D; &quot;lx.spring.core&quot;)</span><br><span class="line">@EnableJpaRepositories(basePackages &#x3D; &quot;lx.spring.core.repositories&quot;) &#x2F;&#x2F;这个注解是用来发现spring data jpa的</span><br><span class="line">@PropertySource(&quot;classpath:prod.properties&quot;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">public class AppConfig &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>@EnableJpaRepositories</code>注解。</p>
<p>接着，我们修改<code>AccountRepository</code>并删除对应的实现类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface AccountRepository extends JpaRepository&lt;Account, Long&gt;&#123;</span><br><span class="line">    List&lt;Account&gt; findAccountsByBalanceGreaterThanEqual(BigDecimal amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里我们继承了<code>JpaRepository</code>，这样就可以了。不需要实现什么。</p>
<p>同时，我们定义了<code>findAccountsByBalanceGreaterThanEqual</code>方法，这个名称是约定的，<code>find</code>表示查找，<code>By</code>后面的是字段，<code>GreaterThanEqual</code>是条件。</p>
<p>此时，我们在测试中调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes&#x3D;AppConfig.class)</span><br><span class="line">@Transactional</span><br><span class="line">public class JpaAccountRepositoryTest &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountRepository repository;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccounts() throws Exception &#123;</span><br><span class="line">        List&lt;Account&gt; accounts &#x3D; repository.findAll();</span><br><span class="line">        assertThat(accounts.size(), is(3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getNumberOfAccounts() throws Exception &#123;</span><br><span class="line">        assertThat(repository.count(), is(3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void getAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.findOne(1L);</span><br><span class="line">        assertThat(account.getId(), is(1L));</span><br><span class="line">        &#x2F;&#x2F;2. 近似</span><br><span class="line">        assertThat(new BigDecimal(&quot;100.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void createAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; new Account(99L, new BigDecimal(&quot;250.00&quot;));</span><br><span class="line">        repository.save(account);</span><br><span class="line">        Long id &#x3D; account.getId();</span><br><span class="line">        &#x2F;&#x2F;3. 非空</span><br><span class="line">        assertThat(id, is(notNullValue()));</span><br><span class="line"></span><br><span class="line">        Account again &#x3D; repository.findOne(id);</span><br><span class="line">        assertThat(again.getId(), is(id));</span><br><span class="line">        assertThat(new BigDecimal(&quot;250.0&quot;), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void updateAccount() throws Exception &#123;</span><br><span class="line">        Account account &#x3D; repository.findOne(1L);</span><br><span class="line">        BigDecimal current &#x3D; account.getBalance();</span><br><span class="line">        BigDecimal amount &#x3D; new BigDecimal(&quot;50.0&quot;);</span><br><span class="line">        account.setBalance(current.add(amount));</span><br><span class="line">        repository.save(account);</span><br><span class="line"></span><br><span class="line">        Account again &#x3D; repository.findOne(1L);</span><br><span class="line">        assertThat(again.getBalance(), is(closeTo(account.getBalance(), new BigDecimal(&quot;0.01&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void deleteAccount() throws Exception &#123;</span><br><span class="line">        repository.deleteAll();</span><br><span class="line">        assertThat(repository.count(), is(0L));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到只是方法名变了，怎么样，是不是很简单？</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot学习笔记</title>
    <url>/2016/04/30/spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>##1. 环境配置</p>
<h3 id="1-1-创建应用"><a href="#1-1-创建应用" class="headerlink" title="1.1 创建应用"></a>1.1 创建应用</h3><p>打开idea,新建应用：</p>
<p><img src="/images/QQ20160430-0.png" alt="img"></p>
<p>然后输入包名、应用名：</p>
<p><img src="/images/QQ20160430-1.png" alt="img"></p>
<p>其他默认。</p>
<h3 id="1-2-修改build-gradle"><a href="#1-2-修改build-gradle" class="headerlink" title="1.2 修改build.gradle"></a>1.2 修改build.gradle</h3><p>打开build.gradle，修改dependencies:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group &#39;io.github.liulixiang1988&#39;</span><br><span class="line">version &#39;1.0-SNAPSHOT&#39;</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;java&#39;</span><br><span class="line">apply plugin: &#39;spring-boot&#39;</span><br><span class="line"></span><br><span class="line">sourceCompatibility &#x3D; 1.5</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，我们使用spring boot，它依赖于spring mvc的。并且，添加了<code>buildscript</code>和<code>apply plugin: &#39;spring-boot&#39;</code>，用来运行spring应用。</p>
<p>然后在项目根目录下新建<code>src/main/java</code>文件夹。</p>
<p>现在通过IDEA的View-&gt;Tools View-&gt;Gradle打开Gradle面板，点击同步图标来下载安装依赖。</p>
<p>###1.3 添加spring配置文件</p>
<p>在<code>src/main/java</code>中新建包<code>io.github.liulixiang1988</code>。并在这个包里新建<code>AppConfig.java</code>。它用来启动应用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Appconfig<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，右键选择运行gradle面板下的Tasks/application/bootRun任务。</p>
<p>打开浏览器<a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a> 可以看到页面：</p>
<p><img src="/images/2016-05-01_09-48-40.png" alt="img"></p>
<p>这就说明你成功了。</p>
<h2 id="2-创建控制器和视图"><a href="#2-创建控制器和视图" class="headerlink" title="2. 创建控制器和视图"></a>2. 创建控制器和视图</h2><h3 id="2-1-创建控制器处理HTTP请求"><a href="#2-1-创建控制器处理HTTP请求" class="headerlink" title="2.1 创建控制器处理HTTP请求"></a>2.1 创建控制器处理HTTP请求</h3><p>首先在<code>io.github.liulixiang1988</code>下创建一个包<code>controller</code>。然后在这个包里创建<code>GifController</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">//1. 标识控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">//2. 添加映射</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> <span class="comment">//3. 返回响应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listGifs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"List of all gifs"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加过Controller之后，应用并不能自己发现Controller，因此，我们修改<code>AppConfig.java</code>，添加<code>@ComponentScan</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">//自动配置</span></span><br><span class="line"><span class="meta">@ComponentScan</span> <span class="comment">//扫描控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(AppConfig<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在重新运行bootRun任务，打开<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 可以看到如下响应。</p>
<p><img src="/images/2016-05-01_10-26-20.png" alt="img"></p>
<h3 id="2-2-使用Thymeleaf渲染模板"><a href="#2-2-使用Thymeleaf渲染模板" class="headerlink" title="2.2 使用Thymeleaf渲染模板"></a>2.2 使用Thymeleaf渲染模板</h3><p>我们使用Thymeleaf来渲染模板，因此，需要先修改<code>build.gradle</code>用来添加相应的库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在gradle面板中的刷新按钮安装对应的包。</p>
<p>Thymeleaf默认寻找src/main/resources/templates下的模板，因此，我们创建对应的文件夹。</p>
<p>在templates目录下面创建home.html。注意，Thymeleaf要求必须html标签必须有结束标签或者自关闭的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Giflib | Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/300x300/5fcf80/ffffff"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在修改控制器GifController:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//1. 标识控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">//2. 添加映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listGifs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>; <span class="comment">//3. 返回模板名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-添加静态文件"><a href="#2-3-添加静态文件" class="headerlink" title="2.3 添加静态文件"></a>2.3 添加静态文件</h3><p>在<code>resources</code>目录下新建<code>static</code>目录用来存放静态文件。我们在<code>static</code>文件夹下分别创建<code>css</code>, <code>fonts</code>, <code>js</code>文件夹。直接把bootstrap添加进来。</p>
<p>修改<code>home.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Giflib | Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/app.css&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/gifs/compiler-bot.gif&#125;"</span> <span class="attr">alt</span>=<span class="string">"logo"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要说明的是：</p>
<ul>
<li>添加<code>xmlns:th</code></li>
<li>静态文件的链接是以<code>static</code>文件夹为根目录，使用<code>@{}</code>引入。</li>
</ul>
<h2 id="3-模型、数据存取"><a href="#3-模型、数据存取" class="headerlink" title="3. 模型、数据存取"></a>3. 模型、数据存取</h2><h3 id="3-1-数据注入到模板"><a href="#3-1-数据注入到模板" class="headerlink" title="3.1 数据注入到模板"></a>3.1 数据注入到模板</h3><p>首先，创建<code>model</code>模块，并在下面创建<code>Gif.java</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gif</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LocalDate dateUploaded;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> favorite;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Gif</span><span class="params">(String name, LocalDate dateUploaded, String username, <span class="keyword">boolean</span> favorite)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.dateUploaded = dateUploaded;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.favorite = favorite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getDateUploaded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dateUploaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateUploaded</span><span class="params">(LocalDate dateUploaded)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateUploaded = dateUploaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFavorite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> favorite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFavorite</span><span class="params">(<span class="keyword">boolean</span> favorite)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.favorite = favorite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>GifController</code>，注入数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//1. 标识控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">//2. 添加映射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listGifs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"home"</span>; <span class="comment">//3. 返回模板名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/gif"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetails</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">        Gif gif = <span class="keyword">new</span> Gif(<span class="string">"compiler-bot"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">5</span>, <span class="number">1</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>);</span><br><span class="line">        modelMap.put(<span class="string">"gif"</span>, gif);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gif-details"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据注入是使用<code>ModelMap</code>来实现的。</p>
<p>打开模板<code>gif-detail.html</code>，调用注入的数据方法是<code>${}</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;frame row&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col s12&quot;&gt;</span><br><span class="line">        &lt;img th:src&#x3D;&quot;@&#123;&#39;&#x2F;gifs&#x2F;&#39;+ $&#123;gif.name&#125; +&#39;.gif&#39;&#125;&quot; alt&#x3D;&quot;gif&quot; &#x2F;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;mark favorite&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-创建数据仓库组件"><a href="#3-2-创建数据仓库组件" class="headerlink" title="3.2 创建数据仓库组件"></a>3.2 创建数据仓库组件</h3><p>创建包<code>data</code>，并在其中创建<code>GifRepository</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.model.Gif;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明组件,用于依赖注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Gif&gt; ALL_GIFS = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"android-explosion"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">5</span>, <span class="number">1</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>),</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"ben-and-mike"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">4</span>, <span class="number">10</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>),</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"book-dominos"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">4</span>, <span class="number">1</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>),</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"complier-bot"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">4</span>, <span class="number">12</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>),</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"cowboy-coder"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">4</span>, <span class="number">13</span>), <span class="string">"刘理想"</span>, <span class="keyword">false</span>),</span><br><span class="line">            <span class="keyword">new</span> Gif(<span class="string">"infinite-andrew"</span>, LocalDate.of(<span class="number">2016</span>, <span class="number">4</span>, <span class="number">15</span>), <span class="string">"刘理想"</span>, <span class="keyword">true</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gif <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Gif gif : ALL_GIFS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (gif.getName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> gif;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里使用<code>@Component</code>声明了组件，为后期的依赖注入做好准备。</p>
<p>现在修改<code>GifController</code>，添加<code>GifRepository</code>字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//依赖注入</span></span><br><span class="line">    <span class="keyword">private</span> GifRepository gifRepository;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/gif"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetails</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">        Gif gif = gifRepository.findByName(<span class="string">"ben-and-mike"</span>);</span><br><span class="line">        modelMap.put(<span class="string">"gif"</span>, gif);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gif-details"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-使用-PathVariable创建动态页"><a href="#3-3-使用-PathVariable创建动态页" class="headerlink" title="3.3 使用@PathVariable创建动态页"></a>3.3 使用<code>@PathVariable</code>创建动态页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/gif/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDetails</span><span class="params">(@PathVariable String name, ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">    Gif gif = gifRepository.findByName(name);</span><br><span class="line">    modelMap.put(<span class="string">"gif"</span>, gif);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"gif-details"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改对应的模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;col s12&quot;&gt;</span><br><span class="line">    &lt;img th:src&#x3D;&quot;@&#123;&#39;&#x2F;gifs&#x2F;&#39;+ $&#123;gif.name&#125; +&#39;.gif&#39;&#125;&quot; alt&#x3D;&quot;gif&quot; &#x2F;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; th:class&#x3D;&quot;($&#123;gif.favorite&#125; ? &#39;un&#39; : &#39;&#39;) +&#39;mark favorite&#39;&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-列表展示"><a href="#3-4-列表展示" class="headerlink" title="3.4 列表展示"></a>3.4 列表展示</h3><p>列表数据注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>) <span class="comment">//2. 添加映射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listGifs</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">    List&lt;Gif&gt; allGifs = gifRepository.getAllGifs();</span><br><span class="line">    modelMap.put(<span class="string">"gifs"</span>, allGifs);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"home"</span>; <span class="comment">//3. 返回模板名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模板展示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div th:each&#x3D;&quot;gif : $&#123;gifs&#125;&quot; class&#x3D;&quot;col s12 l4&quot;&gt;</span><br><span class="line">    &lt;a th:href&#x3D;&quot;@&#123;&#39;&#x2F;gif&#x2F;&#39;+$&#123;gif.name&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;img th:src&#x3D;&quot;@&#123;&#39;&#x2F;gifs&#x2F;&#39;+$&#123;gif.name&#125;+&#39;.gif&#39;&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; th:class&#x3D;&quot;@&#123;($&#123;gif.favorite&#125; ? &#39;un&#39;: &#39;&#39;)+&#39;mark favorite&#39;&#125;&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-MVC架构"><a href="#4-MVC架构" class="headerlink" title="4. MVC架构"></a>4. MVC架构</h2><h3 id="4-1-添加Category类"><a href="#4-1-添加Category类" class="headerlink" title="4.1 添加Category类"></a>4.1 添加Category类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Category</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-添加CategoryRepository类"><a href="#4-2-添加CategoryRepository类" class="headerlink" title="4.2 添加CategoryRepository类"></a>4.2 添加CategoryRepository类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.model.Category;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Category&gt; ALL_CATEGORIES = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> Category(<span class="number">1</span>, <span class="string">"Technology"</span>),</span><br><span class="line">            <span class="keyword">new</span> Category(<span class="number">2</span>, <span class="string">"People"</span>),</span><br><span class="line">            <span class="keyword">new</span> Category(<span class="number">3</span>, <span class="string">"Destruction"</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCategories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ALL_CATEGORIES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Category category :</span><br><span class="line">                ALL_CATEGORIES) &#123;</span><br><span class="line">            <span class="keyword">if</span> (category.getId() == id)&#123;</span><br><span class="line">                <span class="keyword">return</span> category;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-添加CateogryController"><a href="#4-3-添加CateogryController" class="headerlink" title="4.3 添加CateogryController"></a>4.3 添加CateogryController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.liulixiang1988.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.data.CategoryRepository;</span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.data.GifRepository;</span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.model.Category;</span><br><span class="line"><span class="keyword">import</span> io.github.liulixiang1988.model.Gif;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryRepository categoryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GifRepository gifRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/categories"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listCategories</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        List&lt;Category&gt; categories = categoryRepository.getAllCategories();</span><br><span class="line">        modelMap.put(<span class="string">"categories"</span>, categories);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"categories"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/category/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">category</span><span class="params">(@PathVariable <span class="keyword">int</span> id, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        Category category = categoryRepository.findById(id);</span><br><span class="line">        modelMap.put(<span class="string">"category"</span>, category);</span><br><span class="line">        List&lt;Gif&gt; gifs = gifRepository.findByCategoryId(id);</span><br><span class="line">        modelMap.put(<span class="string">"gifs"</span>, gifs);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"category"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-修改模板"><a href="#4-4-修改模板" class="headerlink" title="4.4 修改模板"></a>4.4 修改模板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;search-bar container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col s12&quot;&gt;</span><br><span class="line">            &lt;form action&#x3D;&quot;#&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;input-field&quot;&gt;</span><br><span class="line">                    &lt;input name&#x3D;&quot;q&quot; type&#x3D;&quot;search&quot; placeholder&#x3D;&quot;Search all gifs...&quot; required&#x3D;&quot;required&quot; autocomplete&#x3D;&quot;off&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;i class&#x3D;&quot;material-icons&quot;&gt;search&lt;&#x2F;i&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;form&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;categories container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            Repeat the div element for each object in the &#39;categories&#39;</span><br><span class="line">            collection of the model map. Each object in the loop</span><br><span class="line">            should be named &#39;category&#39;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;div th:each&#x3D;&quot;category: $&#123;categories&#125;&quot; class&#x3D;&quot;col s12 l4&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;card-content&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;card-title&quot;&gt;</span><br><span class="line">                        &lt;!--</span><br><span class="line">                            Set the href attribute of the a tag to be the URI to</span><br><span class="line">                            a specific category according to the category&#39;s id.</span><br><span class="line">                            For example, &#x2F;category&#x2F;1 or &#x2F;category&#x2F;2</span><br><span class="line"></span><br><span class="line">                            Then, set the text between the a tags to be the category name,</span><br><span class="line">                            coming from the &#39;name&#39; field of the &#39;category&#39; object</span><br><span class="line">                            in the model map</span><br><span class="line">                        --&gt;</span><br><span class="line">                        &lt;a th:href&#x3D;&quot;@&#123;&#39;&#x2F;category&#x2F;&#39;+$&#123;category.id&#125;&#125;&quot; th:text&#x3D;&quot;$&#123;category.name&#125;&quot;&gt;Category Name&lt;&#x2F;a&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gifs container&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        In the div element, replace the &#39;category name&#39; text</span><br><span class="line">        with the value of the &#39;name&#39; field of the &#39;category&#39;</span><br><span class="line">        object from the model map</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;chip&quot; th:text&#x3D;&quot;$&#123;category.name&#125;&quot;&gt;category name&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            Repeat the div element for each object in the &#39;gifs&#39;</span><br><span class="line">            collection of the model map. Each object in the loop</span><br><span class="line">            should be named &#39;gif&#39;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;div th:each&#x3D;&quot;gif : $&#123;gifs&#125;&quot; class&#x3D;&quot;col s12 l4&quot;&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">                    In the a tag, make the href attribute point to</span><br><span class="line">                    the GIF detail page using the &#39;name&#39; field of</span><br><span class="line">                    the &#39;gif&#39; object from the loop above</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;a th:href&#x3D;&quot;@&#123;&#39;&#x2F;gif&#x2F;&#39;+ $&#123;gif.name&#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                    In the img tag, make the src attribute point</span><br><span class="line">                    to the static GIF image, according to the &#39;name&#39;</span><br><span class="line">                    field of the &#39;gif&#39; object from the loop above</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;img th:src&#x3D;&quot;@&#123;&#39;&#x2F;gifs&#x2F;&#39;+ $&#123;gif.name&#125; +&#39;.gif&#39;&#125;&quot; &#x2F;&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                    In the a tag, make the class attribute have the value</span><br><span class="line">                    of &#39;mark favorite&#39; or &#39;unmark favorite&#39; according to</span><br><span class="line">                    the &#39;favorite&#39; field of the &#39;gif&#39; object from the</span><br><span class="line">                    loop above</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;#&quot; th:class&#x3D;&quot;($&#123;gif.favorite&#125; ? &#39;un&#39; : &#39;&#39;) +&#39;mark favorite&#39;&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Django REST Framework笔记-01 介绍与安装</title>
    <url>/2014/09/08/Django%20REST%20Framework%E7%AC%94%E8%AE%B0-01%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、-Django-Rest-Framework介绍"><a href="#一、-Django-Rest-Framework介绍" class="headerlink" title="一、 Django Rest Framework介绍"></a>一、 Django Rest Framework介绍</h2><p>项目地址：<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">http://www.django-rest-framework.org/</a></p>
<p>Django REST framewrok（简称DRF），强大而且灵活的工具箱，它使创建Web API变得简单。</p>
<p>你需要使用REST框架的一些原因：</p>
<ul>
<li>基于Web可浏览的API能让你赢得更多开发者</li>
<li>包含OAuth1a和OAuth2的认证机制</li>
<li>序列化同时支持ORM和非ORM的数据源</li>
<li>自定义，如果不想用更为强大的功能，可以只使用常规的函数视图</li>
<li>大量的文档，牛叉的社区支持</li>
<li>大公司比如Mozilla和Eventbrite都用它，靠谱~</li>
</ul>
<p><img src="http://www.django-rest-framework.org/img/quickstart.png" alt="Browsable API"></p>
<h2 id="二、安装需求"><a href="#二、安装需求" class="headerlink" title="二、安装需求"></a>二、安装需求</h2><p>REST框架具有以下要求：</p>
<ul>
<li>Python(2.6.5+, 2.7, 3.2, 3.3)</li>
<li>Django(1.4.2+, 1.5, 1.6, 1.7)</li>
</ul>
<p>下面的包是可选的：</p>
<ul>
<li><a href="http://pypi.python.org/pypi/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - 支持可浏览的API</li>
<li><a href="http://pypi.python.org/pypi/PyYAML" target="_blank" rel="noopener">PyYAML</a> (3.10+) - 支持YAML的content-type</li>
<li><a href="https://pypi.python.org/pypi/defusedxml" target="_blank" rel="noopener">defusedxml</a> (0.3+) - 支持XML的content-type</li>
<li><a href="http://pypi.python.org/pypi/django-filter" target="_blank" rel="noopener">django-filter</a> (0.5.4+) - 支持过滤</li>
<li><a href="https://bitbucket.org/david/django-oauth-plus/wiki/Home" target="_blank" rel="noopener">django-oauth-plus</a> (2.0+)和<a href="https://github.com/simplegeo/python-oauth2" target="_blank" rel="noopener">oauth2</a> (1.5.211+) - 支持OAuth 1.0a</li>
<li><a href="https://github.com/caffeinehit/django-oauth2-provider" target="_blank" rel="noopener">django-oauth2-provider</a> (0.2.3+) - 支持OAuth 2.0</li>
<li><a href="https://github.com/lukaszb/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - 支持对象级别的权限控制</li>
</ul>
<p><strong>注意</strong>: <code>oauth2</code>包很容易让人误解为OAuth2，其实只支持OAuth 1.0a，并且注意在Python3中OAuth 1.0a和Oauth2.0不能同时存在。</p>
<h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p>1、使用<code>pip</code>进行安装，包含那些你想要的可选包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       # Markdown support for the browsable API.</span><br><span class="line">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure>

<p>或者从github上克隆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:tomchristie&#x2F;django-rest-framework.git</span><br></pre></td></tr></table></figure>

<p>2、添加<code>rest_framework</code>到settings.py的<code>INSTALLED_APPS</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>3、(可选)如果想要增加可浏览的API，你也将需要添加REST框架的login和logout视图。添加如下行到根<code>urls.py</code>文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，URL路径可以是任意的。但是必须使用<code>&#39;rest_framework&#39;</code>命名空间来包含<code>&#39;rest_framework.urls&#39;</code></p>
<h2 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h2><p>来看一个用REST框架建立基于model的简单API例子。</p>
<p>我们将创建一个获取获取工程用户信息的读写API。</p>
<p>所有REST框架的全局设置都被保存到一个叫做<code>REST_FRAMEWORK</code>的配置字典中。我们在<code>settings.py</code>模块中添加下面的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 使用Django标准的`django.contrib.auth`权限,</span></span><br><span class="line">    <span class="comment"># 或者对未验证的用户使用只读权限</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要忘了在<code>INSTALLED_APPS</code>中添加<code>rest_framework</code>。</p>
<p>现在我们已经准备好了创建API了。下面是项目的根<code>urls.py</code>模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers, serializers, viewsets</span><br><span class="line"></span><br><span class="line"><span class="comment"># Serializers 定义了如何展示API</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = (<span class="string">'url'</span>, <span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'is_staff'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ViewSets定义了View的行为</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Routers提供了一种简单的方法来自动决定如何路由</span></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'users'</span>, UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自动路由来提供API</span></span><br><span class="line"><span class="comment"># 另外，提供了登录查看web API的功能</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</span><br><span class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>现在可以在浏览器中输入<a href="http://127.0.0.1:8000/来打开API了。并且查看你刚创建的&#39;users&#39;" target="_blank" rel="noopener">http://127.0.0.1:8000/来打开API了。并且查看你刚创建的&#39;users&#39;</a> API。如果你在右上角点登录，那么现在就应该可以添加、创建和删除用户了。</p>
<h2 id="五、快速开始"><a href="#五、快速开始" class="headerlink" title="五、快速开始"></a>五、快速开始</h2><p>迫不及待的想要开始了？<a href="http://www.django-rest-framework.org/tutorial/quickstart" target="_blank" rel="noopener">快速开始</a>是最快的方法让你能够创建并运行REST API的方法。</p>
<h2 id="六、教程"><a href="#六、教程" class="headerlink" title="六、教程"></a>六、教程</h2><p>教程将让你通过REST框架创建每一部分。学习它需要一些时间，但是它会让你对每一部分如何相互匹配在一起邮个全方位的了解，强烈建议读一下。</p>
<ul>
<li><a href="http://www.django-rest-framework.org/tutorial/1-serialization" target="_blank" rel="noopener">1-序列化</a></li>
<li><a href="http://www.django-rest-framework.org/tutorial/2-requests-and-responses" target="_blank" rel="noopener">2-请求和相应</a></li>
<li><a href="http://www.django-rest-framework.org/tutorial/3-class-based-views" target="_blank" rel="noopener">3-基于类的视图</a></li>
<li><a href="http://www.django-rest-framework.org/tutorial/4-authentication-and-permissions" target="_blank" rel="noopener">4-认证与权限</a></li>
<li><a href="http://www.django-rest-framework.org/tutorial/5-relationships-and-hyperlinked-apis" target="_blank" rel="noopener">5-关系和超链接API</a></li>
<li><a href="http://www.django-rest-framework.org/tutorial/6-viewsets-and-routers" target="_blank" rel="noopener">6-视图集合和路由</a></li>
</ul>
<p>为了测试，我们提供了一个API教程结束时的例子，在<a href="http://restframework.herokuapp.com/" target="_blank" rel="noopener">这里</a>.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python, Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django SQL Server数据库驱动,根据现有数据库生成models以及数据库迁移</title>
    <url>/2014/09/26/Django%20SQL%20Server%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8%EF%BC%8C%E5%8F%8D%E5%90%91%E7%94%9F%E6%88%90models%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="1-SQL-Sever驱动"><a href="#1-SQL-Sever驱动" class="headerlink" title="1. SQL Sever驱动"></a>1. SQL Sever驱动</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><p>mssql数据库 使用django-mssql，依赖pywin32，如果安装时发生错误，请用下面这种方法：</p>
<pre><code>pip install django-mssql --pre </code></pre><h3 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h3><p>在settings.py中，设置：</p>
<pre><code># Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases

DATABASES = {
    &apos;default&apos;: {
        &apos;ENGINE&apos;: &apos;sqlserver_ado&apos;,
        &apos;NAME&apos;: &apos;data_center&apos;,
        &apos;USER&apos;: &apos;sa&apos;,
        &apos;PASSWORD&apos;: &apos;test&apos;,
        &apos;HOST&apos;: &apos;localhost&apos;,
    }
}</code></pre><hr>
<h2 id="2-根据现有数据库生产models"><a href="#2-根据现有数据库生产models" class="headerlink" title="2. 根据现有数据库生产models"></a>2. 根据现有数据库生产models</h2><pre><code>python manage.py inspectdb &gt; models.py</code></pre><hr>
<h2 id="3-数据库迁移"><a href="#3-数据库迁移" class="headerlink" title="3. 数据库迁移"></a>3. 数据库迁移</h2><h3 id="3-1-south安装"><a href="#3-1-south安装" class="headerlink" title="3.1 south安装"></a>3.1 south安装</h3><pre><code>pip install south
./manage.py syncdb</code></pre><h3 id="3-2-在新建的App中使用South"><a href="#3-2-在新建的App中使用South" class="headerlink" title="3.2 在新建的App中使用South"></a>3.2 在新建的App中使用South</h3><p>a. 前期准备<br>创建信app,并将其添加到INSTALL_APPS中：</p>
<pre><code>./manage.py startapp testapp</code></pre><p>打开app的models.py，创建model：</p>
<p>b. 第一次迁移</p>
<pre><code>./manage.py schemamigration testapp --initial
./mange.py migrate testapp</code></pre><p>c.之后的迁移</p>
<pre><code>./manage.py schemamigration testapp --auto
./mange.py migrate testapp</code></pre><hr>
<h2 id="4-Django-1-7中的数据库迁移"><a href="#4-Django-1-7中的数据库迁移" class="headerlink" title="4. Django 1.7中的数据库迁移"></a>4. Django 1.7中的数据库迁移</h2><h3 id="4-1-创建工程之后，进行第一次迁移"><a href="#4-1-创建工程之后，进行第一次迁移" class="headerlink" title="4.1 创建工程之后，进行第一次迁移"></a>4.1 创建工程之后，进行第一次迁移</h3><p>当使用<code>django-admin.py startproject mysite</code>之后，进行第一次：</p>
<pre><code>python manage.py migrate</code></pre><h3 id="4-2-之后的迁移分为3部走"><a href="#4-2-之后的迁移分为3部走" class="headerlink" title="4.2 之后的迁移分为3部走"></a>4.2 之后的迁移分为3部走</h3><ul>
<li>修改model</li>
<li>使用<code>python manage.py makemigrations 迁移名称</code>创建迁移</li>
<li>使用<code>python manage.py migrate</code>应用迁移</li>
</ul>
<p><strong>注意</strong>，可以使用<code>python mange.py sqlmigrate 迁移名 版本号</code>查看迁移，比如：</p>
<pre><code>python manage.py sqlmigrate polls 00001</code></pre>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python, Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty笔记01-Netty简介</title>
    <url>/2016/08/05/Netty%E7%AC%94%E8%AE%B001-Netty%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Netty(<a href="http://netty.io" target="_blank" rel="noopener">http://netty.io</a> )是一个用来快速开发可维护高性能服务器和客户端应用的异步事件驱动网络应用框架。</p>
<p>高性能系统不仅需要我们有优秀的编码技巧，还需要对网络、多线程与并发有相关的经验。</p>
<h2 id="1-1-Java网络"><a href="#1-1-Java网络" class="headerlink" title="1.1 Java网络"></a>1.1 Java网络</h2><p>早期版本Java的<code>java.net</code>支持本地系统的socket库提供的阻塞函数。</p>
<p><img src="/images/1470366209159.png" alt="Alt text"></p>
<ul>
<li><code>accept()</code>一直阻塞直到<code>ServerSocket</code>简历了链接，它返回一个<code>Socket</code>对象用来在客户端和服务器之间进行通信。</li>
<li><code>BufferedRead</code>用来从<code>Socket</code>中读取文本；<code>PrintWriter</code>用来写入。</li>
<li><code>readLine</code>阻塞直到发送了回车换行</li>
</ul>
<p>上面的代码每次只能处理一个链接。要管理多个并发的客户端，需要为每一个新的<code>Socket</code>来分配一个<code>Thread</code>,如图：<br><img src="/images/1470366696015.png" alt="Alt text"></p>
<p>我们来思考一下这个方法：</p>
<ul>
<li>首先，很多时间线程处于等待状态，这是一种资源的浪费；</li>
<li>每个线程需要在内存上分配64k到1M的空间；</li>
<li>即使JVM支持大量的线程，但上下文之间的切换耗时。</li>
</ul>
<h3 id="1-1-1-Java-NIO"><a href="#1-1-1-Java-NIO" class="headerlink" title="1.1.1 Java NIO"></a>1.1.1 Java NIO</h3><p><code>setsockopt()</code>能够配置<code>sockets</code>，如果没有数据就立即返回。Java从1.4版开始支持<code>java.nio</code>。</p>
<h3 id="1-1-2-Selector（选择器）"><a href="#1-1-2-Selector（选择器）" class="headerlink" title="1.1.2 Selector（选择器）"></a>1.1.2 Selector（选择器）</h3><p>下图展示了一个非阻塞的设计用来避免前面讲的缺点。<br><img src="/images/1470367325039.png" alt="Alt text"></p>
<p>类<code>java.nio.channels.Selector</code>是Java非阻塞IO实现的关键。它使用事件通知API来指导<code>socket</code>集合。因为可以随时检查每个<code>socket</code>的读写完成状态，所以单个线程可以处理多并发连接。</p>
<p>总而言之，这种模型提供了一个比阻塞IO模型更好的资源管理：</p>
<ul>
<li>使用更少的线程来处理多链接，内存和上下文切换开销都更小；</li>
<li>当一个线程没有IO操作时可以被重新分配到其他任务上去。</li>
</ul>
<p>虽然很多应用都直接使用Java NIO API来创建，但要做到正确和安全还是很难。尤其是重负载的情况下处理和分发IO会很麻烦而且容易出错。这就有了高性能网络专家-Netty。</p>
<h2 id="1-2-Netty核心组建"><a href="#1-2-Netty核心组建" class="headerlink" title="1.2 Netty核心组建"></a>1.2 Netty核心组建</h2><ul>
<li><code>Channels</code></li>
<li>回调</li>
<li><code>Futures</code></li>
<li>事件和handler</li>
</ul>
<p>这些构建块代表了不同的构造类型：资源、逻辑和通知。</p>
<h3 id="1-2-1-Channel"><a href="#1-2-1-Channel" class="headerlink" title="1.2.1 Channel"></a>1.2.1 Channel</h3><p><code>Channel</code>是Java NIO的基本构造。</p>
<blockquote>
<p>an open connection to an entity such as a hardware device, a file, a network socket, or a program component that is capable of performing one or more distinct I/O operations, for example reading or writing</p>
</blockquote>
<p>可以认为<code>Channel</code>是一个用来传输数据的通道，可以被打开、关闭、链接的和断开的</p>
<h3 id="1-2-2-回调"><a href="#1-2-2-回调" class="headerlink" title="1.2.2 回调"></a>1.2.2 回调</h3><p>Netty使用回调来处理事件。一个回调被触发后，时间可以使用<code>interface ChannelHandler</code>的实现来处理。下面的例子是党新链接简历时<code>ChannelHandler</code>的回调<code>channelActive</code>就会被调用并且打印一个消息。</p>
<p><img src="/images/1470372863343.png" alt="Alt text"></p>
<h3 id="1-2-3-Futures"><a href="#1-2-3-Futures" class="headerlink" title="1.2.3 Futures"></a>1.2.3 Futures</h3><p><code>Future</code>提供了另外一种方法用来在操作完成时通知应用。可以把它看成是异步操作返回结果的占位符，只有在将来的某个点完成并且提供结果的存取。</p>
<p>JDK提供了<code>interface java.util.concurrent.Future</code>，但提供的实现只允许手工检查操作是否完成或者一直阻塞到完成为止。这种实现很笨拙，Netty提供了自己的实现<code>ChannelFuture</code>。</p>
<p><code>ChannelFuture</code>提供了附加的方法，让我们注册一个或多个<code>ChannelFutureListener</code>实例。listener(监听器)的回调方法<code>operationComplete()</code>在操作完成后背调用。监听器此时可以决定操作是否完成还是有错误。如果是后者，我们能获得一个产生的<code>Throwable</code>。简而言之，通知机制通过<code>ChannelFutureListener</code>避免了对操作是否完成的手工检查。</p>
<p>Netty的所有outbound IO操作都返回<code>ChannelFuture</code>，也就是所都是非阻塞的。</p>
<p>下面展示了<code>ChannelFuture</code>    作为IO操作的一部分被返回，这里<code>connect()</code>用来直接非阻塞返回，并且将在后台完成。<br><img src="/images/1470373573537.png" alt="Alt text"></p>
<p>下面展示了如何利用<code>ChannelFutureListener</code>.首先你链接到远程节点(remote peer)。然后对<code>ChannelFuture</code>（由<code>connect()</code>返回的）注册一个新的<code>ChannelFutureListener</code>。如果操作成功，就向<code>Channel</code>写数据，否则，会从<code>ChannelFuture</code>收到<code>Throwable</code>。</p>
<p><img src="/images/1470373831445.png" alt="Alt text"></p>
<p>如何进行错误的处理完全由你自己定，比如失败时去连接另一个同级节点。</p>
<p>回调和<code>Future</code>是整个Netty的核心。</p>
<h3 id="1-2-4-事件和handler"><a href="#1-2-4-事件和handler" class="headerlink" title="1.2.4 事件和handler"></a>1.2.4 事件和handler</h3><p>Netty使用不同的时间用来通知状态和操作的变化。它允许我们根据不同的事件触发不同的操作。这些动作包括：</p>
<ul>
<li>Logging日志</li>
<li>Data transformation 数据转换</li>
<li>流程控制Flow-control</li>
<li>应用逻辑Application logic</li>
</ul>
<p>Netty是一个网络框架，因此它的事件被氛围inbound和outbound相关的数据流。</p>
<p>被inbound数据或相关状态触发的事件有：</p>
<ul>
<li>Active或inactive connections</li>
<li>读数据(Data read)</li>
<li>用户事件(User events)</li>
<li>错误事件(Error events)</li>
</ul>
<p>outbound事件是将来要触发动作的操作结果，可能是：</p>
<ul>
<li>打开或关闭远程peer</li>
<li>写或flush数据到socket</li>
</ul>
<p>时间能够被分发到用户实现的handler类中的方法去。</p>
<p><img src="/images/1470374636314.png" alt="Alt text"></p>
<p>Netty的<code>ChannelHandler</code>提供上图中一些基本的抽象。目前为止，可以把每个handler实例看作是响应里用来处理具体事件的。</p>
<h3 id="1-2-5-合在一起"><a href="#1-2-5-合在一起" class="headerlink" title="1.2.5 合在一起"></a>1.2.5 合在一起</h3><p>我们讨论了<code>Future</code>,回调和<code>handler</code>。Netty的异步编程模型建立在<code>Future</code>和回调的概念之上的。有了这个之后，我们的应用逻辑可以避免关心这些网络操作概念。这是Netty的设计目标。</p>
<p>截取操作和转换inbound和outbound数据只需要我们提供回调或者利用返回的<code>Future</code>。这使得链式操作简单和搞笑，并且提倡书写可重用、泛型代码。</p>
<p><code>Selectors</code>，<code>Events</code>和<code>Event loops</code></p>
<p>Netty从应用中通过触发事件、消除所有硬编码分发代码来抽象<code>Selector</code>。在内部，<code>EventLoop</code>用来复制给每个<code>Channel</code>用来处理所有事件，包括：</p>
<ul>
<li>注册感兴趣的事件</li>
<li>分发事件到<code>ChannelHandlers</code></li>
<li>调度将来的动作</li>
</ul>
<p><code>EventLoop</code>自身是由单个线程来驱动的，并且在整个生命周期中都不会改变。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty笔记02-第一个Netty应用</title>
    <url>/2016/08/08/Netty%E7%AC%94%E8%AE%B002-%E7%AC%AC%E4%B8%80%E4%B8%AANetty%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>本章包含：</p>
<ul>
<li>设置开发环境</li>
<li>一个Echo服务和客户端</li>
<li>构建和测试应用</li>
</ul>
<h2 id="2-1-设置开发环境"><a href="#2-1-设置开发环境" class="headerlink" title="2.1 设置开发环境"></a>2.1 设置开发环境</h2><p>下载安装JDK和MAVEN，设置<code>JAVA_HOME</code>，并且设置<code>M2_HOME</code></p>
<h2 id="2-2-Netty的客户端和服务器概览"><a href="#2-2-Netty的客户端和服务器概览" class="headerlink" title="2.2 Netty的客户端和服务器概览"></a>2.2 Netty的客户端和服务器概览</h2><p>下图是我们的Echo服务器和客户端一览。虽然我们大部分是在写web应用，但实现服务器和客户端有助于更好的理解Netty API.<br><img src="/images/1470379065595.png" alt="Alt text"></p>
<h2 id="2-3-编写Echo服务器"><a href="#2-3-编写Echo服务器" class="headerlink" title="2.3 编写Echo服务器"></a>2.3 编写Echo服务器</h2><p>所有的Netty Server都需要：</p>
<ul>
<li><strong>至少一个</strong><code>ChannelHandler</code>:这个组建实现了服务端用于处理客户端提交的数据，它是业务逻辑。</li>
<li><strong>Bootstrapping</strong>:用来配置服务的启动代码。最少的启动代码是绑定端口。</li>
</ul>
<h3 id="2-3-1-ChannelHandler和业务逻辑"><a href="#2-3-1-ChannelHandler和业务逻辑" class="headerlink" title="2.3.1 ChannelHandler和业务逻辑"></a>2.3.1 <code>ChannelHandler</code>和业务逻辑</h3><p>在<a href="https://liulixiang1988.github.io/nettybi-ji-01-nettyjian-jie.html">上一篇</a>中，我们介绍了<code>Future</code>和回调，并且介绍了他们用于事件驱动设计。我们也讨论了<code>ChannelHandler</code>，用于接收和响应事件通知。在Netty应用中，所有的数据处理逻辑都是包含在这个核心概念里面的。</p>
<p>因为Echo服务用于响应进来的消息，它需要实现<code>interface ChannelInboundHandler</code>，它定义了用于响应<code>inbound</code>事件的方法。这个简单的应用只包含几个方法，所以从<code>ChannelInboundHandlerAdapter</code>继承就可以了，它是<code>ChannelInboundHandler</code>的一个默认实现。</p>
<p>下面的几个方法对我们很有用：</p>
<ul>
<li><code>channelRead()</code>：每个incoming消息都会调用</li>
<li><code>channelReadComplete()</code>: 本批消息中最后一个<code>channelRead()</code>被调用时通知</li>
<li><code>exceptionCaught()</code>:读操作发生异常时会调用。</li>
</ul>
<p>Echo服务的<code>ChannelHandler</code>实现是<code>EchoServerHandler</code>，如下：</p>
<p><img src="/images/1470379977358.png" alt="Alt text"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(EchoServerHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        logger.info(<span class="string">"Server received: &#123;&#125;"</span>, in.toString(CharsetUtil.UTF_8));</span><br><span class="line">        ctx.write(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//flush pending messages to the remote peer and closes the channel</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)</span><br><span class="line">                .addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"Error: &#123;&#125;, &#123;&#125;"</span>, cause.getMessage(), cause.getStackTrace());</span><br><span class="line">        <span class="comment">//关闭channel</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChannelInboundHandlerAdapter</code>有很只管的API，每个方法都可以被重写。因为你要接受数据，因此需要重写<code>channelRead()</code>。</p>
<p>重写<code>exceptionCaought()</code>允许你对任何<code>Throwable</code>子类型做出响应。</p>
<p>每个<code>Channel</code>都有一个<code>ChannelPipeline</code>关联，后者有一个<code>ChannelHandler</code>实例链。他们一个挨一个的调用。因此如果没有<code>exceptionCaught()</code>实现，就回一直传递到<code>ChannelPipeline</code>结束，并且被日志记录。因此，在应用中至少有一个<code>ChannelHandler</code>提供<code>exceptionCaught()</code>。</p>
<p>除了<code>ChannelInboundHandlerAdapter</code>之外，还有很多其他<code>ChannelHandler</code>子类型。现在只需要知道：</p>
<ul>
<li><code>ChannelHandler</code>被不同事件类型调用</li>
<li>应用实现或扩展<code>ChannelHandler</code>以便在时间不同生命周期挂载并且提供自定义应用逻辑</li>
<li>架构上，<code>ChannelHandler</code>帮助我们将业务逻辑从网络代码中解耦。</li>
</ul>
<h3 id="2-3-2-Bootstrapping服务"><a href="#2-3-2-Bootstrapping服务" class="headerlink" title="2.3.2 Bootstrapping服务"></a>2.3.2 Bootstrapping服务</h3><p>在实现了业务逻辑<code>EchoServerHandler</code>之后，现在要启动服务，这包含：</p>
<ul>
<li>绑定端口用来监听请求</li>
<li>配置<code>Channel</code>用来将<code>inbound</code>消息到通知<code>EchoServerHandler</code>实例</li>
</ul>
<blockquote>
<p><strong>传输</strong><br>传输层是用来提供端到端的通信服务。Internet通信是基于TCP传输的。<em><code>NIO</code>传输</em>几乎与TCP等同，只是它使用Java NIO对服务端性能进行了增强。</p>
</blockquote>
<p>下面是<code>EchoServer</code>类的代码<br><img src="/images/1470647423394.png" alt="Alt text"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(EchoServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoServer</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Usage: &#123;&#125; &lt;port&gt;"</span>, EchoServer<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">new</span> EchoServer(port).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> EchoServerHandler serverHandler = <span class="keyword">new</span> EchoServerHandler();</span><br><span class="line">        <span class="comment">//1. 创建事件循环组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2. 创建ServerBootstrap</span></span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            </span><br><span class="line">            b.group(group)</span><br><span class="line">                    <span class="comment">//3. 指定使用NIO传输Channel</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>) </span></span><br><span class="line"><span class="class">                    //4.指定<span class="title">socket</span>端口</span></span><br><span class="line"><span class="class">                    .<span class="title">localAddress</span>(<span class="title">new</span> <span class="title">InetSocketAddress</span>(<span class="title">port</span>)) </span></span><br><span class="line"><span class="class">                    //5. 添加<span class="title">EchoServerHandler</span>到<span class="title">ChannelPipeline</span></span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">//因为EchoServerHandler是@Sharable的,所以我们一直可以使用同一个</span></span><br><span class="line">                            socketChannel.pipeline().addLast(serverHandler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//6. 异步绑定,使用sync()等待绑定完成</span></span><br><span class="line">            ChannelFuture f = b.bind().sync(); </span><br><span class="line">            <span class="comment">//7. 获取Chaneel的CloseFuture,阻塞当前线程,知道其完成</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//8. 关闭EventLoopGroup,释放所有资源</span></span><br><span class="line">            group.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@2中创建了<code>ServerBootstrap</code>实例。因为使用的是NIO传输，所以指定<code>NioEventLoopGroup</code> @1来接受和处理新的连接，并且使用<code>NioServerSocketChannel</code>@3作为channel类型。之后，设置本地地址和端口给<code>InnetSocketAddress</code>@4. 服务会丙丁到这个地址监听新的连接请求。</p>
<p>在@5中，创建了一个特殊的类<code>ChannelInitializer</code>，这是关键。当接收一个新连接时，一个新的<code>Channel</code>子类型会被创建，<code>ChannelInitializer</code>会添加一个<code>DchoServerHandler</code>的实例到<code>Channel</code>的<code>ChannelPipeline</code>中。</p>
<p>虽然NIO可扩展，但对它的恰当配置，尤其是多线程配置，却不容易。Netty封装了这些复杂性。</p>
<p>然后我们绑定服务@6， 登台绑定完成（<code>sync()</code>调用一起当前<code>Thread</code>阻塞直到完成）。在@7中，应用汇等待，直到服务的<code>Channel</code>关闭（因为调用了<code>Channel</code>的<code>CloseFuture</code>的<code>sync()</code>）。然后可以关闭<code>EventLoopGroup</code>并且释放资源（包括所创建的线程）@8</p>
<p>这里使用NIO时因为它是目前应用最广泛的传输，得益于它的扩展性和异步性。但是也可以使用别的传输实现。如果你想在服务端使用OIO传输，那就指定<code>OioServerSocketChannel</code>和<code>OioEventLoopGroup</code>。</p>
<p>同时，我们回顾一下服务端实现的重要步骤。下面的是服务端的基础代码。</p>
<ul>
<li><code>EchoServerHandler</code>实现业务逻辑</li>
<li><code>main()</code>方法启动服务</li>
</ul>
<p>启动服务的步骤：</p>
<ul>
<li>创建<code>ServerBootstrap</code>实例</li>
<li>创建<code>NioEventLoopGroup</code>实例用来处理事件，比如接收新连接，并且读写数据</li>
<li>指定本地<code>InetSocketAddress</code>用来做服务绑定</li>
<li>为每一个<code>Channel</code>使用<code>EchoServerHandler</code>实例初始化</li>
<li>调用<code>ServerBootstrap.bind()</code>绑定到服务。</li>
</ul>
<p>至此，服务被初始化并且处于可用状态了。下一节我们实现客户端应用。</p>
<h2 id="2-4-实现Echo客户端"><a href="#2-4-实现Echo客户端" class="headerlink" title="2.4 实现Echo客户端"></a>2.4 实现Echo客户端</h2><p>Echo客户端将：</p>
<ul>
<li>连接服务</li>
<li>发送一个或多个消息</li>
<li>对于每个消息，等待并接受服务器返回</li>
<li>关闭连接</li>
</ul>
<p>服务端同样需要两步：业务逻辑和bootstrap</p>
<h3 id="2-4-1-使用ChannelHandler实现客户端逻辑"><a href="#2-4-1-使用ChannelHandler实现客户端逻辑" class="headerlink" title="2.4.1 使用ChannelHandler实现客户端逻辑"></a>2.4.1 使用<code>ChannelHandler</code>实现客户端逻辑</h3><p>客户端也使用<code>ChannelInboundHandler</code>来处理数据。这个例子中，我们扩展类<code>SimpleChannelInboundHandler</code>来处理所有的任务。这需要重写以下的方法：</p>
<ul>
<li><code>channelActive()</code>：与服务的链接建立后调用</li>
<li><code>channelRead0()</code>: 从服务端读取到消息后调用</li>
<li><code>exceptionCaught()</code>: 如果发生异常时调用</li>
</ul>
<p><img src="/images/1470653326871.png" alt="Alt text"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(EchoClientHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//当链接建立时调用,发送消息</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"Netty rocks!"</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//记录收到的消息</span></span><br><span class="line">        logger.info(<span class="string">"Client received: &#123;&#125;"</span>, msg.toString(CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"Error: &#123;&#125;, &#123;&#125;"</span>, cause.getMessage(), cause.getStackTrace());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当有数据从服务端返回时调用<code>channelRead0()</code>。注意服务端返回的数据可能是分块的。也就是说，如果服务器返回5个字节，并不能保证5各字节一次性杯接收。及时如此小的数据，<code>channelRead0()</code>也有可能被调用两次，第一次用<code>ByteBuf</code>（Netty的<code>byte</code>容器）保存3个字节，第二个用<code>ByteBuf</code>保存2个字节。作为一个流协议，TCP保证每个字节按顺序接收。</p>
<p><strong>SimpleChannelInboundHandler vs ChannelInboundHandler</strong></p>
<p>在客户端，当<code>channelRead0()</code>完成，你就有了incoming消息。当方法返回时，<code>SimpleChannelInboundHandler</code>负责释放<code>ByteBuf</code>的内存。</p>
<p>在服务端，你也要响应incoming消息，然后使用<code>write()</code>（它是异步的），但当<code>channelRead()</code>返回时操作还可能没完成。因此，<code>EchoServerHandler</code>继承<code>ChannelInboundHandlerAdapter</code>，它不负责释放消息。消息由<code>EchoServerHandler</code>的<code>channelReadComplet()</code>中<code>writeAndFlush()</code>释放。</p>
<h3 id="2-4-2-启动客户端"><a href="#2-4-2-启动客户端" class="headerlink" title="2.4.2 启动客户端"></a>2.4.2 启动客户端</h3><p><img src="./1470654891688.png" alt="Alt text"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(EchoClient<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group)</span><br><span class="line">                    .channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">remoteAddress</span>(<span class="title">new</span> <span class="title">InetSocketAddress</span>(<span class="title">host</span>, <span class="title">port</span>))</span></span><br><span class="line"><span class="class">                    .<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture f = b.connect().sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"Usage: &#123;&#125; &lt;host&gt; &lt;port&gt;"</span>, EchoClient<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String host = args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">new</span> EchoClient(host, port).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-启动运行Server-Client"><a href="#2-5-启动运行Server-Client" class="headerlink" title="2.5 启动运行Server/Client"></a>2.5 启动运行Server/Client</h2><h3 id="2-5-1-构建"><a href="#2-5-1-构建" class="headerlink" title="2.5.1 构建"></a>2.5.1 构建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-运行Echo-Server和Client"><a href="#2-5-2-运行Echo-Server和Client" class="headerlink" title="2.5.2 运行Echo Server和Client"></a>2.5.2 运行Echo Server和Client</h3><p>你可以直接使用Java命令行直接运行，也可以在pom中使用<code>exec-maven-plugin</code>插件来配置。</p>
<p>打开两个窗口，分别切换到server和client对应的目录，然后运行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn exec:java</span><br></pre></td></tr></table></figure>

<p>源码：<a href="https://github.com/liulixiang1988/javademo/tree/master/netty/EchoNetty" target="_blank" rel="noopener">https://github.com/liulixiang1988/javademo/tree/master/netty/EchoNetty</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty笔记03-Netty组件和设计</title>
    <url>/2016/08/09/Netty%E7%AC%94%E8%AE%B003-Netty%E7%BB%84%E4%BB%B6%E5%92%8C%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>本章包含：</p>
<ul>
<li>Netty的技术与架构</li>
<li><code>Channel</code>, <code>EventLoop</code>, 和 <code>ChannelFuture</code></li>
<li><code>ChannelHandler</code> 和 <code>ChannelPipeline</code></li>
<li>Bootstrapping</li>
</ul>
<h2 id="3-1-Channel-EventLoop和ChannelFuture"><a href="#3-1-Channel-EventLoop和ChannelFuture" class="headerlink" title="3.1 Channel, EventLoop和ChannelFuture"></a>3.1 Channel, EventLoop和ChannelFuture</h2><p><code>Channel</code>, <code>EventLoop</code>和<code>ChannelFuture</code>可以看成是Netty对网络的抽象：</p>
<ul>
<li><code>Channel</code>:<code>Socket</code></li>
<li><code>EventLoop</code>: 控制流、多线程和并发</li>
<li><code>ChannelFuture</code>：异步通知</li>
</ul>
<h3 id="3-1-1-Channel接口"><a href="#3-1-1-Channel接口" class="headerlink" title="3.1.1 Channel接口"></a>3.1.1 Channel接口</h3><p>基本IO操作(<code>bind()</code>, <code>connect()</code>, <code>read()</code>, <code>write()</code>)依赖于底层网络传输。在基于Java的网络中，基础组成是<code>Socket</code>类。Netty的<code>Channel</code>接口提供了的API能大幅度减少直接操作<code>Socket</code>的复杂度。此外，<code>Channel</code>是所有扩展类的根类。下面是一些继承的类：</p>
<ul>
<li><code>EmbeddedChannel</code></li>
<li><code>LocalServerChannel</code></li>
<li><code>NioDatagramChannel</code></li>
<li><code>NioSctpChannel</code></li>
<li><code>NioSocketChannel</code></li>
</ul>
<h3 id="3-1-2-EventLoop接口"><a href="#3-1-2-EventLoop接口" class="headerlink" title="3.1.2 EventLoop接口"></a>3.1.2 EventLoop接口</h3><p><code>EventLoop</code>定义了Netty对连接生命区间事件处理的核心抽象。在后面的章节里我们会讨论<code>EventLoop</code>的细节。下图展示了<code>Channel</code>, <code>EventLoop</code>, <code>Thread</code>和<code>EventLoopGroup</code>之间的关系。</p>
<p><img src="/images/1470710846717.png" alt="Alt text"></p>
<p>关系是：</p>
<ul>
<li>一个<code>EventLoopGroup</code>包含一个或多个<code>EventLoop</code></li>
<li><code>EventLoop</code>在其生命周期内绑定到单个<code>Thread</code></li>
<li>所有的IO事件由<code>EventLoop</code>在其专属<code>Thread</code>内处理</li>
<li><code>Channel</code>注册到一个<code>EventLoop</code>内</li>
<li>一个<code>EventLoop</code>可以关联多个<code>Channel</code></li>
</ul>
<p>注意，这个实际中，对于给定<code>Channel</code>的IO操作都是在同一个线程内执行的，这样可以避免同步问题。</p>
<h3 id="3-1-3-ChannelFuture接口"><a href="#3-1-3-ChannelFuture接口" class="headerlink" title="3.1.3 ChannelFuture接口"></a>3.1.3 ChannelFuture接口</h3><p>Netty中所有的操作都是异步的。因为操作不一定能立即返回，因此我们需要一个方法来在后期获取结果。Netty提供了<code>ChannelFuture</code>,它的<code>addListener()</code>方法注册了<code>ChannelFutureListener</code>用来在操作完成后发出通知。</p>
<p>后面我们会深入讨论<code>EventLoop</code>和<code>EventLoopGroup</code></p>
<h2 id="3-2-Channelhandler和ChannelPipeline"><a href="#3-2-Channelhandler和ChannelPipeline" class="headerlink" title="3.2 Channelhandler和ChannelPipeline"></a>3.2 Channelhandler和ChannelPipeline</h2><p>下面我们来详细讨论如何管理数据流和执行应用处理逻辑。</p>
<h3 id="3-2-1-ChannelHandler接口"><a href="#3-2-1-ChannelHandler接口" class="headerlink" title="3.2.1 ChannelHandler接口"></a>3.2.1 ChannelHandler接口</h3><p>从开发者角度看，Netty的最基本构建式<code>ChannelHandler</code>，它包含着用来处理inbound和outbound数据的逻辑。这是因为<code>ChannelHandler</code>方法由网络事件触发。事实上，<code>ChannelHandler</code>几乎可以用来黑醋栗任何类型的动作，比如数据转换和异常处理。</p>
<p>例如，<code>ChannelInboundHandler</code>是经常实现的子接口。这个类型接收inbound事件和数据用于处理业务逻辑。也可以从<code>ChannelInboundHandler</code>中将数据作为响应flush给客户端。应用的业务逻辑通常分布在多个<code>ChannelInboundHandler</code>中。</p>
<h3 id="3-2-2-ChanelPipeline接口"><a href="#3-2-2-ChanelPipeline接口" class="headerlink" title="3.2.2 ChanelPipeline接口"></a>3.2.2 ChanelPipeline接口</h3><p><code>ChannelPipeline</code>提供了<code>ChannelHandler</code>链的容器，并且定义了API用来在链上传递inbound和outbound事件。当有<code>Channel</code>创建时，它会自动的赋值给它的<code>ChannelPipeline</code>。</p>
<p><code>ChannelHandler</code>安装到<code>ChannelPipeline</code>的过程：</p>
<ul>
<li><code>ChannelInitializer</code>被注册到<code>ServerBootstrap</code></li>
<li>调用<code>ChannelInitializer.initChannel()</code>时，<code>ChannelInitializer</code>安装一系列自定义的<code>ChannelHandler</code>到pipeline中</li>
<li><code>ChannelInitializer</code>将自己从<code>ChannelPipeline</code>中删除</li>
</ul>
<p><code>ChannelHandler</code>可以看作是一个通用容器用来处理时间和数据。</p>
<p><img src="/images/1470712617719.png" alt="Alt text"></p>
<p><code>ChannelPipeline</code>中<code>ChannelHandler</code>的执行顺序按照他们加入到链中的顺序。</p>
<p>对于客户端来说，outbound是从客户端到服务器的方向，inbound则相反。</p>
<p><img src="/images/1470713218573.png" alt="Alt text"></p>
<p>上图也说明inbound和outbound可以添加到同一个pipeline中。如果读取到一个消息，它会从pipeline头开始，并且传递给第一个<code>ChanneiInboundHandler</code>。这个handler可能修改也可能不修改数据，之后再将数据传递给下一个<code>ChannelInboundHandler</code>。最后数据到达pipeline的尾部，所有的处理会被终止。</p>
<p>outbound数据流动先从尾部开始，直到到达到头部，此时，outbound数据到达网络传输，这里是一个<code>Socket</code>。</p>
<p><strong>更多关于inbound和outbound handler</strong></p>
<p>时间可以通过每个方法的<code>ChannelHandlerContext</code>方法进行向前传递。有时你想忽略一些不感兴趣的事件，Netty提供了抽象基础类<code>ChannelInboundHandlerAdapter</code>和<code>ChannelOutboundHandlerAdapter</code>。每一个都提供了一个实现，用于将事件传递给下一个handler。我们可以扩展这个类，重写感兴趣的方法。</p>
<p>虽然inbound和outbound handler都继承自<code>ChannelHandler</code>, Netty还是会区分<code>ChannelInboundHandler</code>和<code>ChannelOutboundHandler</code>，并且确保数据只在同一类型的handler间传递。</p>
<p>当<code>ChannelHandler</code>添加到<code>ChannelPipeline</code>中时，它也被传递了一个<code>ChannelHandlerContext</code>参数。这个参数代表着<code>ChannelHandler</code>和<code>ChannelPiepline</code>之间的一个绑定。虽然这个对象可以被用于获取底层的<code>Channel</code>，但更多的是用来写outbound数据。</p>
<p>Netty中有两种方法用来发送数据。你可以直接向<code>Channel</code>或者与<code>ChannelHandler</code>关联的<code>ChannelHandlerContext</code>对象中写数据。前者由<code>ChannelPipeline</code>的尾部开始消息，后者由<code>ChannelHandlerPipeline</code>的下一个handler开始消息。</p>
<h3 id="3-2-3-ChannelHandler"><a href="#3-2-3-ChannelHandler" class="headerlink" title="3.2.3 ChannelHandler"></a>3.2.3 ChannelHandler</h3><p>Netty以多种adpater类实现的默认handler。常用的adapter有：</p>
<ul>
<li><code>ChannelHandlerAdapter</code></li>
<li><code>ChannelInboundHandlerAdapter</code></li>
<li><code>ChannelOutboundHandlerAdapter</code></li>
<li><code>ChannelDuplexHandlerAdapter</code></li>
</ul>
<p>线面我们来看看<code>ChannelHandler</code>子类型：encoder, decoder, <code>SimpleChannelInboundHandler&lt;T&gt;</code>(<code>ChannelInboundHandlerAdapter</code>的子类型)</p>
<h3 id="3-2-4-Encode和Decoder"><a href="#3-2-4-Encode和Decoder" class="headerlink" title="3.2.4 Encode和Decoder"></a>3.2.4 Encode和Decoder</h3><p>当Netty发送或者接受消息时，数据会发生转换。inbound消息会被decode，也就是会从bytes到其他格式，一般是Java对象。outbound消息会被从当前格式转换到bytes格式，这是encode。这是因为网络数据的传输都是bytes格式。</p>
<p>许多抽象类用来做encoder和decoder. 一般来说，基本类型都会有类似<code>ByteToMEssageDecoder</code>或者<code>MessageToByteEncoder</code>的名字。</p>
<p>Netty提供的所有的encoder/decoder adapter类都实现了<code>ChannelInboundHandler</code>或<code>ChannelOutboundHandler</code>。</p>
<p>对于inbound数据，<code>channelRead</code>方法/事件会被重写。这个方法会会调用<code>decode</code>方法，并且将decoded bytes传递给后面的<code>ChannelInboundHandler</code>。</p>
<p>outbound消息于此相反。</p>
<h3 id="3-2-5-抽象类SimpleChannelInboundHandler"><a href="#3-2-5-抽象类SimpleChannelInboundHandler" class="headerlink" title="3.2.5 抽象类SimpleChannelInboundHandler"></a>3.2.5 抽象类SimpleChannelInboundHandler</h3><p>应用中常用的场景是解析消息，对数据执行逻辑。要创建这样一个<code>ChannelHandler</code>，只需要继承<code>SimpleChannelInboundHandler&lt;T&gt;</code>，其中<code>T</code>是想要处理的消息类型。在这个handler中，重写一个或多个方法，并且获取<code>ChannelHandlerContext</code>引用。</p>
<p>在这种类型场景下，最重要的方法是<code>channelRead0(ChannelHandlerContext, T)</code>。</p>
<h2 id="3-3-Bootstrapping"><a href="#3-3-Bootstrapping" class="headerlink" title="3.3 Bootstrapping"></a>3.3 Bootstrapping</h2><p>Netty的bootstrap类提供了为应用网络层配置的容器。包含配置端口、主机地址等。</p>
<p>有两种类型的bootstrap，一种用于客户端(<code>Bootstrap</code>)，一种鱼鱼服务端(<code>ServerBootstrap</code>)。</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>Bootstrap</th>
<th>ServerBootstrap</th>
</tr>
</thead>
<tbody><tr>
<td>网络功能</td>
<td>连接远程主机和端口</td>
<td>绑定到本地端口</td>
</tr>
<tr>
<td>EventLoopGroup数量</td>
<td>1</td>
<td>2</td>
</tr>
</tbody></table>
<p>启动一个客户端只需要一个<code>EventLoopGroup</code>，但是<code>ServerBootStrap</code>却需要两个。这是因为服务端需要两个不同集合的<code>Channel</code>，第一个包含一个单独的<code>ServerChannel</code>来代表服务器本身监听的socket。第二个集合代表用于处理客户端请求的<code>Channel</code>。</p>
<p><img src="/images/1470717624199.png" alt="Alt text"></p>
<p>与<code>ServerChannel</code>关联的<code>EventLoopGroup</code>分配一个<code>EventLoop</code>用来负责为连接请求创建<code>Channel</code>。一旦接受了连接请求，第二个<code>EventLoopGroup</code>分配一个<code>EventLoop</code>给<code>Channel</code>。</p>
<h2 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h2><p>本章主要讨论了Netty的技术和架构。详细回顾了<code>ChannelHandler</code>, <code>ChannelPipeline</code>和bootstrapping.</p>
<p>后续章节会深入讨论这些。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Building Images &amp; Running Containers</title>
    <url>/2020/07/12/Kubernetes-Craft%20a%20Dockerfile/</url>
    <content><![CDATA[<h2 id="End-to-End"><a href="#End-to-End" class="headerlink" title="End to End"></a>End to End</h2><ol>
<li><p>Find a base image: docker.io, quay.io, gcr.io, registry.redhat.io</p>
</li>
<li><p>Craft your Dockerfile</p>
</li>
<li><p>Configure docker: <code>eval $(minikube --profile myprofile decoder-env)</code></p>
</li>
<li><p>Build your image: <code>docker build -t liulx/myimage:v1 .</code></p>
<p>a. Test via:</p>
<pre><code>- `docker run -it -p 8080:8080 --name myboot liulx/myimage:v1`
- `docker run -d -p 8080:8080 --name my boot liulx/myboot:v1`
- `curl $(minikube --profile myprofile ip):8080`</code></pre><p>b. If remote repo, do <code>docker tag</code> and <code>docker push</code></p>
<p>c. <code>docker stop containername</code> to stop testing</p>
</li>
<li><p><code>kubectl apply -f myDeployment.yaml</code></p>
</li>
<li><p><code>kubectl apply -f myService.yaml</code></p>
</li>
<li><p>Expose a URL via your kubernetes distribution’s load-balancer</p>
</li>
</ol>
<h2 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t something/animagename:tag</span><br></pre></td></tr></table></figure>

<p>The <code>.</code>indicates where to find the Dockerfile and assets to be included in the build process.</p>
<p>You can alse explicitly identify the Dockerfile:</p>
<ul>
<li><code>docker build -t somestring/animagename:tag -f somedirectory/Dockerfile_Production .</code></li>
<li><code>docker build -t somestring/animagename:tag -f somedirectory/Dockerfile_Testing .</code></li>
<li><code>docker build -f src/main/docker/Dockerfile.native -t mystuff/myimage:v1 .</code></li>
</ul>
<h2 id="Builiding-Images"><a href="#Builiding-Images" class="headerlink" title="Builiding Images"></a>Builiding Images</h2><p>Options Include:</p>
<ol>
<li><code>docker build</code> then <code>kubectl run</code> or <code>kubectl create -f deploy.yml</code></li>
<li>Jib - Maven/Gradle plugin by google</li>
<li>Shift maven plugin by Red hat</li>
<li>s2i - source to image</li>
<li>Tekton - pipeline-based image building</li>
<li>No docker: red hat’s podman, Google’s kaniko, Uber’s makisu</li>
<li>Buildpacks - similar to Heroku &amp; Cloud Foundry</li>
</ol>
<h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- &#96;kubectl create namespace demo&#96;</span><br><span class="line">- &#96;kubectl get namespace demo -o yaml&#96;</span><br><span class="line">- &#96;kubectl get namesapce demo --export -o yaml&#96;</span><br><span class="line">- &#96;kubectl delete namespace&#x2F;demo&#96;</span><br><span class="line">- &#96;kubectl config set-context --current --namespace&#x3D;myspace&#96;</span><br><span class="line">- &#96; kubectl config view --minify --template &#39;&#123;&#123; index .contexts 0 &quot;context&quot; &quot;namespace&quot; &#125;&#125;&#39;&#96; confirm your context</span><br></pre></td></tr></table></figure>

<h2 id="Pods"><a href="#Pods" class="headerlink" title="Pods"></a>Pods</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">quarkus-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">quarkus-demo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">quay.io/burrsutter/quarkus-demo:1.0.0</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="ReplicaSets"><a href="#ReplicaSets" class="headerlink" title="ReplicaSets"></a>ReplicaSets</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rs-quarkus-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">selector:</span></span><br><span class="line">       <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">quarkus-demo</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">       <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">labels:</span></span><br><span class="line">             <span class="attr">app:</span> <span class="string">quarkus-demo</span></span><br><span class="line">             <span class="attr">env:</span> <span class="string">dev</span></span><br><span class="line">       <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">quarkus-demo</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">quay.io/burrsutter/quarkus-demo:1.0.0</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>See what it produced:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods --show-labels</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE   LABELS</span><br><span class="line">rs-quarkus-demo-64dnl   1/1     Running   0          49s   app=quarkus-demo,env=dev</span><br><span class="line">rs-quarkus-demo-8pn8b   1/1     Running   0          29s   app=quarkus-demo,env=dev</span><br><span class="line">rs-quarkus-demo-ksm5f   1/1     Running   0          16s   app=quarkus-demo,env=dev</span><br></pre></td></tr></table></figure>

<h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">quarkus-demo-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">quarkus-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">quarkus-demo</span></span><br><span class="line">        <span class="attr">env:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">quarkus-demo</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/burrsutter/quarkus-demo:1.0.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>Run curl inside Pod: <code>kubectl exec -it pod name -- curl localhost:8080</code></p>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">the-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">quarkus-demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>curl those Endpoints behind that service:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ IP=$(minikube --profile 9steps ip)</span><br><span class="line">$ PORT=$(kubectl get service the-service -o jsonpath=<span class="string">"&#123;.spec.ports[*].nodePort&#125;"</span>)</span><br><span class="line">$ <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> curl <span class="variable">$IP</span>:<span class="variable">$PORT</span>; sleep .5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h2><p>Let’s scale up the application to 3 replicas, there are several possible ways to achieve this result.</p>
<p>You can edit the myboot-deployment.yml, updating replicas to 3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl replace -f kubefiles&#x2F;myboot-deployment.yml</span><br></pre></td></tr></table></figure>

<p>Or use the kubectl scale command</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl scale --replicas&#x3D;3 deployment&#x2F;myboot</span><br></pre></td></tr></table></figure>

<p>Or you might patch it</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl patch deployment&#x2F;myboot -p &#39;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:3&#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>Or use the kubectl edit command which essentially gives you “vi” for editing the deployment yaml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl edit deployment&#x2F;myboot</span><br><span class="line">&#x2F;replicas</span><br><span class="line">esc-w-q</span><br></pre></td></tr></table></figure>

<p>Note: You can use VS Code as your editor with export KUBE_EDITOR=”code -w”</p>
<p>You can then use “kubectl get pods” to see the pods that have been created</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br></pre></td></tr></table></figure>

<p>Note: 3 pods might push you out of your memory limits for your VM. Check your memory usage with:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ minishift -p 9steps ssh</span><br><span class="line"># or</span><br><span class="line">$ minikube ssh</span><br><span class="line">$ free -m</span><br><span class="line">$ top -o %MEM</span><br></pre></td></tr></table></figure>

<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>Update MyRESTController.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">greeting &#x3D; environment.getProperty(&quot;GREETING&quot;,&quot;Bonjour&quot;);</span><br></pre></td></tr></table></figure>

<p>Compile &amp; Build the fat jar</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<p>You can test with “java -jar target/boot-demo-0.0.1.jar” and “curl localhost:8080”. Ideally, you would have unit tests executed with “mvn test” as well.</p>
<p>Build the new docker image with a v2 tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker build -t 9stepsawesome&#x2F;myboot:v2 .</span><br><span class="line">$ docker images | grep myboot</span><br></pre></td></tr></table></figure>

<p>Rollout the update</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl set image deployment&#x2F;myboot myboot&#x3D;9stepsawesome&#x2F;myboot:v2</span><br><span class="line">OR</span><br><span class="line">$ kubectl set image deployment&#x2F;myboot myboot&#x3D;quay.io&#x2F;burrsutter&#x2F;myboot:v2</span><br></pre></td></tr></table></figure>

<p>And if you were running your polling curl command, you might see</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Aloha from Spring Boot! 346 on myboot-79bfc988c8-ttz5r</span><br><span class="line">Aloha from Spring Boot! 270 on myboot-79bfc988c8-ntb8d</span><br><span class="line">Aloha from Spring Boot! 348 on myboot-79bfc988c8-ttz5r</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">curl: (7) Failed to connect to 192.168.99.105 port 31218: Connection refused</span><br><span class="line">Bonjour from Spring Boot! 0 on myboot-757658fc4c-qnvqx</span><br><span class="line">Bonjour from Spring Boot! 1 on myboot-5955897c9b-zthj9</span><br></pre></td></tr></table></figure>

<p>We will be working on those errors when we address Liveness and Readiness probes in Step 7</p>
<p>For now, undo the update, going back to v1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployment&#x2F;myboot</span><br></pre></td></tr></table></figure>

<p>Scale to 1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl scale --replicas&#x3D;1 deployment&#x2F;myboot</span><br></pre></td></tr></table></figure>

<p>Hit the sysresources endpoint</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl $(minikube -p 9steps ip):$(kubectl get service&#x2F;myboot -o jsonpath&#x3D;&quot;&#123;.spec.ports[*].nodePort&#125;&quot;)&#x2F;sysresources</span><br><span class="line"> Memory: 1324 Cores: 2</span><br></pre></td></tr></table></figure>

<p>Note: you can use echo to see what this URL really looks like on your machine</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo $(minikube -p 9steps ip):$(kubectl get service&#x2F;myboot -o jsonpath&#x3D;&quot;&#123;.spec.ports[*].nodePort&#125;&quot;)&#x2F;sysresources</span><br><span class="line">192.168.99.105:30479&#x2F;sysresources</span><br></pre></td></tr></table></figure>

<p>The results of the “sysresources” call should be about 1/4 memory and all the cores that were configured for the VM. You can double check this with the following command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ minikube config view</span><br><span class="line">- cpus: 2</span><br><span class="line">- memory: 6144</span><br><span class="line">- vm-driver: virtualbox</span><br></pre></td></tr></table></figure>

<p>Now, let’s apply resource contraints via Kubernetes &amp; deployment yaml. Look at myboot-deployment-resources.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl replace -f kubefiles&#x2F;myboot-deployment-resources.yml</span><br></pre></td></tr></table></figure>

<p>Curl sysresources again</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl $(minikube -p 9steps ip):$(kubectl get service&#x2F;myboot -o jsonpath&#x3D;&quot;&#123;.spec.ports[*].nodePort&#125;&quot;)&#x2F;sysresources</span><br><span class="line">Memory: 1324 Cores: 2</span><br></pre></td></tr></table></figure>

<p>In another terminal window, watch the pods</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -w</span><br></pre></td></tr></table></figure>

<p>and now curl the consume endpoint</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl $(minikube -p 9steps ip):$(kubectl get service&#x2F;myboot -o jsonpath&#x3D;&quot;&#123;.spec.ports[*].nodePort&#125;&quot;)&#x2F;consume</span><br></pre></td></tr></table></figure>

<p>and you should see a OOMKilled</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -w</span><br><span class="line">NAME                      READY     STATUS    RESTARTS   AGE</span><br><span class="line">myboot-68d666dd8d-m9m5r   1&#x2F;1       Running   0          1m</span><br><span class="line">myboot-68d666dd8d-m9m5r   0&#x2F;1       OOMKilled   0         2m</span><br><span class="line">myboot-68d666dd8d-m9m5r   1&#x2F;1       Running   1         2m</span><br></pre></td></tr></table></figure>

<p>And you can also see the OOMKilled with the kubectl describe command</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod -l app&#x3D;myboot</span><br><span class="line">...</span><br><span class="line">    Last State:     Terminated</span><br><span class="line">      Reason:       OOMKilled</span><br><span class="line">      Exit Code:    137</span><br><span class="line">      Started:      Tue, 31 Jul 2018 13:42:18 -0400</span><br><span class="line">      Finished:     Tue, 31 Jul 2018 13:44:24 -0400</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="JIB"><a href="#JIB" class="headerlink" title="JIB"></a>JIB</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.cloud.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jib-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Build Docker Image and run:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(minishift docker-env)</span><br><span class="line">mvn compile jib:dockerBuild -Dimage=9stepsawesome/myboot:v1</span><br><span class="line">docker run -it -p 8080:8080 9stepsawesome/myboot:v1</span><br><span class="line">curl $(minishift ip):8080</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Environment</title>
    <url>/2020/07/12/Kubernetes-Install/</url>
    <content><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>OpenShift is Red Hat’s distribution of Kubernetes</p>
<p>minikube and minishift are essentially equivalent and will be used for the demonstrations/examples below.</p>
<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li>Docker or</li>
<li>Podman</li>
<li>brew install kubectx</li>
<li>minikube</li>
<li>kubectl</li>
</ul>
<h3 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h3><p>Downloads &amp; Install Kubectl CLI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MacOS</span></span><br><span class="line">$ curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/darwin/amd64/kubectl</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ chmod +x kubectl</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ brew install kubernetes-cli</span><br></pre></td></tr></table></figure>

<p>Linux &amp; Windows instructions for finding and downloading the a kubectl <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl</a></p>
<p>Download &amp; Install Minikube Cluster</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.4.0/minikube-darwin-amd64</span><br><span class="line">$ chmod +x minikube</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ brew install minikube</span><br><span class="line"><span class="comment"># if you don't have VirtualBox installed</span></span><br><span class="line">$ brew cask install virtualbox</span><br></pre></td></tr></table></figure>

<p>More Minikube releases <a href="https://github.com/kubernetes/minikube/releases" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/releases</a></p>
<p>OR</p>
<p>Download &amp; Install Minishift Cluster</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -LO https://github.com/minishift/minishift/releases/download/v1.33.0/minishift-1.33.0-darwin-amd64.tgz</span><br><span class="line">$ tar -xvf minishift-1.33.0-darwin-amd64.tgz</span><br></pre></td></tr></table></figure>

<p>More Minishift releases <a href="https://github.com/minishift/minishift/releases" target="_blank" rel="noopener">https://github.com/minishift/minishift/releases</a></p>
<p>Note: “minikube” should be interchangeable with “minishift” in the instructions below, if there is a unique aspect then that will be called out.</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> MINIKUBE_HOME=/Users/burrsutter/minikube/;</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MINIKUBE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ minikube version</span><br><span class="line">minikube version: v1.4.0</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ minishift version</span><br><span class="line">minishift v1.33.0+ba29431</span><br></pre></td></tr></table></figure>

<h3 id="Create-the-VM"><a href="#Create-the-VM" class="headerlink" title="Create the VM"></a>Create the VM</h3><p>minikube support multiple instance. Use profile to set the instance.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># minishift profile set 9steps</span></span><br><span class="line">minikube --profile 9steps config <span class="built_in">set</span> memory 6144</span><br><span class="line">minikube --profile 9steps config <span class="built_in">set</span> cpus 2 (1)</span><br><span class="line">minikube --profile 9steps config <span class="built_in">set</span> vm-driver virtualbox <span class="comment">#hyperkit (2)</span></span><br><span class="line"><span class="comment"># kubernetes version only applies to minikube</span></span><br><span class="line">minikube --profile 9steps config <span class="built_in">set</span> kubernetes-version v1.12.0 (3)</span><br><span class="line"><span class="comment"># minishift addon enable admin-user (4)</span></span><br><span class="line"><span class="comment"># minishift addon enable anyuid (5)</span></span><br><span class="line">minikube start --profile 9steps (6)</span><br></pre></td></tr></table></figure>

<ol>
<li>I use 2 cpus here because I have 6 core laptop. Keep this number at or below 50% of overall laptop resources. There is nothing in this series of exercises that is CPU intensive but minishift has a 10 pod per core limit.</li>
<li>I use virtualbox because it is available on all platforms. There a number of hypervisor options <a href="https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-minikube/#install-a-hypervisor</a></li>
<li>Setting the Kubernetes version explicitly so you know what you are getting, only applies to minikube</li>
<li>Minishift is secured by default, this creates an cluster “admin” user</li>
<li>A mechanism on OpenShift that allows the execution of an image with any user id, including root. <a href="https://github.com/burrsutter/9stepsawesome/issues/3" target="_blank" rel="noopener">https://github.com/burrsutter/9stepsawesome/issues/3</a></li>
<li>Profiles are somewhat new in minikube land. These allow you to more easily switch between versions of Kubernetes as well as configurations involving Istio and/or Knative</li>
</ol>
<h3 id="Check-status-IP-amp-Dashboard-Console"><a href="#Check-status-IP-amp-Dashboard-Console" class="headerlink" title="Check status, IP &amp; Dashboard/Console"></a>Check status, IP &amp; Dashboard/Console</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps config view</span><br><span class="line">- cpus: 2</span><br><span class="line">- memory: 6144</span><br><span class="line">- vm-driver: virtualbox</span><br><span class="line">$ minikube --profile 9steps status</span><br><span class="line">minikube: Running</span><br><span class="line">cluster: Running</span><br><span class="line">kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.103</span><br><span class="line">$ minikube --profile 9steps ip</span><br><span class="line">192.168.99.103</span><br><span class="line">$ minikube --profile 9steps dashboard --url</span><br><span class="line">http://192.168.99.103:30000</span><br><span class="line">$ minikube --profile 9steps dashboard</span><br></pre></td></tr></table></figure>

<p><img src="/images/minikube_dashboard.png" alt="Minikube Dashboard"></p>
<p>Figure 1. minikube dashboard</p>
<p><img src="/images/openshift_dashboard.png" alt="minishift Dashboard"></p>
<h3 id="Check-your-kubectl-CLI"><a href="#Check-your-kubectl-CLI" class="headerlink" title="Check your kubectl CLI"></a>Check your kubectl CLI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl config current-context</span><br><span class="line">9steps</span><br><span class="line"><span class="comment"># or in the case of minishift</span></span><br><span class="line"><span class="comment"># myproject/192-168-99-102:8443/admin</span></span><br><span class="line"></span><br><span class="line">$ kubectl version</span><br><span class="line">Client Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"13"</span>, GitVersion:<span class="string">"v1.13.3"</span>, GitCommit:<span class="string">"721bfa751924da8d1680787490c54b9179b1fed0"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2019-02-04T04:48:03Z"</span>, GoVersion:<span class="string">"go1.11.5"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"darwin/amd64"</span>&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"12"</span>, GitVersion:<span class="string">"v1.12.0"</span>, GitCommit:<span class="string">"0ed33881dc4355495f623c6f22e7dd0b7632b7c0"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2018-09-27T16:55:41Z"</span>, GoVersion:<span class="string">"go1.10.4"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"linux/amd64"</span>&#125;</span><br></pre></td></tr></table></figure>

<p>and if needed, point kubectl back at minikube with “kubectl config use-context minikube”</p>
<p>Also, there is a cool tool that makes switching between Kubernetes clusters and the context a lot easier <a href="https://github.com/ahmetb/kubectx" target="_blank" rel="noopener">https://github.com/ahmetb/kubectx</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install kubectx</span><br></pre></td></tr></table></figure>

<h3 id="Namespaces-amp-Pods"><a href="#Namespaces-amp-Pods" class="headerlink" title="Namespaces &amp; Pods"></a>Namespaces &amp; Pods</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get namespaces (1)</span><br><span class="line">$ kubectl get pod --all-namespaces</span><br></pre></td></tr></table></figure>

<ol>
<li>Running this command when using minishift will likely result in the following error due to not having admin rights on the openshift cluster. To login as an admin so that you can execute the following command and login with admin (password: admin)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error from server (Forbidden): namespaces is forbidden: User <span class="string">"developer"</span> cannot list namespaces at the cluster scope: no RBAC policy matched</span><br><span class="line"></span><br><span class="line">$ oc login $(minishift dashboard --url | sed <span class="string">'s/\/console//'</span>)</span><br><span class="line">Authentication required <span class="keyword">for</span> https://192.168.99.104:8443 (openshift)</span><br><span class="line">Username: admin</span><br><span class="line">Password: admin</span><br><span class="line">Login successful.</span><br><span class="line"></span><br><span class="line">You have access to the following projects and can switch between them with <span class="string">'oc project &lt;projectname&gt;'</span>:</span><br><span class="line"></span><br><span class="line">    default</span><br><span class="line">    kube-dns</span><br><span class="line">    kube-proxy</span><br><span class="line">    kube-public</span><br><span class="line">    kube-system</span><br><span class="line">  * myproject</span><br><span class="line">    openshift</span><br><span class="line">    openshift-apiserver</span><br><span class="line">    openshift-controller-manager</span><br><span class="line">    openshift-core-operators</span><br><span class="line">    openshift-infra</span><br><span class="line">    openshift-node</span><br><span class="line">    openshift-service-cert-signer</span><br><span class="line">    openshift-web-console</span><br><span class="line"></span><br><span class="line">Using project <span class="string">"myproject"</span>.</span><br></pre></td></tr></table></figure>

<h3 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h3><p>A Kubernetes cluster normally consists of 3 Masters and N Workers. Minikube and Minishift are all-in-one Master+Worker single VMs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure>

<h3 id="Configure-Env-for-Docker"><a href="#Configure-Env-for-Docker" class="headerlink" title="Configure Env for Docker"></a>Configure Env for Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps docker-env (1)</span><br><span class="line"><span class="built_in">export</span> DOCKER_TLS_VERIFY=<span class="string">"1"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_HOST=<span class="string">"tcp://192.168.99.108:2376"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_CERT_PATH=<span class="string">"/Users/burrsutter/minikube_0.33.1/bin/.minikube/certs"</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_API_VERSION=<span class="string">"1.35"</span></span><br><span class="line"><span class="comment"># Run this command to configure your shell:</span></span><br><span class="line"><span class="comment"># eval $(minikube --profile 9steps docker-env)</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ <span class="built_in">eval</span> $(minikube --profile 9steps docker-env)</span><br><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="comment"># eval $(minishift oc-env) (2)</span></span><br></pre></td></tr></table></figure>

<ol>
<li>This command allows configure your “docker” CLI tool against your minikube or minishift’s Docker daemon. If you are using GKE, AKS, EKS or other, then you will need to “docker push” your image to that platform’s favorite image registry. You can also use quay.io as a vendor neutral registry</li>
<li>This command puts the “oc” CLI tool in your PATH</li>
</ol>
<p>If you use minikube with error for pulling images, to use an image without uploading it, you can follow these steps:</p>
<ul>
<li>Set the environment variables with eval $(minikube docker-env)</li>
<li>Build the image with the Docker daemon of Minikube (eg docker build -t my-image .)</li>
<li>Set the image in the pod spec like the build tag (eg my-image)</li>
<li>Set the imagePullPolicy to Never, otherwise Kubernetes will try to download the image.</li>
</ul>
<h3 id="Using-Docker-CLI"><a href="#Using-Docker-CLI" class="headerlink" title="Using Docker CLI"></a>Using Docker CLI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<p>These commands should now be pulling from your minikube/minishift hosted docker daemon. You can turn off the Docker for Mac/Windows daemon to save memory.</p>
<h3 id="Minikube-Minishift-Happy"><a href="#Minikube-Minishift-Happy" class="headerlink" title="Minikube/Minishift Happy?"></a>Minikube/Minishift Happy?</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps ssh (1)</span><br><span class="line">$ free -h</span><br><span class="line">$ df -h</span><br><span class="line">$ top</span><br><span class="line">$ ctrl-c</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<ol>
<li>you can shell into your VM and check on resources</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Minishift is secured by default and requires you to login</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ oc login $(minishift --profile ip):8443 -u admin -p admin</span><br></pre></td></tr></table></figure>

<p>The “default” namespace should already be the current context, but setting it here to make it obvious</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=default</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ kubens default</span><br><span class="line"><span class="comment"># kubens comes with the kubectx tool</span></span><br></pre></td></tr></table></figure>

<p>The command “kubectl run” is the fastest way to deploy a pod (think linux container). It is useful during development but NOT recommended for production. You will receive a deprecation warning.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># Non-deprecated run command is</span></span><br><span class="line"><span class="comment"># kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080 --generator=run-pod/v1</span></span><br><span class="line"><span class="comment"># but this only results in a single Pod</span></span><br></pre></td></tr></table></figure>

<p>It produces a Deployment</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-minikube   1         1         1            1           7s</span><br></pre></td></tr></table></figure>

<p>which produces a ReplicaSet</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get replicaset</span><br></pre></td></tr></table></figure>

<p>which produces a Pod</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-minikube-7c77b68cff-2xcpp   1/1       Running   0          27s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tip, if you can not find your pod, perhaps it is in another namespace</span></span><br><span class="line">$ kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># and it can be fun to see what labels were applied to your pod</span></span><br><span class="line">$ kubectl get pods --show-labels</span><br></pre></td></tr></table></figure>

<p>You create a Service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort</span><br><span class="line">service <span class="string">"hello-minikube"</span> exposed</span><br></pre></td></tr></table></figure>

<p>and see that newly minted Service object</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get service</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">hello-minikube   NodePort    10.97.139.177   &lt;none&gt;        8080:32403/TCP   20s</span><br><span class="line">kubernetes       ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP           1h</span><br></pre></td></tr></table></figure>

<p>You can find the Service’s URL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps service hello-minikube --url</span><br><span class="line">http://192.168.99.103:32403</span><br><span class="line"><span class="comment"># and curl it</span></span><br><span class="line">$ curl $(minikube --profile 9steps service hello-minikube --url)</span><br></pre></td></tr></table></figure>

<p>or just load up the URL in your favorite browser <a href="https://screencast.com/t/k5GVJlfg" target="_blank" rel="noopener">https://screencast.com/t/k5GVJlfg</a></p>
<p>Note: minishift has a slightly different variant on the “service” command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minishift openshift service hello-minikube --url</span><br><span class="line"><span class="comment"># and curl it</span></span><br><span class="line">$ curl $(minishift openshift service hello-minikube --url)</span><br></pre></td></tr></table></figure>

<p>You can also get the NodePort using jsonpath</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get service hello-minikube -o jsonpath=<span class="string">"&#123;.spec.ports[*].nodePort&#125;"</span></span><br></pre></td></tr></table></figure>

<p>Or using the “jq” (brew install jq) command line tool to parse the JSON is also a very handy trick</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get service hello-minikube -ojson | jq -r <span class="string">'.spec.ports[].nodePort'</span></span><br></pre></td></tr></table></figure>

<p>The Deployment that was generated via your “kubectl run” commamnd actually has a bunch of interesting defaults</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl describe deployment hello-minikube</span><br><span class="line">Name:                   hello-minikube</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Sun, 29 Jul 2018 15:21:38 -0400</span><br><span class="line">Labels:                 run&#x3D;hello-minikube</span><br><span class="line">Annotations:            deployment.kubernetes.io&#x2F;revision&#x3D;1</span><br><span class="line">Selector:               run&#x3D;hello-minikube</span><br><span class="line">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  1 max unavailable, 1 max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  run&#x3D;hello-minikube</span><br><span class="line">  Containers:</span><br><span class="line">   hello-minikube:</span><br><span class="line">    Image:        k8s.gcr.io&#x2F;echoserver:1.10</span><br><span class="line">    Port:         8080&#x2F;TCP</span><br><span class="line">    Host Port:    0&#x2F;TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   hello-minikube-7c77b68cff (1&#x2F;1 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age   From                   Message</span><br><span class="line">  ----    ------             ----  ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  5m    deployment-controller  Scaled up replica set hello-minikube-7c77b68cff to 1</span><br></pre></td></tr></table></figure>

<p>but that is beyond the scope of simply getting started, just remember the “kubectl describe <object>“ trick for future reference.</p>
<p>Another key tip to remember, is “get all” which is useful for seeing what other objects might be floating around</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># or with -n mynamespace</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">all</span> <span class="string">-n</span> <span class="string">default</span></span><br><span class="line"><span class="string">$</span> <span class="string">curl</span> <span class="string">$(minikube</span> <span class="string">--profile</span> <span class="string">9steps</span> <span class="string">ip):$(kubectl</span> <span class="string">get</span> <span class="string">service</span> <span class="string">hello-minikube</span> <span class="string">-o</span> <span class="string">jsonpath="&#123;.spec.ports[*].nodePort&#125;")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">Hostname:</span> <span class="string">hello-minikube-56cdb79778-cpbc8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Pod Information:</span></span><br><span class="line">	<span class="string">-no</span> <span class="string">pod</span> <span class="string">information</span> <span class="string">available-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server values:</span></span><br><span class="line">	<span class="string">server_version=nginx:</span> <span class="attr">1.13.3 - lua:</span> <span class="number">10008</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Request Information:</span></span><br><span class="line">	<span class="string">client_address=172.17.0.1</span></span><br><span class="line">	<span class="string">method=GET</span></span><br><span class="line">	<span class="string">real</span> <span class="string">path=/</span></span><br><span class="line">	<span class="string">query=</span></span><br><span class="line">	<span class="string">request_version=1.1</span></span><br><span class="line">	<span class="string">request_scheme=http</span></span><br><span class="line">	<span class="string">request_uri=http://192.168.99.100:8080/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Request Headers:</span></span><br><span class="line">	<span class="string">accept=*/*</span></span><br><span class="line">	<span class="string">host=192.168.99.100:32570</span></span><br><span class="line">	<span class="string">user-agent=curl/7.54.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Request Body:</span></span><br><span class="line">	<span class="string">-no</span> <span class="string">body</span> <span class="string">in</span> <span class="string">request-</span></span><br></pre></td></tr></table></figure>

<h3 id="Clean-up"><a href="#Clean-up" class="headerlink" title="Clean up"></a>Clean up</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete service hello-minikube</span><br><span class="line"></span><br><span class="line">$ kubectl delete deployment hello-minikube</span><br></pre></td></tr></table></figure>

<p>And you will notice that the pod also terminates. In another terminal window, use the -w to watch as the pod changes state</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -w</span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-minikube-7c77b68cff-2xcpp   1/1       Running   0          8m</span><br><span class="line">hello-minikube-7c77b68cff-2xcpp   1/1       Terminating   0         9m</span><br><span class="line">hello-minikube-7c77b68cff-2xcpp   0/1       Terminating   0         9m</span><br></pre></td></tr></table></figure>

<p>Use Ctrl-c to stop watching pods</p>
<p>You can shutdown the VM to save resources when not in use</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps stop</span><br><span class="line"><span class="comment"># go about your business, come back later and</span></span><br><span class="line">$ minikube --profile 9steps start</span><br></pre></td></tr></table></figure>

<p>and if you need to wipe out the VM entirely</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ minikube --profile 9steps delete</span><br></pre></td></tr></table></figure>

<p>Your minikube configuration goes in a hidden directory at</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls <span class="variable">$MINIKUBE_HOME</span>/.minikube/profiles/9steps/</span><br></pre></td></tr></table></figure>

<p>and your kubectl configuration goes in a different hidden directory that is normally at</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>BUT, based on the change in the 0_setenv_minikube.sh, this directory has been moved by setting an env variable, helping to keep your various minikube worlds separated</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=<span class="variable">$MINIKUBE_HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>So if things go really badly, you might need to wipe out those directories</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf ~/.kube</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">$ rm -rf <span class="variable">$MINIKUBE_HOME</span>/.kube/config</span><br><span class="line">$ rm -rf <span class="variable">$MINIKUBE_HOME</span>/.minikube</span><br></pre></td></tr></table></figure>

<h2 id="More-resources"><a href="#More-resources" class="headerlink" title="More resources"></a>More resources</h2><p><a href="https://github.com/kubernetes/minikube#installation" target="_blank" rel="noopener">https://github.com/kubernetes/minikube#installation</a></p>
<p><a href="https://kubernetes.io/docs/setup/minikube/#quickstart" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/minikube/#quickstart</a> including proxy challenges</p>
<p><strong>Hyperkit for Mac</strong></p>
<p><a href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver</a></p>
<p><strong>Node.js tutorial</strong></p>
<p><a href="https://kubernetes.io/docs/tutorials/hello-minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/tutorials/hello-minikube/</a></p>
<p><strong>Dealing with multiple clusters</strong></p>
<p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#define-clusters-users-and-contexts" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/#define-clusters-users-and-contexts</a></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Logs, Exec, Resource Constraint, ConfigMap, Secret</title>
    <url>/2020/07/12/kubernetes-logs/</url>
    <content><![CDATA[<h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl logs podname -p</span><br><span class="line">kubectl logs podname</span><br></pre></td></tr></table></figure>

<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it pod-name /bin/bash</span><br><span class="line"><span class="comment"># 查看cgroup配置</span></span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/memory</span><br></pre></td></tr></table></figure>

<h2 id="Constraint-CPU-amp-Memory"><a href="#Constraint-CPU-amp-Memory" class="headerlink" title="Constraint CPU &amp; Memory"></a>Constraint CPU &amp; Memory</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myboot</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myboot</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">myboot</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">myboot</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myboot</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">9stepsawesome/myboot:v1</span>     </span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span> </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"300Mi"</span> </span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"250m"</span> <span class="comment"># 1/4 core</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"400Mi"</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"1000m"</span> <span class="comment"># 1 core</span></span><br></pre></td></tr></table></figure>

<h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><p>First Let’s see the environment.</p>
<p>Change the environment on deployment:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl set env deployment&#x2F;myboot GREETING&#x3D;&quot;hi&quot;</span><br></pre></td></tr></table></figure>

<p>Unset environment:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl set env deployment&#x2F;myboot GREETING-</span><br></pre></td></tr></table></figure>

<p>Then let’s see the config map.</p>
<p><code>kubectl create cm my-config --from-env-file=config/some.properties</code></p>
<p>some.properties:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GREETING&#x3D;LiuLixiang</span><br><span class="line">MSG&#x3D;hello</span><br></pre></td></tr></table></figure>

<p>deployment.yml which uses the ConfigMap:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myboot</span></span><br><span class="line">    <span class="attr">envFrom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">my-config</span></span><br></pre></td></tr></table></figure>

<p>Partial.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">String greeting = environment.getProperties(<span class="string">"GREETING"</span>, <span class="string">"default"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic mysecret --from-literal=user=<span class="string">'username'</span> --from-literal=password=<span class="string">'mypassord'</span></span><br><span class="line">kubectl get secret mysecret -o yaml</span><br></pre></td></tr></table></figure>

<p>Secrets’s data is encoded.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'dXNlcm5hbWU='</span> | base64 --decode</span><br></pre></td></tr></table></figure>

<p>use the secret in the yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myboot</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">9stepsawesome/myboot:v1</span>  </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">volumeMounts:</span>          </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysecretvolume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/mystuff/secretstuff</span></span><br><span class="line">        <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysecretvolume</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure>

<p>use in the container:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it podname /bin/bash</span><br><span class="line"><span class="comment"># in the pod</span></span><br><span class="line"><span class="built_in">cd</span> /mystuff/secretstuff</span><br><span class="line">cat username</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>Craft your Apps for Kubernetes</title>
    <url>/2020/07/12/kubernetes-Craft-Apps-in-K8s/</url>
    <content><![CDATA[<h2 id="Use-Service’s-Discovery"><a href="#Use-Service’s-Discovery" class="headerlink" title="Use Service’s Discovery"></a>Use Service’s Discovery</h2><p>Say you have a service <code>mynode</code> in <code>yourspace</code> and a service <code>myapp</code> in <code>myspace</code>. If the <code>myapp</code> wants to access the <code>mynode</code> servcie, the url is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mynode.yourspace.svc.cluster.local:8000 # 8000 is the service port, not the node port.</span><br></pre></td></tr></table></figure>

<h2 id="Configure-Liveness-and-Readiness-Probes"><a href="#Configure-Liveness-and-Readiness-Probes" class="headerlink" title="Configure Liveness and Readiness Probes"></a>Configure Liveness and Readiness Probes</h2><p><code>kubectl scale --replicas=3 deployment xxx</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StrategyType: RollingUpdate</span><br><span class="line">RollingUpdateStrategy: 1max unavailable, 1max surge</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">template:</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myboot</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">    <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myboot</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">myboot:v1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">        <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">timeoutSeconds:</span> <span class="number">2</span>          </span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">        <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/health</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>


<p>Once you understand the basics then you can try the advanced demonstration.  Where a stateful shopping cart is preserved across a rolling update based on leveraging the readiness probe.</p>
<p><a href="https://github.com/redhat-developer-demos/popular-movie-store" target="_blank" rel="noopener">https://github.com/redhat-developer-demos/popular-movie-store</a></p>
<p>More information on Live &amp; Ready<br><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/</a></p>
<h2 id="Deploy-Blue-Green"><a href="#Deploy-Blue-Green" class="headerlink" title="Deploy Blue/Green"></a>Deploy Blue/Green</h2><p><a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank" rel="noopener">Description of Blue/Green Deployment</a></p>
<p>You have the new pod as well as the old ones</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span></span><br><span class="line"><span class="string">NAME</span>                         <span class="string">READY</span>     <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mynode-68b9b9ffcc-jv4fd</span>      <span class="number">1</span><span class="string">/1</span>       <span class="string">Running</span>   <span class="number">0</span>          <span class="string">23m</span></span><br><span class="line"><span class="string">mynode-68b9b9ffcc-vq9k5</span>      <span class="number">1</span><span class="string">/1</span>       <span class="string">Running</span>   <span class="number">0</span>          <span class="string">23m</span></span><br><span class="line"><span class="string">mynodenew-5fc946f544-q9ch2</span>   <span class="number">1</span><span class="string">/1</span>       <span class="string">Running</span>   <span class="number">0</span>          <span class="string">25s</span></span><br><span class="line"><span class="string">mynodenew-6bddcb55b5-wctmd</span>   <span class="number">1</span><span class="string">/1</span>       <span class="string">Running</span>   <span class="number">0</span>          <span class="string">25s</span></span><br></pre></td></tr></table></figure>

<p>your client/user is still seeing the old one only</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  curl $(minikube ip):$(kubectl get service/mynode -o jsonpath=<span class="string">"&#123;.spec.ports[*].nodePort&#125;"</span>)</span><br><span class="line">Node Hello on mynode-668959c78d-j66hl 102</span><br></pre></td></tr></table></figure>

<p>Now update the single Service to point to the new pod and go GREEN</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl patch svc/mynode -p <span class="string">'&#123;"spec":&#123;"selector":&#123;"app":"mynodenew"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<p>Note: Our deployment yaml did not have a live &amp; ready probe, things worked out OK here because we waited until long after mynodenew was up and running before flipping the service selector.</p>
<h3 id="Built-In-Canary"><a href="#Built-In-Canary" class="headerlink" title="Built-In Canary"></a>Built-In Canary</h3><p><a href="https://martinfowler.com/bliki/CanaryRelease.html" target="_blank" rel="noopener">Description of Canary</a></p>
<p>There are at least two types of deployments that some folks consider “canary deployments” in Kubernetes.  The first is simply the rolling update strategy with the health check (liveness probe), if the liveness check fails, it knows to undo the deployment.</p>
<p>Switching back to focusing on myboot and myspace</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl config set-context --current --namespace&#x3D;myspace</span><br><span class="line">$ kubectl get pods</span><br><span class="line">kubectl get pods</span><br><span class="line">NAME                      READY     STATUS        RESTARTS   AGE</span><br><span class="line">myboot-859cbbfb98-4rvl8   1&#x2F;1       Running       0          55m</span><br><span class="line">myboot-859cbbfb98-rwgp5   1&#x2F;1       Running       0          55m</span><br></pre></td></tr></table></figure>

<p>Make sure myboot has 2 replicas</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl scale deployment&#x2F;myboot --replicas&#x3D;2</span><br></pre></td></tr></table></figure>

<p>and let’s attempt to put some really bad code into production</p>
<p>Go into hello/springboot/MyRESTController.java and add a System.exit(1) into the /health logic</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/health"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.exit(<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK)</span><br><span class="line">         .body(<span class="string">"I am fine, thank you\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Obviously this sort of thing would never pass through your robust code reviews and automated QA but let’s assume it does.</p>
<p>Build the code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mvn clean package</span><br></pre></td></tr></table></figure>

<p>Build the docker image for v3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker build -t 9stepsawesome&#x2F;myboot:v3 .</span><br></pre></td></tr></table></figure>

<p>Terminal 1: Start a poller</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  curl $(minikube -p 9steps ip):$(kubectl get service/myboot -o jsonpath=<span class="string">"&#123;.spec.ports[*].nodePort&#125;"</span> -n myspace)</span><br><span class="line">  sleep .3;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>Terminal 2: Watch pods</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -w</span><br></pre></td></tr></table></figure>

<p>Terminal 3: Watch events</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get events --sort-by&#x3D;.metadata.creationTimestamp</span><br></pre></td></tr></table></figure>

<p>Terminal 4: rollout the v3 update</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl set image deployment&#x2F;myboot myboot&#x3D;9stepsawesome&#x2F;myboot:v3</span><br></pre></td></tr></table></figure>

<p>and watch the fireworks</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -w</span><br><span class="line">myboot-5d7fb559dd-qh6fl   0&#x2F;1       Error     1         11m</span><br><span class="line">myboot-859cbbfb98-rwgp5   0&#x2F;1       Terminating   0         6h</span><br><span class="line">myboot-859cbbfb98-rwgp5   0&#x2F;1       Terminating   0         6h</span><br><span class="line">myboot-5d7fb559dd-qh6fl   0&#x2F;1       CrashLoopBackOff   1         11m</span><br><span class="line">myboot-859cbbfb98-rwgp5   0&#x2F;1       Terminating   0         6h</span><br></pre></td></tr></table></figure>

<p>Look at your Events</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get events -w</span><br><span class="line">6s          Warning   Unhealthy           pod&#x2F;myboot-64db5994f6-s24j5    Readiness probe failed: Get http:&#x2F;&#x2F;172.17.0.6:8080&#x2F;health: net&#x2F;http: request canceled (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">6s          Warning   Unhealthy           pod&#x2F;myboot-64db5994f6-h8g2t    Readiness probe failed: Get http:&#x2F;&#x2F;172.17.0.7:8080&#x2F;health: net&#x2F;http: request canceled (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">5s          Warning   Unhealthy</span><br></pre></td></tr></table></figure>

<p>And yet your polling client, stays with the old code &amp; old pod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Aloha from Spring Boot! 133 on myboot-859cbbfb98-4rvl8</span><br><span class="line">Aloha from Spring Boot! 134 on myboot-859cbbfb98-4rvl8</span><br></pre></td></tr></table></figure>

<p>If you watch a while, the CrashLoopBackOff will continue and the restart count will increment.</p>
<p>Now, go fix the MyRESTController and also change from Hello to Aloha</p>
<p>No more System.exit()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(method &#x3D; RequestMethod.GET, value &#x3D; &quot;&#x2F;health&quot;)</span><br><span class="line">public ResponseEntity&lt;String&gt; health() &#123;        </span><br><span class="line">     return ResponseEntity.status(HttpStatus.OK)</span><br><span class="line">         .body(&quot;I am fine, thank you\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And change the greeting response to something you recognize.</p>
<p>Save</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mvn clean package</span><br><span class="line"></span><br><span class="line">$ docker build -t 9stepsawesome&#x2F;myboot:v3 .</span><br></pre></td></tr></table></figure>

<p>and now just wait for the “control loop” to self-correct</p>
<h3 id="Manual-Canary-with-multiple-Deployments"><a href="#Manual-Canary-with-multiple-Deployments" class="headerlink" title="Manual Canary with multiple Deployments"></a>Manual Canary with multiple Deployments</h3><p>Go back to v1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl set image deployment&#x2F;myboot myboot&#x3D;9stepsawesome&#x2F;myboot:v1</span><br></pre></td></tr></table></figure>

<p>Next, we will use a 2nd Deployment like we did with Blue/Green.  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f kubefiles&#x2F;myboot-deployment-canary.yml</span><br></pre></td></tr></table></figure>

<p>And you can see a new pod being born</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br></pre></td></tr></table></figure>

<p>And this is the v3 one</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;mybootcanary</span><br><span class="line">$ kubectl exec -it mybootcanary-6ddc5d8d48-ptdjv curl localhost:8080&#x2F;</span><br></pre></td></tr></table></figure>

<p>Now we add a label to both v1 and v3 Deployments PodTemplate, causing new pods to be born</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl patch deployment&#x2F;myboot -p &#39;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;labels&quot;:&#123;&quot;newstuff&quot;:&quot;withCanary&quot;&#125;&#125;&#125;&#125;&#125;&#39;</span><br><span class="line">$ kubectl patch deployment&#x2F;mybootcanary -p &#39;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;metadata&quot;:&#123;&quot;labels&quot;:&#123;&quot;newstuff&quot;:&quot;withCanary&quot;&#125;&#125;&#125;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>Tweak the Service selector for this new label</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl patch service&#x2F;myboot -p &#39;&#123;&quot;spec&quot;:&#123;&quot;selector&quot;:&#123;&quot;newstuff&quot;:&quot;withCanary&quot;,&quot;app&quot;: null&#125;&#125;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>You should see approximately 30% canary mixed in with previous deployment</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello from Spring Boot! 23 on myboot-d6c8464-ncpn8</span><br><span class="line">Hello from Spring Boot! 22 on myboot-d6c8464-qnxd8</span><br><span class="line">Aloha from Spring Boot! 83 on mybootcanary-74d99754f4-tx6pj</span><br><span class="line">Hello from Spring Boot! 24 on myboot-d6c8464-ncpn8</span><br></pre></td></tr></table></figure>

<p>You can then manipulate the percentages via the replicas associated with each deployment<br>20% Aloha (Canary)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl scale deployment&#x2F;myboot --replicas&#x3D;4</span><br><span class="line">$ kubectl scale deployment&#x2F;mybootcanary --replicas&#x3D;1</span><br></pre></td></tr></table></figure>

<p>The challenge with this model is that you have to have the right pod count to get the right mix. If you want a 1% canary, you need 99 of the non-canary pods.</p>
<h3 id="Istio-Cometh"><a href="#Istio-Cometh" class="headerlink" title="Istio Cometh"></a>Istio Cometh</h3><p>The concept of the Canary rollout gets a lot smarter and more interesting with Istio.  You also get the concept of dark launches which allows you to push a change into the production environment, send traffic to the new pod(s) yet no responses are actual sent back to the end-user/client.</p>
<p>See <a href="https://bit.ly/istio-tutorial" target="_blank" rel="noopener">bit.ly/istio-tutorial</a></p>
<h2 id="Store-data-with-PersistentVolume-and-PersistentVolumeClaim"><a href="#Store-data-with-PersistentVolume-and-PersistentVolumeClaim" class="headerlink" title="Store data with PersistentVolume and PersistentVolumeClaim"></a>Store data with PersistentVolume and PersistentVolumeClaim</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pv</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mystorage</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">"/data/mypostgresdata/"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pvc</span></span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">   <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">mystorage</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres:10.5</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">"IfNotPresent"</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_DB</span> </span><br><span class="line">          <span class="attr">value:</span> <span class="string">postgresdb</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_USER</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">admin</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POSTGRES_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">adminS3cret</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5432</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="comment"># mountPath within the container</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres-pvc</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">"/var/lib/postgresql/data/:Z"</span>          </span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">          <span class="comment"># mapped to the PVC</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">postgres-pvc</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">postgres-pvc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">visualize:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># the port that this service should serve on</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5432</span>  </span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">app:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Minikube</tag>
      </tags>
  </entry>
  <entry>
    <title>Extend Your Kubernetes</title>
    <url>/2020/07/16/kubernetes-Entend-Your-K8s/</url>
    <content><![CDATA[<h2 id="Discover-CustomResourceDefinitions"><a href="#Discover-CustomResourceDefinitions" class="headerlink" title="Discover CustomResourceDefinitions"></a>Discover CustomResourceDefinitions</h2><p>Custom Resources extend the API</p>
<p>Custom Controllers provide the functionality - continually maintains the desired state -  to monitor its state and reconcile the resource to match with the configuration</p>
<p><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/</a></p>
<p><a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/</a></p>
<p>Custom Resource Definitions (CRDs) in version 1.7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get crds</span><br><span class="line">$ kubectl api-resources</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pizzas.mykubernetes.burrsutter.com</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pizzamaker</span></span><br><span class="line">    <span class="attr">mylabel:</span> <span class="string">stuff</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">mykubernetes.burrsutter.com</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1beta2</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Pizza</span></span><br><span class="line">    <span class="attr">listKind:</span> <span class="string">PizzaList</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">pizzas</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">pizza</span></span><br><span class="line">    <span class="attr">shortNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pz</span></span><br><span class="line">  <span class="attr">validation:</span></span><br><span class="line">    <span class="attr">openAPIV3Schema:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">toppings:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">            <span class="attr">sauce:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>

<h2 id="Add-Pizzas-to-your-Kubernets-Cluster"><a href="#Add-Pizzas-to-your-Kubernets-Cluster" class="headerlink" title="Add Pizzas to your Kubernets Cluster"></a>Add Pizzas to your Kubernets Cluster</h2><p>cheese-pizza.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">mykubernetes.burrsutter.com/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pizza</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">burrcheese</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">toppings:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">mozzarella</span></span><br><span class="line">  <span class="attr">sauce:</span> <span class="string">regular</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f pizza-crd.yaml</span><br><span class="line">$ kubectl get crds | grep pizza</span><br><span class="line">$ kubectl create namespace pizzas</span><br><span class="line">$ kubectl config <span class="built_in">set</span>-context --current --namespace=pizzas</span><br><span class="line">$ kubectl apply -f cheese-pizza.yaml</span><br><span class="line">$ kubectl get pizzas</span><br><span class="line">$ kubectl describe pizza burrcheese</span><br></pre></td></tr></table></figure>

<p>delete all the pizzas</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pizzas --all</span><br></pre></td></tr></table></figure>

<h2 id="Understanding-Controllers"><a href="#Understanding-Controllers" class="headerlink" title="Understanding Controllers"></a>Understanding Controllers</h2><p>Build a controller via Metacontroller:<br><a href="https://metacontroller.app/guide/create/" target="_blank" rel="noopener">https://metacontroller.app/guide/create/</a></p>
<p><a href="https://github.com/GoogleCloudPlatform/metacontroller" target="_blank" rel="noopener">https://github.com/GoogleCloudPlatform/metacontroller</a></p>
<p>Note: <a href="https://github.com/GoogleCloudPlatform/metacontroller/issues/184" target="_blank" rel="noopener">https://github.com/GoogleCloudPlatform/metacontroller/issues/184</a></p>
<h3 id="Setup-Metacontroller"><a href="#Setup-Metacontroller" class="headerlink" title="Setup Metacontroller"></a>Setup Metacontroller</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create namespace metacontroller</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/metacontroller/master/manifests/metacontroller-rbac.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/metacontroller/master/manifests/metacontroller.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line">$ stern metacontroller-0 -n metacontroller</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pizza-controller.yaml</span><br><span class="line"></span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.324855       1 metacontroller.go:148] sync CompositeController pizza-controller</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.324899       1 factory.go:104] Starting shared informer <span class="keyword">for</span> pizzas <span class="keyword">in</span> mykubernetes.burrsutter.com/v1beta2</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.324940       1 factory.go:104] Starting shared informer <span class="keyword">for</span> pods <span class="keyword">in</span> v1</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325019       1 controller.go:165] Starting Pizza CompositeController</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325029       1 controller.go:169] Waiting <span class="keyword">for</span> Pizza CompositeController caches to sync</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325039       1 controller.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> Pizza controller</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325453       1 reflector.go:202] Starting reflector *unstructured.Unstructured (30m0s) from metacontroller.app/dynamic/informer/factory.go:111</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325476       1 reflector.go:240] Listing and watching *unstructured.Unstructured from metacontroller.app/dynamic/informer/factory.go:111</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325947       1 reflector.go:202] Starting reflector *unstructured.Unstructured (30m0s) from metacontroller.app/dynamic/informer/factory.go:111</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.325963       1 reflector.go:240] Listing and watching *unstructured.Unstructured from metacontroller.app/dynamic/informer/factory.go:111</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.525234       1 shared_informer.go:123] caches populated</span><br><span class="line">metacontroller-0 metacontroller I0904 22:23:35.525259       1 controller.go:39] Caches are synced <span class="keyword">for</span> Pizza controller</span><br></pre></td></tr></table></figure>

<p>pizza-controoler.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">metacontroller.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CompositeController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pizza-controller</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">generateSelector:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">parentResource:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">mykubernetes.burrsutter.com/v1beta2</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">pizzas</span></span><br><span class="line">  <span class="attr">childResources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">resource:</span> <span class="string">pods</span></span><br><span class="line">    <span class="attr">updateStrategy:</span></span><br><span class="line">      <span class="attr">method:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">    <span class="attr">sync:</span></span><br><span class="line">      <span class="attr">webhook:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://pizza-controller.pizzahat:8080/sync</span></span><br></pre></td></tr></table></figure>

<h3 id="Add-Pizza-Controller"><a href="#Add-Pizza-Controller" class="headerlink" title="Add Pizza Controller"></a>Add Pizza Controller</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl -n pizzahat create configmap pizza-controller --from-file&#x3D;sync.py</span><br><span class="line"></span><br><span class="line">kubectl -n pizzahat apply -f webhook-py.yaml</span><br></pre></td></tr></table></figure>

<p>sync.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sync</span><span class="params">(self, parent, children)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute status based on observed state.</span></span><br><span class="line">    desired_status = &#123;</span><br><span class="line">       <span class="string">"pods"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Collect the specifications</span></span><br><span class="line">    name = parent[<span class="string">"metadata"</span>][<span class="string">"name"</span>]</span><br><span class="line">    sauce = parent.get(<span class="string">"spec"</span>, &#123;&#125;).get(<span class="string">"sauce"</span>)</span><br><span class="line">    toppings = parent.get(<span class="string">"spec"</span>,&#123;&#125;).get(<span class="string">"toppings"</span>)</span><br><span class="line">    print(<span class="string">"\n\nsauce: %s"</span> % sauce)</span><br><span class="line">    print(<span class="string">"toppings: %s"</span> % toppings)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">      print(topping)</span><br><span class="line"></span><br><span class="line">    stuff = <span class="string">' '</span> + sauce + <span class="string">' '</span> + <span class="string">' '</span>.join(toppings) + <span class="string">' of '</span> + name</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">print</span> stuff</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generate the desired child object(s)</span></span><br><span class="line">    </span><br><span class="line">    desired_pods = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">        <span class="string">"kind"</span>: <span class="string">"Pod"</span>,</span><br><span class="line">        <span class="string">"metadata"</span>: &#123;</span><br><span class="line">          <span class="string">"name"</span>: name</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"spec"</span>: &#123;</span><br><span class="line">          <span class="string">"restartPolicy"</span>: <span class="string">"OnFailure"</span>,</span><br><span class="line">          <span class="string">"containers"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"pizza"</span>,</span><br><span class="line">              <span class="string">"image"</span>: <span class="string">"busybox"</span>,</span><br><span class="line">              <span class="string">"command"</span>: [<span class="string">"echo"</span>, <span class="string">"requested pizza: %s"</span> % stuff]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"status"</span>: desired_status, <span class="string">"children"</span>: desired_pods&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># Serve the sync() function as a JSON webhook.</span></span><br><span class="line">    </span><br><span class="line">    observed = json.loads(self.rfile.read(int(self.headers.getheader(<span class="string">"content-length"</span>))))</span><br><span class="line">    desired = self.sync(observed[<span class="string">"parent"</span>], observed[<span class="string">"children"</span>])</span><br><span class="line"></span><br><span class="line">    self.send_response(<span class="number">200</span>)</span><br><span class="line">    self.send_header(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    self.end_headers()</span><br><span class="line">    self.wfile.write(json.dumps(desired))</span><br><span class="line"></span><br><span class="line">HTTPServer((<span class="string">""</span>, <span class="number">8080</span>), Controller).serve_forever()</span><br></pre></td></tr></table></figure>

<p>webhook-py.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pizza-controller</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">pizza-controller</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pizza-controller</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">python:2.7</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["python",</span> <span class="string">"/hooks/sync.py"</span><span class="string">]</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hooks</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/hooks</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hooks</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">pizza-controller</span>        </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pizza-controller</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">pizza-controller</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="Deploy-some-Pizzas"><a href="#Deploy-some-Pizzas" class="headerlink" title="Deploy some Pizzas"></a>Deploy some Pizzas</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stern metacontroller-0 -n metacontroller</span><br><span class="line"></span><br><span class="line">$ stern pizza-controller</span><br><span class="line"></span><br><span class="line">$ watch kubectl get pods </span><br><span class="line"></span><br><span class="line">$ kubectl -n pizzahat apply -f veggie-lovers.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl logs burrveggie</span><br></pre></td></tr></table></figure>

<h3 id="Eat-the-Pizza"><a href="#Eat-the-Pizza" class="headerlink" title="Eat the Pizza"></a>Eat the Pizza</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete pizza burrveggie</span><br><span class="line">$ kubectl delete namespace pizzahat</span><br></pre></td></tr></table></figure>

<h2 id="Discover-Operators"><a href="#Discover-Operators" class="headerlink" title="Discover Operators"></a>Discover Operators</h2><p>Operator SDK</p>
<p><a href="https://github.com/operator-framework/operator-lifecycle-manager/" target="_blank" rel="noopener">https://github.com/operator-framework/operator-lifecycle-manager/</a></p>
<h3 id="Kafka-via-OperatorHub"><a href="#Kafka-via-OperatorHub" class="headerlink" title="Kafka via OperatorHub"></a>Kafka via OperatorHub</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create namespace franz</span><br><span class="line"></span><br><span class="line">$ kubectl config <span class="built_in">set</span>-context --current --namespace=franz</span><br><span class="line"></span><br><span class="line">$ curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/0.12.0/install.sh | bash -s 0.12.0</span><br><span class="line"></span><br><span class="line">$ kubectl create -f https://operatorhub.io/install/strimzi-kafka-operator.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl get csv -n operators</span><br><span class="line"></span><br><span class="line">$ kubectl get crds | grep kafka</span><br><span class="line"></span><br><span class="line">$ watch kubectl get pods</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f kafka-strimzi-minikube.yml</span><br><span class="line"></span><br><span class="line">$ kubectl get kafkas</span><br></pre></td></tr></table></figure>

<p>kafka-strimzi-minikube.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kafka.strimzi.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Kafka</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">burr-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">listeners:</span></span><br><span class="line">      <span class="attr">external:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">nodeport</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ephemeral</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">storage:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ephemeral</span></span><br><span class="line">  <span class="attr">entityOperator:</span></span><br><span class="line">    <span class="attr">topicOperator:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Clean-up"><a href="#Clean-up" class="headerlink" title="Clean up"></a>Clean up</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete kafka burr-cluster</span><br><span class="line">$ kubectl delete namespace franz</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Extend The Istio Service Mesh</title>
    <url>/2020/07/19/kubernetes-istio/</url>
    <content><![CDATA[<h2 id="Understand-Microservices-architecture-requirements-and-challenges"><a href="#Understand-Microservices-architecture-requirements-and-challenges" class="headerlink" title="Understand Microservices architecture requirements and challenges"></a>Understand Microservices architecture requirements and challenges</h2><p><a href="/images/Istio-on-Kubernetes.pdf">resource</a></p>
<ul>
<li>API</li>
<li>Discovery</li>
<li>Invocation</li>
<li>Elasticity</li>
<li>Resillience</li>
<li>Pipeline</li>
<li>Authentication</li>
<li>Logging</li>
<li>Monitoring</li>
<li>Tracing</li>
</ul>
<p><img src="/images/before-istio.png" alt="before Istio"></p>
<p><img src="/images/after-istio.png" alt="after Istio"></p>
<p>The sidecar intercepts all network traffic.</p>
<h3 id="How-to-add-an-Istio-Proxy-sidecar"><a href="#How-to-add-an-Istio-Proxy-sidecar" class="headerlink" title="How to add an Istio-Proxy(sidecar)?"></a>How to add an Istio-Proxy(sidecar)?</h3><p><code>istioctl kube-inject -f NormalDeployment.yaml</code></p>
<p>or</p>
<p><code>kubectl label namespace myspace istio-injection=enabled</code></p>
<p>To “see” the sidecar:</p>
<p><code>kubectl describe deployment customer</code></p>
<p>Envoy is the current sidecar.</p>
<h3 id="Next-Generation-Microservice-Service-Mesh"><a href="#Next-Generation-Microservice-Service-Mesh" class="headerlink" title="Next Generation Microservice - Service Mesh"></a>Next Generation Microservice - Service Mesh</h3><p><img src="/images/istio-1.png" alt="Istio"></p>
<p><img src="/images/istio-2.png" alt="Istio-Gateway"></p>
<p><img src="/images/istio-3.png" alt="Istio-Gateway"></p>
<p><img src="/images/istio-4.png" alt="Istio-Resource"></p>
<h2 id="Install-Istio"><a href="#Install-Istio" class="headerlink" title="Install Istio"></a>Install Istio</h2><p><a href="https://github.com/redhat-developer-demos/istio-tutorial" target="_blank" rel="noopener">https://github.com/redhat-developer-demos/istio-tutorial</a></p>
<p><a href="https://github.com/burrsutter/scripts-istio" target="_blank" rel="noopener">https://github.com/burrsutter/scripts-istio</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIKUBE_HOME=/Users/lixiangliu/Projects/k8s/minikube-istio</span><br><span class="line"><span class="comment"># this is where the minikube executable is</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MINIKUBE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=<span class="variable">$MINIKUBE_HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">export</span> KUBE_EDITOR=<span class="string">"code -w"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ISTIO_HOME=<span class="variable">$MINIKUBE_HOME</span>/istio-1.6.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ISTIO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$MINIKUBE_HOME</span></span><br></pre></td></tr></table></figure>

<p>Start:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% minikube start -p istio-mk --memory=8192 --cpus=3 \</span><br><span class="line"> --kubernetes-version=v1.18.3 \</span><br><span class="line"> --vm-driver=virtualbox \</span><br><span class="line"> --disk-size=30g</span><br></pre></td></tr></table></figure>

<p>install istio</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% curl -L https://github.com/istio/istio/releases/download/1.6.5/istio-1.6.5-osx.tar.gz | tar xz</span><br><span class="line">% <span class="built_in">cd</span> istio-1.6.5</span><br><span class="line">% <span class="built_in">export</span> PATH=<span class="variable">$ISTIO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">% istioctl manifest apply --<span class="built_in">set</span> profile=demo --<span class="built_in">set</span> values.global.proxy.privileged=<span class="literal">true</span></span><br><span class="line">% kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=istio-system</span><br><span class="line">% kubectl get pods -w</span><br></pre></td></tr></table></figure>

<p>the outputs is :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">grafana-b54bb57b9-j6wc8                 1&#x2F;1     Running   0          9m49s</span><br><span class="line">istio-egressgateway-7486cf8c97-kdffx    1&#x2F;1     Running   0          9m50s</span><br><span class="line">istio-ingressgateway-6bcb9d7bbf-fdkv5   1&#x2F;1     Running   0          9m50s</span><br><span class="line">istio-tracing-9dd6c4f7c-wpshx           1&#x2F;1     Running   0          9m49s</span><br><span class="line">istiod-788f76c8fc-5smwm                 1&#x2F;1     Running   0          10m</span><br><span class="line">kiali-d45468dc4-p7tb9                   1&#x2F;1     Running   0          9m49s</span><br><span class="line">prometheus-6477cfb669-stbh8             2&#x2F;2     Running   0          9m49s</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl get crds</span><br><span class="line">NAME                                       CREATED AT</span><br><span class="line">adapters.config.istio.io                   2020-07-22T23:25:58Z</span><br><span class="line">attributemanifests.config.istio.io         2020-07-22T23:25:58Z</span><br><span class="line">authorizationpolicies.security.istio.io    2020-07-22T23:25:58Z</span><br><span class="line">clusterrbacconfigs.rbac.istio.io           2020-07-22T23:25:58Z</span><br><span class="line">destinationrules.networking.istio.io       2020-07-22T23:25:58Z</span><br><span class="line">envoyfilters.networking.istio.io           2020-07-22T23:25:58Z</span><br><span class="line">gateways.networking.istio.io               2020-07-22T23:25:58Z</span><br><span class="line">handlers.config.istio.io                   2020-07-22T23:25:58Z</span><br><span class="line">httpapispecbindings.config.istio.io        2020-07-22T23:25:58Z</span><br><span class="line">httpapispecs.config.istio.io               2020-07-22T23:25:58Z</span><br><span class="line">instances.config.istio.io                  2020-07-22T23:25:58Z</span><br><span class="line">istiooperators.install.istio.io            2020-07-22T23:25:58Z</span><br><span class="line">peerauthentications.security.istio.io      2020-07-22T23:25:58Z</span><br><span class="line">quotaspecbindings.config.istio.io          2020-07-22T23:25:58Z</span><br><span class="line">quotaspecs.config.istio.io                 2020-07-22T23:25:58Z</span><br><span class="line">rbacconfigs.rbac.istio.io                  2020-07-22T23:25:58Z</span><br><span class="line">requestauthentications.security.istio.io   2020-07-22T23:25:58Z</span><br><span class="line">rules.config.istio.io                      2020-07-22T23:25:58Z</span><br><span class="line">serviceentries.networking.istio.io         2020-07-22T23:25:58Z</span><br><span class="line">servicerolebindings.rbac.istio.io          2020-07-22T23:25:58Z</span><br><span class="line">serviceroles.rbac.istio.io                 2020-07-22T23:25:58Z</span><br><span class="line">sidecars.networking.istio.io               2020-07-22T23:25:58Z</span><br><span class="line">templates.config.istio.io                  2020-07-22T23:25:58Z</span><br><span class="line">virtualservices.networking.istio.io        2020-07-22T23:25:58Z</span><br><span class="line">workloadentries.networking.istio.io        2020-07-22T23:25:58Z</span><br></pre></td></tr></table></figure>

<h2 id="Deploy-with-Istio-Envoy-Sidecars"><a href="#Deploy-with-Istio-Envoy-Sidecars" class="headerlink" title="Deploy with Istio/Envoy Sidecars"></a>Deploy with Istio/Envoy Sidecars</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl config current-context <span class="comment">#istio-mk</span></span><br><span class="line">% minikube --profile istio-mk ip  </span><br><span class="line">192.168.99.102</span><br><span class="line">% minikube --profile istio-mk status</span><br><span class="line">% kubectl create namespace istio-demo</span><br><span class="line">% kubectl config <span class="built_in">set</span>-context $(kubectl config current-context) --namespace=istio-demo</span><br><span class="line">% kubens</span><br><span class="line">default</span><br><span class="line">istio-demo</span><br><span class="line">istio-system</span><br><span class="line">kube-node-lease</span><br><span class="line">kube-public</span><br><span class="line">kube-system</span><br></pre></td></tr></table></figure>

<p>Let’s clone <a href="https://github.com/redhat-developer-demos/istio-tutorial" target="_blank" rel="noopener">https://github.com/redhat-developer-demos/istio-tutorial</a></p>
<h3 id="Manual-inject"><a href="#Manual-inject" class="headerlink" title="Manual inject"></a>Manual inject</h3><p>We have a <a href="/images/Deployment.yml">deployment file</a>.</p>
<p>We use <code>istioctl</code> to inject sidecar:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">istioctl kube-inject -f customer&#x2F;kubernetes&#x2F;Deployment.yml</span><br></pre></td></tr></table></figure>

<p>You can see some sidecar is injected.</p>
<h3 id="Automatic-inject"><a href="#Automatic-inject" class="headerlink" title="Automatic inject"></a>Automatic inject</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% kubectl get namespace --show-labels</span><br><span class="line">NAME              STATUS   AGE   LABELS</span><br><span class="line">default           Active   47h   &lt;none&gt;</span><br><span class="line">istio-demo        Active   15m   &lt;none&gt;</span><br><span class="line">istio-system      Active   47m   istio-injection&#x3D;disabled</span><br><span class="line">kube-node-lease   Active   47h   &lt;none&gt;</span><br><span class="line">kube-public       Active   47h   &lt;none&gt;</span><br><span class="line">kube-system       Active   47h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line">% kubectl label namespace istio-demo istio-injection&#x3D;enabled</span><br><span class="line">% kubectl get namespace --show-labels</span><br><span class="line">NAME              STATUS   AGE   LABELS</span><br><span class="line">default           Active   47h   &lt;none&gt;</span><br><span class="line">istio-demo        Active   17m   istio-injection&#x3D;enabled</span><br><span class="line">istio-system      Active   48m   istio-injection&#x3D;disabled</span><br><span class="line">kube-node-lease   Active   47h   &lt;none&gt;</span><br><span class="line">kube-public       Active   47h   &lt;none&gt;</span><br><span class="line">kube-system       Active   47h   &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p>Alse, we notice the yaml has an annotation <code>sidecar.istio.io/inject: &quot;true&quot;</code>, that’s the different with the normal yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">customer</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">customer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">customer</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">customer</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">"true"</span> <span class="comment">#here!</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTIONS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">-Xms15m</span> <span class="string">-Xmx15m</span> <span class="string">-Xmn15m</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">customer</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/rhdevelopers/istio-tutorial-customer:v1.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8778</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jolokia</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9779</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span> </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"20Mi"</span> </span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"200m"</span> <span class="comment"># 1/5 core</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"40Mi"</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"500m"</span> </span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">localhost:8080/health/live</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">localhost:8080/health/ready</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">6</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% kubectl apply -f customer&#x2F;kubernetes&#x2F;Deployment.yml </span><br><span class="line">deployment.apps&#x2F;customer created</span><br><span class="line">% kubectl get pods               </span><br><span class="line">NAME                        READY   STATUS            RESTARTS   AGE</span><br><span class="line">customer-76bddbf59c-7p6mr   0&#x2F;2     PodInitializing   0          11s</span><br></pre></td></tr></table></figure>

<p>There are two containers in the pods.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl apply -f customer/kubernetes/Service.yml </span><br><span class="line">service/customer created</span><br></pre></td></tr></table></figure>

<p>service.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">customer</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">customer</span>    </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">customer</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl apply -f customer/kubernetes/Gateway.yml </span><br><span class="line">gateway.networking.istio.io/customer-gateway created</span><br><span class="line">virtualservice.networking.istio.io/customer-gateway created</span><br><span class="line">% kubectl get vs</span><br><span class="line">NAME               GATEWAYS             HOSTS   AGE</span><br><span class="line">customer-gateway   [customer-gateway]   [*]     18s</span><br></pre></td></tr></table></figure>

<p>Gateway.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">customer-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingressgateway</span> <span class="comment"># use istio default controller</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"*"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">customer-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"*"</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">customer-gateway</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/customer</span></span><br><span class="line">    <span class="attr">rewrite:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">customer</span></span><br><span class="line">        <span class="attr">port:</span></span><br><span class="line">          <span class="attr">number:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl apply -f preference/kubernetes/Deployment.yml </span><br><span class="line">deployment.apps/preference-v1 created</span><br><span class="line">% kubectl apply -f preference/kubernetes/Service.yml   </span><br><span class="line">service/preference created</span><br><span class="line">% kubectl apply -f recommendation/kubernetes/Deployment.yml </span><br><span class="line">deployment.apps/recommendation-v1 created</span><br><span class="line">% kubectl apply -f recommendation/kubernetes/Service.yml   </span><br><span class="line">service/recommendation created</span><br><span class="line">% kubectl get services</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">customer         ClusterIP   10.98.110.140   &lt;none&gt;        8080/TCP   6m39s</span><br><span class="line">preference       ClusterIP   10.97.254.164   &lt;none&gt;        8080/TCP   32s</span><br><span class="line">recommendation   ClusterIP   10.108.35.221   &lt;none&gt;        8080/TCP   6s</span><br><span class="line">% kubectl get vs      </span><br><span class="line">NAME               GATEWAYS             HOSTS   AGE</span><br><span class="line">customer-gateway   [customer-gateway]   [*]     7m36s</span><br></pre></td></tr></table></figure>
<p>call trace:<br>user-&gt;customer-&gt;preference-&gt;recommendation</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get services -n istio-system</span><br><span class="line">NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class="line">grafana                     ClusterIP      10.110.100.175   &lt;none&gt;        3000/TCP                                                                     70m</span><br><span class="line">istio-egressgateway         ClusterIP      10.111.112.128   &lt;none&gt;        80/TCP,443/TCP,15443/TCP                                                     70m</span><br><span class="line">istio-ingressgateway        LoadBalancer   10.108.217.161   &lt;pending&gt;     15020:30321/TCP,80:30350/TCP,443:30445/TCP,31400:31920/TCP,15443:31115/TCP   70m</span><br><span class="line">istiod                      ClusterIP      10.103.248.183   &lt;none&gt;        15010/TCP,15012/TCP,443/TCP,15014/TCP,853/TCP                                70m</span><br><span class="line">jaeger-agent                ClusterIP      None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                   70m</span><br><span class="line">jaeger-collector            ClusterIP      10.103.241.201   &lt;none&gt;        14267/TCP,14268/TCP,14250/TCP                                                70m</span><br><span class="line">jaeger-collector-headless   ClusterIP      None             &lt;none&gt;        14250/TCP                                                                    70m</span><br><span class="line">jaeger-query                ClusterIP      10.101.27.250    &lt;none&gt;        16686/TCP                                                                    70m</span><br><span class="line">kiali                       ClusterIP      10.111.79.49     &lt;none&gt;        20001/TCP                                                                    70m</span><br><span class="line">prometheus                  ClusterIP      10.104.161.153   &lt;none&gt;        9090/TCP                                                                     70m</span><br><span class="line">tracing                     ClusterIP      10.106.110.151   &lt;none&gt;        80/TCP                                                                       70m</span><br><span class="line">zipkin                      ClusterIP      10.111.30.70     &lt;none&gt;        9411/TCP                                                                     70m</span><br></pre></td></tr></table></figure>

<p>We can see the nodeport is 30350</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% minikube --profile istio-mk ip</span><br><span class="line">192.168.99.102</span><br><span class="line">% curl 192.168.99.102:30350&#x2F;customer</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1</span><br></pre></td></tr></table></figure>

<h2 id="Shift-traffic-with-VirtualService-and-DestinationRule"><a href="#Shift-traffic-with-VirtualService-and-DestinationRule" class="headerlink" title="Shift traffic with VirtualService and DestinationRule"></a>Shift traffic with VirtualService and DestinationRule</h2><p>Let’s deploy recommendation v2:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">recommendation</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation-v2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">recommendation</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/inject:</span> <span class="string">"true"</span> <span class="comment">#add this for istio</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTIONS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">-Xms15m</span> <span class="string">-Xmx15m</span> <span class="string">-Xmn15m</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">recommendation</span>          </span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/rhdevelopers/istio-tutorial-recommendation:v2.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8778</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">jolokia</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9779</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span> </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"40Mi"</span> </span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"200m"</span> <span class="comment"># 1/5 core</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">"100Mi"</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">"500m"</span> </span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">localhost:8080/health/live</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">curl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">localhost:8080/health/ready</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">6</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f recommendation/kubernetes/Deployment-v2.yml</span><br></pre></td></tr></table></figure>

<p>Then watch the curl result:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span> curl 192.168.99.102:30350/customer</span><br><span class="line">sleep .3</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>The output is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 507</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 540</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 508</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 541</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 509</span><br></pre></td></tr></table></figure>

<p>We scale the v2 to 2 replicas:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl scale replicas&#x3D;2 deployment&#x2F;recommendation-v2</span><br></pre></td></tr></table></figure>

<p>The output is below. v1: v2 is 1:2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 561</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 530</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 10</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 562</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 531</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 11</span><br></pre></td></tr></table></figure>

<p>Then set the v2 replicas to 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl scale replicas&#x3D;1 deployment&#x2F;recommendation-v2</span><br></pre></td></tr></table></figure>

<p>Now let’s define the DestinationRule (destination-rule-recommendation-v1-v2.yml):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">version-v1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">version-v2</span></span><br></pre></td></tr></table></figure>

<p>And define the VirtualService (virtual-service-recommendation-v2.yml):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v2</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl apply -f istiofiles/destination-rule-recommendation-v1-v2.yml</span><br><span class="line">destinationrule.networking.istio.io/recommendation created</span><br><span class="line">% kubectl apply -f istiofiles/virtual-service-recommendation-v2.yml</span><br><span class="line">virtualservice.networking.istio.io/recommendation created</span><br></pre></td></tr></table></figure>

<p>Now the curl output is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 1298</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 1299</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 1300</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl get virtualservices</span><br><span class="line">NAME               GATEWAYS             HOSTS              AGE</span><br><span class="line">customer-gateway   [customer-gateway]   [*]                10d</span><br><span class="line">recommendation                          [recommendation]   115s</span><br><span class="line">% kubectl get destinationrules</span><br><span class="line">NAME             HOST             AGE</span><br><span class="line">recommendation   recommendation   3m58s</span><br><span class="line">% kubectl describe vs recommendation</span><br><span class="line">Name:         recommendation</span><br><span class="line">Namespace:    istio-demo</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                &#123;<span class="string">"apiVersion"</span>:<span class="string">"networking.istio.io/v1alpha3"</span>,<span class="string">"kind"</span>:<span class="string">"VirtualService"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"recommendation"</span>,<span class="string">"namespace"</span>:<span class="string">"ist...</span></span><br><span class="line"><span class="string">API Version:  networking.istio.io/v1beta1</span></span><br><span class="line"><span class="string">Kind:         VirtualService</span></span><br><span class="line"><span class="string">Metadata:</span></span><br><span class="line"><span class="string">  Creation Timestamp:  2020-08-02T03:35:26Z</span></span><br><span class="line"><span class="string">  Generation:          1</span></span><br><span class="line"><span class="string">  Managed Fields:</span></span><br><span class="line"><span class="string">    API Version:  networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="string">    Fields Type:  FieldsV1</span></span><br><span class="line"><span class="string">    fieldsV1:</span></span><br><span class="line"><span class="string">      f:metadata:</span></span><br><span class="line"><span class="string">        f:annotations:</span></span><br><span class="line"><span class="string">          .:</span></span><br><span class="line"><span class="string">          f:kubectl.kubernetes.io/last-applied-configuration:</span></span><br><span class="line"><span class="string">      f:spec:</span></span><br><span class="line"><span class="string">        .:</span></span><br><span class="line"><span class="string">        f:hosts:</span></span><br><span class="line"><span class="string">        f:http:</span></span><br><span class="line"><span class="string">    Manager:         kubectl</span></span><br><span class="line"><span class="string">    Operation:       Update</span></span><br><span class="line"><span class="string">    Time:            2020-08-02T03:35:26Z</span></span><br><span class="line"><span class="string">  Resource Version:  8166</span></span><br><span class="line"><span class="string">  Self Link:         /apis/networking.istio.io/v1beta1/namespaces/istio-demo/virtualservices/recommendation</span></span><br><span class="line"><span class="string">  UID:               e568bf42-8e1e-483e-aac9-102a63679547</span></span><br><span class="line"><span class="string">Spec:</span></span><br><span class="line"><span class="string">  Hosts:</span></span><br><span class="line"><span class="string">    recommendation</span></span><br><span class="line"><span class="string">  Http:</span></span><br><span class="line"><span class="string">    Route:</span></span><br><span class="line"><span class="string">      Destination:</span></span><br><span class="line"><span class="string">        Host:    recommendation</span></span><br><span class="line"><span class="string">        Subset:  version-v2</span></span><br><span class="line"><span class="string">      Weight:    100 #The weight</span></span><br><span class="line"><span class="string">Events:          &lt;none&gt;</span></span><br></pre></td></tr></table></figure>

<p>Let’s swift the route to v1.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl edit vs/recommendation <span class="comment"># change subset from v2-&gt;v1</span></span><br></pre></td></tr></table></figure>

<p>We alse can split the weight(virtual-service-recommendation-v1_and_v2.yml):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v1</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">90</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v2</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 2535</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1246</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1247</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1248</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1249</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1250</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1251</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1252</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1253</span><br></pre></td></tr></table></figure>

<p>If we delete the virtualservice and destinationRule, then the weight for v1 and v2 is 50%.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">% kubectl delete vs recommendation</span><br><span class="line">virtualservice.networking.istio.io <span class="string">"recommendation"</span> deleted</span><br><span class="line">% kubectl delete dr recommendation</span><br><span class="line">destinationrule.networking.istio.io <span class="string">"recommendation"</span> deleted</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1736</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 2654</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v1 from &#39;f11b097f1dd0&#39;: 1737</span><br><span class="line">customer &#x3D;&gt; preference &#x3D;&gt; recommendation v2 from &#39;3cbba7a9cde5&#39;: 2655</span><br></pre></td></tr></table></figure>

<h2 id="Perform-smarter-canery-deployments"><a href="#Perform-smarter-canery-deployments" class="headerlink" title="Perform smarter canery deployments"></a>Perform smarter canery deployments</h2><p>Smart routing based on user-agent header (Canary Deployment).</p>
<p>Set recommendation for all v1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create -f istiofiles&#x2F;destination-rule-recommendation-v1-v2.yml</span><br><span class="line">kubectl create -f istiofiles&#x2F;virtual-service-recommendation-v1.yml</span><br></pre></td></tr></table></figure>

<p>virtual-service-recommendation-v1.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v1</span></span><br><span class="line">      <span class="attr">weight:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>Set Safari users to v2 ()</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">replace</span> <span class="string">-f</span> <span class="string">istiofiles/virtual-service-safari-recommendation-v2.yml</span> </span><br><span class="line"></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">virtualservice</span></span><br></pre></td></tr></table></figure>

<p>virtual-service-safari-recommendation-v2.yml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">baggage-user-agent:</span></span><br><span class="line">          <span class="attr">regex:</span> <span class="string">.*Safari.*</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v1</span></span><br></pre></td></tr></table></figure>

<h2 id="Practice-the-mirroring-and-the-dark-luanch"><a href="#Practice-the-mirroring-and-the-dark-luanch" class="headerlink" title="Practice the mirroring and the dark luanch"></a>Practice the mirroring and the dark luanch</h2><p>virtual-service-recommendation-v1-mirror-v2.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">version-v1</span></span><br><span class="line">    <span class="attr">mirror:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">      <span class="attr">subset:</span> <span class="string">version-v2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl logs -f `kubectl get pods | grep recommendation-v2 | awk <span class="string">'&#123; print $1&#125;'</span>` -c recommendation</span><br></pre></td></tr></table></figure>

<h2 id="Load-Balancer"><a href="#Load-Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">recommendation</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">recommendation</span></span><br><span class="line">  <span class="attr">trafficPolicy:</span></span><br><span class="line">    <span class="attr">loadBalancer:</span></span><br><span class="line">      <span class="attr">simple:</span> <span class="string">RANDOM</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>Explore the Istio Service Mesh</title>
    <url>/2020/08/09/kubernetes-istio2/</url>
    <content><![CDATA[<h2 id="1-Explorer-Observability"><a href="#1-Explorer-Observability" class="headerlink" title="1.Explorer Observability"></a>1.Explorer Observability</h2><p>Open the dashboard:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> MINIKUBE_IP=$(minikube --profile istio-mk  ip)</span><br><span class="line"></span><br><span class="line">kubectl patch service/grafana -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span> -n istio-system</span><br><span class="line">open http://<span class="variable">$MINIKUBE_IP</span>:$(kubectl get svc grafana -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">kubectl patch service/jaeger-query -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span> -n istio-system</span><br><span class="line">open http://<span class="variable">$MINIKUBE_IP</span>:$(kubectl get svc jaeger-query -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">kubectl patch service/prometheus -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span> -n istio-system</span><br><span class="line">open http://<span class="variable">$MINIKUBE_IP</span>:$(kubectl get svc prometheus -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">kubectl patch service/kiali -p <span class="string">'&#123;"spec":&#123;"type":"NodePort"&#125;&#125;'</span> -n istio-system</span><br><span class="line">open http://<span class="variable">$MINIKUBE_IP</span>:$(kubectl get svc kiali -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)/kiali</span><br></pre></td></tr></table></figure>

<p>Kiali: default username/password: admin/admin</p>
<h3 id="1-1-Grafana"><a href="#1-1-Grafana" class="headerlink" title="1.1 Grafana"></a>1.1 Grafana</h3><p>In the grapana. Home-&gt;Istio-&gt;Istio Workload Dashboard.</p>
<p><img src="/images/istio-5.png" alt="Grapha"></p>
<h3 id="1-2-Jaeger"><a href="#1-2-Jaeger" class="headerlink" title="1.2 Jaeger"></a>1.2 Jaeger</h3><p><img src="/images/istio-6.png" alt="Jaeger"></p>
<p><img src="/images/istio-7.png" alt="Jaeger"></p>
<h3 id="1-3-Prometheus"><a href="#1-3-Prometheus" class="headerlink" title="1.3 Prometheus"></a>1.3 Prometheus</h3><h2 id="2-Inject-Chaos"><a href="#2-Inject-Chaos" class="headerlink" title="2.Inject Chaos"></a>2.Inject Chaos</h2><h2 id="3-Add-resiliency"><a href="#3-Add-resiliency" class="headerlink" title="3.Add resiliency"></a>3.Add resiliency</h2><h2 id="4-Add-security"><a href="#4-Add-security" class="headerlink" title="4.Add security"></a>4.Add security</h2>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计原理3-设计模式</title>
    <url>/2021/02/18/2021-02-18-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%863/</url>
    <content><![CDATA[<h2 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h2><p><strong>设计模式的精髓是对多态的使用</strong></p>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>装饰模式最大的特点是，通过类的构造函数传入一个同类对象，也就是每个类实现的接口和构造函数传入的对象是同一个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnyThing</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moon</span> <span class="keyword">implements</span> <span class="title">AnyThing</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> AnyThing a;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Moon</span><span class="params">(AnyThing a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"明月装饰了"</span>);</span><br><span class="line">    a.exe();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dream</span> <span class="keyword">implements</span> <span class="title">AnyThing</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> AnyThing a;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Dream</span><span class="params">(AnyThing a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"梦装饰了"</span>);</span><br><span class="line">    a.exe();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">AnyThing</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> AnyThing a;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">You</span><span class="params">(AnyThing a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"你"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnyThing t = <span class="keyword">new</span> Moon(<span class="keyword">new</span> Dream(<span class="keyword">new</span> You(<span class="keyword">null</span>)));</span><br><span class="line">t.exe();</span><br><span class="line"></span><br><span class="line">输出：明月装饰了梦装饰了你</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AnyThing t = <span class="keyword">new</span> Dream(<span class="keyword">new</span> Moon(<span class="keyword">new</span> You(<span class="keyword">null</span>)));</span><br><span class="line">t.exe();</span><br><span class="line"></span><br><span class="line">输出：梦装饰了明月装饰了你</span><br></pre></td></tr></table></figure>

<p>面试官让你“聊聊设计模式”，也许你可以这样回答：“除了单例和工厂，我更喜欢适配器和观察者，还有，组合模式在处理树形结构的时候也非常有用。”</p>
<p>组合模式遍历树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultModule</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module currentModule;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Module&gt; modules;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentModule</span><span class="params">(Module currentModule, Module... modules)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentModule = currentModule;</span><br><span class="line">        <span class="keyword">this</span>.modules = Arrays.asList(modules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentModule.print();</span><br><span class="line">        <span class="keyword">this</span>.modules.forEach(Module::print);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComponentModule subModule31 = <span class="keyword">new</span> ComponentModule(</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"31"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"311"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"312"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"313"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        ComponentModule subModule3 = <span class="keyword">new</span> ComponentModule(</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"3"</span>),</span><br><span class="line">            subModule31,</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"32"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"33"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        ComponentModule <span class="keyword">module</span> = <span class="keyword">new</span> ComponentModule(</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"0"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"1"</span>),</span><br><span class="line">            <span class="keyword">new</span> DefaultModule(<span class="string">"2"</span>),</span><br><span class="line">            subModule3</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span>.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="设计模式应用：编程框架中的设计模式"><a href="#设计模式应用：编程框架中的设计模式" class="headerlink" title="设计模式应用：编程框架中的设计模式"></a>设计模式应用：编程框架中的设计模式</h2><h3 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h3><p><strong>框架式对某一类架构方案可复用设计与实现</strong></p>
<p>Tomcat是框架，它完成了Web应用请求响应的主体流程。框架应用满足依赖倒置原则.</p>
<p>框架会调用我们编写的代码，而我们编写的代码则会调用工具完成某些特定的功能，比如输出日志，进行正则表达式匹配等.</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-dp.png" alt="dp"></p>
<h3 id="Web容器中的设计模式"><a href="#Web容器中的设计模式" class="headerlink" title="Web容器中的设计模式"></a>Web容器中的设计模式</h3><p><strong>1.策略模式</strong></p>
<ul>
<li>策略接口：J2EE规范定义的Servlet接口</li>
<li>策略实现：我们看开发的Servlet具体类</li>
<li>Client程序：Tomcat</li>
</ul>
<p><strong>2.模板方法模式</strong></p>
<ul>
<li>父类中抽象方法定义计算的骨架和过程，抽象方法的实现留在子类。</li>
<li><code>HttpServlet extends GenericServlet implements Servlert</code></li>
<li>HttpServlet中的service方法 针对不同的HTTP请求类型调用相应的方法，service方法就是一个模板方法。</li>
</ul>
<h3 id="JUnit中的设计模式"><a href="#JUnit中的设计模式" class="headerlink" title="JUnit中的设计模式"></a>JUnit中的设计模式</h3><p><strong>1.模板方法模式</strong> 测试用例的方法执行顺序固定在模板方法TestCase.runBare</p>
<p><strong>2.测试套件TestSuite 采用组合模式</strong></p>
<ul>
<li><code>TestSuite.addTest(TestCase test)</code></li>
<li><code>TestSuite.addTest(TestSuite test)</code></li>
</ul>
<h2 id="组件的设计原则"><a href="#组件的设计原则" class="headerlink" title="组件的设计原则"></a>组件的设计原则</h2><p>软件设计的核心目标是<strong>高内聚、低耦合</strong>。从这两个角度思考组件的设计原则。</p>
<h3 id="组件内聚原则"><a href="#组件内聚原则" class="headerlink" title="组件内聚原则"></a>组件内聚原则</h3><p>组件内聚原则主要讨论哪些类应该聚合在同一个组件中，以便组件既能提供相对完整的功能，又不至于太过庞大。</p>
<ol>
<li>复用发布等同原则：软件复用的最小粒度应该等同于其发布的最小粒度。</li>
<li>共同封闭原则：我们应该将那些会同时修改，并且为了相同目的而修改的类放到同一个组件中。</li>
<li>共同复用原则：不要强迫一个组件的用户依赖他们不需要的东西。</li>
</ol>
<h3 id="组件耦合原则"><a href="#组件耦合原则" class="headerlink" title="组件耦合原则"></a>组件耦合原则</h3><p>组件内聚原则讨论的是组件应该包含哪些功能和类，而组件耦合原则讨论组件之间的耦合关系应该如何设计。</p>
<ol>
<li>无循环依赖原则：组件依赖关系中不应该出现环。</li>
<li>稳定依赖原则：组件依赖关系必须指向更稳定的方向。组件不应该依赖一个比自己还不稳定的组件。</li>
<li>稳定抽象原则：一个组件的抽象化程度应该与其稳定性程度一致。也就是说，一个稳定的组件应该是抽象的，而不稳定的组件应该是具体的。如果你设计的组件是具体的、不稳定的，那么可以为这个组件对外提供服务的类设计一组接口，并把这组接口封装在一个专门的组件中，那么这个组件相对就比较抽象、稳定。如前面讲的依赖倒置原则 (DIP)。</li>
</ol>
<h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><ol>
<li>UML精粹</li>
<li>敏捷软件开发：原则、模式与实践</li>
<li>架构整洁之道</li>
<li>企业应用架构模式</li>
</ol>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>System Design</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计原理2-SOLID原则</title>
    <url>/2021/02/18/2021-02-18-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%862/</url>
    <content><![CDATA[<p>设计的两个基本原则：高内聚，低耦合。</p>
<h2 id="开闭原则：不修改代码实现变更"><a href="#开闭原则：不修改代码实现变更" class="headerlink" title="开闭原则：不修改代码实现变更"></a>开闭原则：不修改代码实现变更</h2><p>OCP</p>
<p>开闭原则：<strong>软件实体（模块、类、函数等等）应该对扩展是开放的，对修改是关闭的。</strong></p>
<p><strong>1. 使用策略模式实现开闭原则</strong></p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-strategy.png" alt="strategy"></p>
<p><strong>2. 使用适配器模式实现开闭原则</strong></p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-adapter.png" alt="adapter"></p>
<p><strong>3. 使用观察者模式实现开闭原则</strong>: 如果要实现多个控制，使用观察者模式+策略+适配器模式</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-observer.png" alt="observer"></p>
<p><strong>4. 使用模板方法模式实现开闭原则</strong>：做一些前置或后置的处理，使用观察者模式+策略+适配器+模版方法</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-template.png" alt="template"></p>
<p><strong>5. 使用工厂方法实现开闭原则</strong>：观察者+策略+适配器+模板+工厂</p>
<p><strong>小结</strong>：<strong>实现开闭原则的关键是抽象</strong>。当一个模块依赖的是一个抽象接口的时候，就可以随意对这个抽象接口进行扩展，这个时候，不需要对现有代码进行任何修改，利用接口的多态性，通过增加一个新实现该接口的实现类，就能完成需求变更。不同场景进行扩展的方式是不同的，这时候就会产生不同的设计模式，大部分的设计模式都是用来解决扩展的灵活性问题的。</p>
<p>开闭原则可以说是软件设计原则的原则，是软件设计的核心原则，其他的设计原则更偏向技术性，具有技术性的指导意义，而开闭原则是方向性的，在软件设计的过程中，应该时刻以开闭原则指导、审视自己的设计：当需求变更的时候，现在的设计能否不修改代码就可以实现功能的扩展？如果不是，那么就应该进一步使用其他的设计原则和设计模式去重新设计。</p>
<h2 id="依赖倒置原则：如何不依赖代码却复用它的功能"><a href="#依赖倒置原则：如何不依赖代码却复用它的功能" class="headerlink" title="依赖倒置原则：如何不依赖代码却复用它的功能"></a>依赖倒置原则：如何不依赖代码却复用它的功能</h2><p>Dependency Inversion Principal：如何不依赖代码却复用它的功能</p>
<p>依赖倒置原则是这样的：</p>
<ul>
<li><strong>高层模块不应该依赖低层模块，二者都应该依赖抽象。</strong></li>
<li><strong>抽象不应该依赖具体实现，具体实现应该依赖抽象。</strong></li>
</ul>
<p>举例：</p>
<ul>
<li>代码并不直接依赖数据库的驱动，而是依赖 JDBC。各种数据库的驱动都实现了 JDBC，当应用程序需要更换数据库的时候，不需要修改任何代码。这正是因为应用代码，高层模块，不依赖数据库驱动，而是依赖抽象 JDBC，而数据库驱动，作为低层模块，也依赖 JDBC。</li>
<li>Java 开发的 Web 应用也不需要依赖 Tomcat 这样的 Web 容器，只需要依赖 J2EE 规范，Web 应用实现 J2EE 规范的 Servlet 接口，然后把应用程序打包通过 Web 容器启动就可以处理 HTTP 请求了。这个 Web 容器可以是 Tomcat，也可以是 Jetty，任何实现了 J2EE 规范的 Web 容器都可以。同样，高层模块不依赖低层模块，大家都依赖 J2EE 规范。</li>
</ul>
<p>这是我们习惯上的层次依赖示例，策略层依赖方法层，方法层依赖工具层。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-anti-dip.png" alt="normal"></p>
<p>这样分层依赖的一个潜在问题是，策略层对方法层和工具层是传递依赖的，下面两层的任何改动都会导致策略层的改动，这种传递依赖导致的级联改动可能会导致软件维护过程非常糟糕。</p>
<p>解决办法是利用依赖倒置的设计原则，每个高层模块都为它所需要的服务声明一个抽象接口，而低层模块则实现这些抽象接口，高层模块通过抽象接口使用低层模块。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-dip.png" alt="dip"></p>
<p>高层模块就不需要直接依赖低层模块，而变成了低层模块依赖高层模块定义的抽象接口，从而实现了依赖倒置，解决了策略层、方法层、工具层的传递依赖问题。</p>
<p><strong>依赖倒置原则中，除了具体实现要依赖抽象，最重要的是，抽象是属于谁的抽象。</strong>也就是说，接口被高层模块定义，高层模块拥有接口，低层模块实现接口</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-dip-ex1.png" alt="dip"></p>
<p><strong>总结：</strong></p>
<p>依赖倒置原则通俗说就是，高层模块不依赖低层模块，而是都依赖抽象接口，这个抽象接口通常是由高层模块定义，低层模块实现。</p>
<p>遵循依赖倒置原则有这样几个编码守则：</p>
<ul>
<li>应用代码中多使用抽象接口，尽量避免使用那些多变的具体实现类。</li>
<li>不要继承具体类，如果一个类在设计之初不是抽象类，那么尽量不要去继承它。对具体类的继承是一种强依赖关系，维护的时候难以改变。</li>
<li>不要重写（override）包含具体实现的函数。</li>
</ul>
<p>依赖倒置原则最典型的使用场景就是框架的设计。框架提供框架核心功能，比如 HTTP 处理，MVC 等，并提供一组接口规范，应用程序只需要遵循接口规范编程，就可以被框架调用。程序使用框架的功能，但是不调用框架的代码，而是实现框架的接口，被框架调用，从而框架有更高的可复用性，被应用于各种软件开发中。</p>
<h2 id="里氏替换原则：正方形可以继承长方形吗？"><a href="#里氏替换原则：正方形可以继承长方形吗？" class="headerlink" title="里氏替换原则：正方形可以继承长方形吗？"></a>里氏替换原则：正方形可以继承长方形吗？</h2><p>Liskov Substitution Principle，LSP。关于如何设计类的继承关系，怎样使继承不违反开闭原则，实际上有一个关于继承的设计原则，叫里氏替换原则。</p>
<h3 id="一个违反里氏替换规则的例子"><a href="#一个违反里氏替换规则的例子" class="headerlink" title="一个违反里氏替换规则的例子"></a>一个违反里氏替换规则的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shape.type == Shape.Circle ) &#123;</span><br><span class="line">        drawCircle((Circle) shape);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.type == Shape.Square) &#123;</span><br><span class="line">        drawSquare((Square) shape);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先看到这样的 if/else 代码，就可以判断违反了开闭原则：当增加新的 Shape 类型的时候，必须修改这个方法，增加 else if 代码。</p>
<p>其次也因为同样的原因违反了里氏替换原则：当增加新的 Shape 类型的时候，如果没有修改这个方法，没有增加 else if 代码，那么这个新类型就无法替换基类 Shape。</p>
<h3 id="正方形可以继承长方形吗？"><a href="#正方形可以继承长方形吗？" class="headerlink" title="正方形可以继承长方形吗？"></a>正方形可以继承长方形吗？</h3><p>正方形在如下情况下不可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testArea</span><span class="params">(Rectangle rect)</span> </span>&#123;</span><br><span class="line">    rect.setWidth(<span class="number">3</span>);</span><br><span class="line">    rect.setHeight(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">12</span> == rect.calculateArea(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从而得出一个结论：</p>
<p><strong>子类不能比父类更严格</strong></p>
<p>当子类继承父类的时候，根据里氏替换原则，使用者可以在使用父类的地方使用子类替换，那么从契约的角度，子类的契约就不能比父类更严格，否则使用者在用子类替换父类的时候，就会因为更严格的契约而失败。</p>
<p>实践中，当你继承一个父类仅仅是为了复用父类中的方法的时候，那么很有可能你离错误的继承已经不远了。一个类如果不是为了被继承而设计，那么最好就不要继承它。粗暴一点地说，如果不是抽象类或者接口，最好不要继承它。</p>
<p>如果你确实需要使用一个类的方法，最好的办法是组合这个类而不是继承这个类，这就是人们通常说的<strong>组合优于继承</strong>。</p>
<p>如果类 B 需要使用类 A 的方法，这时候不要去继承类 A，而是去组合类 A，也能达到使用类 A 方法的效果。这其实就是<strong>对象适配器模式</strong>了，使用这个模式的话，类 B 不需要继承类 A，一样可以拥有类 A 的方法，同时还有更大的灵活性，比如可以改变方法的名称以适应应用接口的需要。</p>
<p>继承接口或者抽象类也并不保证你的继承设计就是正确的，最好的方法还是用里氏替换原则检查一下你的设计：使用父类的地方是不是可以用子类替换？</p>
<p>违反里氏替换原则不仅仅发生在设计继承的地方，也可能发生在使用父类和子类的地方，错误的使用方法，也可能导致程序违反里氏替换原则，使子类无法替换父类。</p>
<h2 id="单一职责原则：为什么说一个类文件打开最好不要超过一屏"><a href="#单一职责原则：为什么说一个类文件打开最好不要超过一屏" class="headerlink" title="单一职责原则：为什么说一个类文件打开最好不要超过一屏"></a>单一职责原则：为什么说一个类文件打开最好不要超过一屏</h2><p>Single responsibility principle, SRP</p>
<p>类的职责应该是单一的，也就是引起类变化的原因应该只有一个，这样类的代码通常也是比较少的。</p>
<h2 id="接口隔离原则：如何对类的调用者隐藏类的公有方法？"><a href="#接口隔离原则：如何对类的调用者隐藏类的公有方法？" class="headerlink" title="接口隔离原则：如何对类的调用者隐藏类的公有方法？"></a>接口隔离原则：如何对类的调用者隐藏类的公有方法？</h2><p>Interface Segregation Principle, ISP</p>
<p>接口隔离原则说：不应该强迫用户依赖他们不需要的方法。</p>
<p>通过使用接口隔离原则，我们可以<strong>将一个实现类的不同方法包装在不同的接口中对外暴露。</strong>应用程序只需要依赖它们需要的方法，而不会看到不需要的方法。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-isp.png" alt="ISP"></p>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>System Design</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构101</title>
    <url>/2021/02/19/2021-02-19-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84101/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p><img src="https://liulixiang1988.github.io/images/2021-02-19-arch-01.jpeg" alt="arch"></p>
<h2 id="缓存架构：如何减少不必要的计算"><a href="#缓存架构：如何减少不必要的计算" class="headerlink" title="缓存架构：如何减少不必要的计算?"></a>缓存架构：如何减少不必要的计算?</h2><p>缓存分为<strong>通读缓存</strong>与<strong>旁路缓存</strong>。</p>
<h3 id="通读缓存"><a href="#通读缓存" class="headerlink" title="通读缓存"></a>通读缓存</h3><p>通读（read-through）缓存，应用程序访问通读缓存获取数据的时候，如果通读缓存有应用程序需要的数据，那么就返回这个数据；如果没有，那么通读缓存就自己负责访问数据源，从数据源获取数据返回给应用程序，并将这个数据缓存在自己的缓存中。这样，下次应用程序需要数据的时候，就可以通过通读缓存直接获得数据了。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-cache-read-through.png" alt="read-through"></p>
<p>互联网应用中主要使用的通读缓存是 CDN 和反向代理缓存。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-cdn.png" alt="cdn"></p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-reproxy.png" alt="reversed proxy"></p>
<h3 id="旁路缓存"><a href="#旁路缓存" class="headerlink" title="旁路缓存"></a>旁路缓存</h3><p>旁路（cache-aside）缓存，应用程序访问旁路缓存获取数据的时候，如果旁路缓存中有应用程序需要的数据，那么就返回这个数据；如果没有，就返回空（null）。应用程序需要自己从数据源读取数据，然后将这个数据写入到旁路缓存中。这样，下次应用程序需要数据的时候，就可以通过旁路缓存直接获得数据了。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-cache-aside.png" alt="cache-aside"></p>
<p>CDN 和反向代理缓存通常会作为系统架构的一部分，很多时候对应用程序是透明的。而应用程序在代码中主要使用的是对象缓存，<strong>对象缓存是一种旁路缓存</strong>。</p>
<h3 id="缓存脏读"><a href="#缓存脏读" class="headerlink" title="缓存脏读"></a>缓存脏读</h3><p>数据脏读的问题，缓存的数据来自数据源，如果数据源中的数据被修改了，那么缓存中的数据就变成脏数据了。</p>
<p>解决方法有两个：</p>
<ol>
<li><strong>过期失效</strong>：每次写入缓存中的数据都标记其失效时间，在读取缓存的时候，检查数据是否已经过期失效，如果失效，就重新从数据源获取数据。缓存失效依然可能会在未失效时间内读到脏数据，但是一般的应用都可以容忍较短时间的数据不一致，比如淘宝卖家更新了商品信息，那么几分钟数据没有更新到缓存，买家看到的还是旧数据，这种情况通常是可以接受的，这时候，就可以设置缓存失效时间为几分钟。</li>
<li><strong>失效通知</strong>，应用程序更新数据源的数据，同时发送通知，将该数据从缓存中清除。失效通知看起来数据更新更加及时，但是实践中，更多使用的还是过期失效。</li>
</ol>
<h3 id="缓存集群扩容"><a href="#缓存集群扩容" class="headerlink" title="缓存集群扩容"></a>缓存集群扩容</h3><p>集群扩容使用一致性hash算法。</p>
<h2 id="异步架构：如何避免互相依赖的系统间耦合？"><a href="#异步架构：如何避免互相依赖的系统间耦合？" class="headerlink" title="异步架构：如何避免互相依赖的系统间耦合？"></a>异步架构：如何避免互相依赖的系统间耦合？</h2><p>缓存只能改善系统的读操作性能，对于写操作，缓存是无能为力的。主要手段就是使用消息队列的异步架构，有时候也被称为事件驱动架构。</p>
<p>同步架构：当应用程序调用服务的时候，当前程序需要阻塞等待服务完成，返回服务结果后才能继续向下执行。</p>
<p>典型的消息队列异步架构如下：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-ps.png" alt="msg-queue"></p>
<p>根据消息消费方式又分为<strong>点对点模式</strong>和<strong>发布订阅模式</strong>两种。</p>
<p>在<strong>点对点模式</strong>中，多个消息生产者向消息队列发送消息，多个消息消费者消费消息，每个消息只会被一个消息消费者消费。</p>
<p>在<strong>发布订阅模式</strong>中，开发者可以在消息队列中设置主题，消息生产者的消息按照主题进行发送，多个消息消费者可以订阅同一个主题，每个消费者都可以收到这个主题的消息拷贝，然后按照自己的业务逻辑分别进行处理计算。发布订阅模式下，一个主题可以被重复订阅，所以如果需要扩展功能，可以在对当前的生产者和消费者都没有影响的前提下，增加新的消费者订阅同一个主题即可。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-ps2.png" alt="product-consumer"></p>
<h3 id="消息队列异步架构的好处"><a href="#消息队列异步架构的好处" class="headerlink" title="消息队列异步架构的好处"></a>消息队列异步架构的好处</h3><ol>
<li>改善写操作请求的响应时间</li>
<li>更容易进行伸缩：应用程序也可以通过负载均衡实现集群伸缩，但是这种集群伸缩是以整个应用服务器为单位的。如果只是其中某些功能有负载压力，那么就可以单独针对消费者集群进行伸缩。</li>
<li>削峰填谷</li>
<li>隔离失败</li>
<li>降低耦合</li>
</ol>
<h2 id="负载均衡架构：如何用10行代码实现一个负载均衡服务？"><a href="#负载均衡架构：如何用10行代码实现一个负载均衡服务？" class="headerlink" title="负载均衡架构：如何用10行代码实现一个负载均衡服务？"></a>负载均衡架构：如何用10行代码实现一个负载均衡服务？</h2><p>负载均衡硬件：F5</p>
<h3 id="HTTP-重定向负载均衡"><a href="#HTTP-重定向负载均衡" class="headerlink" title="HTTP 重定向负载均衡"></a>HTTP 重定向负载均衡</h3><p>302跳转。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-httpproxy.png" alt="http lb"></p>
<p>HTTP 重定向负载均衡的优点是设计比较简单，但是它的缺点也比较明显，一方面用户完成一次访问，就需要请求两次数据中心，一次请求负载均衡服务器，一次是请求应用服务器，请求处理性能会受很大的影响。另一个问题是因为响应要重定向到真正的应用服务器，所以需要把应用服务器的 IP 地址暴露给外部用户，这样可能会带来安全性的问题。</p>
<h3 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h3><p><img src="https://liulixiang1988.github.io/images/2021-02-19-dns-lb.png" alt="dns lb"></p>
<p>和 HTTP 重定向不同，用户不需要每次请求都进行 DNS 域名解析，第一次解析后，域名缓存在本机，后面较长一段时间都不会再进行域名解析了，因此性能方面不会是问题。</p>
<p>如果如图中所示，域名解析直接得到应用服务器的 IP 地址，确实会存在安全性问题。但是大型互联网应用通常并不直接通过 DNS 解析得到应用服务器 IP 地址，而是解析得到负载均衡服务器的 IP 地址。</p>
<h3 id="反向代理负载均衡"><a href="#反向代理负载均衡" class="headerlink" title="反向代理负载均衡"></a>反向代理负载均衡</h3><p>反向代理服务器查找本机是否有请求的资源，如果有就直接返回资源数据，如果没有，就将请求发送给后面的应用服务器继续处理。</p>
<p>反向代理服务器是工作在 HTTP 协议层之上的，所以它代理的也是 HTTP 的请求和响应。作为互联网应用层的一个协议，HTTP 协议相对说来比较重，效率比较低，所以反向代理负载均衡通常用在小规模的互联网系统上，只有几台或者十几台服务器的规模。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-reproxy-2.png" alt="reversed proxy"></p>
<h3 id="IP-负载均衡"><a href="#IP-负载均衡" class="headerlink" title="IP 负载均衡"></a>IP 负载均衡</h3><p>反向代理负载均衡是工作在应用层网络协议上的负载均衡，因此也叫应用层负载均衡。应用层负载均衡之下的负载均衡方法是在 TCP/IP 协议的 IP 层进行负载均衡，IP 层是网络通讯协议的网络层，所以有时候叫网络层负载均衡。它的主要工作原理是当用户的请求到达负载均衡服务器以后，负载均衡服务器会对网络层的数据包的 IP 地址进行转换，修改 IP 地址，将其修改为应用服务器的 IP 地址，然后把数据包重新发送出去，请求数据就会到达应用服务器。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-ip-lb.png" alt="ip lb"></p>
<p>IP 负载均衡不需要在 HTTP 协议层工作，可以在操作系统内核直接修改 IP 数据包的地址，因此，效率比应用层的反向代理负载均衡高得多。但是它依然有一个缺陷，不管是请求还是响应的数据包，都要通过负载均衡服务器进行 IP 地址转换，才能够正确地把请求数据分发到应用服务器，或者正确地将响应数据包发送到用户端程序。请求的数据通常比较小，一个 URL 或者是一个简单的表单，但是响应的数据不管是 HTML 还是图片，或者是 JS、CSS 这样的资源文件通常都会比较大，因此负载均衡服务器会成为响应数据的流量瓶颈。</p>
<h3 id="数据链路层负载均衡"><a href="#数据链路层负载均衡" class="headerlink" title="数据链路层负载均衡"></a>数据链路层负载均衡</h3><p>数据链路层负载均衡可以解决响应数据量大而导致的负载均衡服务器输出带宽不足的问题。也就是说，负载均衡服务器并不修改数据包的 IP 地址，而是修改数据链路层里的网卡 mac 地址，在数据链路层实现负载均衡。而应用服务器和负载均衡服务器都使用相同的虚拟 IP 地址，这样 IP 路由就不会受到影响，但是网卡会根据自己的 mac 地址，选择负载均衡服务器发送到自己网卡的数据包，交给对应的应用程序去处理，处理结束以后，当把响应的数据包发送到网络上的时候，因为 IP 地址没有修改过，所以这个响应会直接到达用户的浏览器，而不会再经过负载均衡服务器。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-19-dl-lb.png" alt="dl lb"></p>
<p>链路层负载均衡避免响应数据再经过负载均衡服务器，因而可以承受较大的数据传输压力，所以，目前大型互联网应用基本都使用链路层负载均衡。</p>
<p>Linux 上实现 IP 负载均衡和链路层负载均衡的技术是 LVS，目前 LVS 的功能已经集成到 Linux 中了，通过 Linux 可以直接配置实现这两种负载均衡。</p>
<h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><p>目前主要的负载均衡算法有轮询、随机、最少连接几种。</p>
<ol>
<li>轮询就是将请求轮流发给应用服务器</li>
<li>随机就是将请求随机发送给任一台应用服务器</li>
<li>最少连接则是根据应用服务器当前正在处理的连接数，将请求分发给最少连接的服务器。</li>
</ol>
<h2 id="数据存储架构：如何改善系统的数据存储能力？"><a href="#数据存储架构：如何改善系统的数据存储能力？" class="headerlink" title="数据存储架构：如何改善系统的数据存储能力？"></a>数据存储架构：如何改善系统的数据存储能力？</h2><p>改善数据库存储的主要手段有：数据库主从复制、数据库分片与NoSQL数据库。</p>
<h3 id="数据库主从复制与主主复制"><a href="#数据库主从复制与主主复制" class="headerlink" title="数据库主从复制与主主复制"></a>数据库主从复制与主主复制</h3><p>主从复制的原理：</p>
<p>主要的复制原理是，当应用程序客户端发送一条更新命令到主服务器数据库的时候，数据库会把这条更新命令同步记录到 Binlog 中，然后由另外一个线程从 Binlog 中读取这条日志，通过远程通讯的方式将它复制到从服务器上面去。</p>
<p>从服务器获得这条更新日志后，将其加入到自己的 Relay Log 中，然后由另外一个 SQL 执行线程从 Relay log 中读取这条新的日志，并把它在本地的数据库中重新执行一遍，这样当客户端应用程序执行一个 update 命令的时候，这个命令会同时在主数据库和从数据库上执行，从而实现了主数据库向从数据库的复制，让从数据库和主数据库保持一样的数据。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-ms.png" alt="database master slave"></p>
<p>通过数据库主从复制的方式，我们可以实现数据库读写分离。现实中多用一主多从的数据复制方案。从数据库分担读的压力，承担不同的角色，比如有的从数据库用来做实时数据分析，有的从数据库用来做批任务报表计算，有的单纯做数据备份。</p>
<p>主主复制：两台服务器互相备份，任何一台服务器都会将自己的 Binlog 复制到另一台机器的 Relay Log 中，以保持两台服务器的数据一致。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-mm.png" alt="database master-master"></p>
<p>使用主主复制需要注意的是，主主复制仅仅用来提升数据写操作的可用性，并不能用来提高写操作的性能。任何时候，系统中都只能有一个数据库作为主数据库，也就是说，所有的应用程序都必须连接到同一个主数据库进行写操作。只有当该数据库宕机失效的时候，才会将写操作切换到另一台主数据库上。这样才能够保证数据库数据的一致性，不会出现数据冲突。</p>
<p>不管是主从复制还是主主复制，都无法提升数据库的存储能力，也就是说，不管增加多少服务器，这些服务器存储的数据都是一样的。如果数据量太大，数据库无法存下这么多的数据，通过数据库复制是无法解决问题的。</p>
<h3 id="数据库分片"><a href="#数据库分片" class="headerlink" title="数据库分片"></a>数据库分片</h3><p>将一张表的数据分成若干片，每一片都包含了数据表中一部分的行记录，然后每一片存储在不同的服务器上，这样一张表就存储在多台服务器上了。</p>
<p>最简单的数据库分片存储可以采用硬编码的方式，但是硬编码方式的缺点比较明显。首先，如果要增加服务器，那么就必须修改分片逻辑代码，这样程序代码就会因为非业务需求产生不必要的变更；其次，分片逻辑耦合在处理业务逻辑的程序代码中，修改分片逻辑或者修改业务逻辑都可能使另一部分代码因为不小心的改动而出现 Bug。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-slice-1.png" alt="database slice with hard code"></p>
<p>可以通过使用分布式关系数据库中间件解决这个问题，将数据的分片逻辑在中间件中完成，对应用程序透明，如MyCAT。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-slice-2.png" alt="database slice with MyCAT"></p>
<p>实践中，更常见的数据库分片算法是我们所熟悉的余数 Hash 算法，根据主键 ID 和服务器的数目进行取模计算，根据余数连接相对应的服务器。</p>
<h3 id="关系数据库的混合部署"><a href="#关系数据库的混合部署" class="headerlink" title="关系数据库的混合部署"></a>关系数据库的混合部署</h3><p>随着业务复杂以及数据存储和访问压力的增加，这时候可以选择业务分库。将不同业务相关的数据库表，部署在不同的服务器上，比如类目数据和用户数据相对关联关系不大，服务的应用也不一样，那么就可以将这两类数据库部署在不同的服务器上。而每一类数据库还可以继续选择使用主从复制，或者主主复制。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-mix-1.png" alt="database mix"></p>
<p>不同的业务数据库，其数据库存储的数据和访问压力也是不同的，比如用户数据库的数据量和访问量就可能是类目数据库的几十倍，甚至上百倍。那么这时候就可以针对用户数据库进行数据分片，而每个分片数据库还可以继续进行主从复制或者主主复制。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-mix-2.png" alt="database mix"></p>
<h3 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h3><p>NoSQL 数据库面临的挑战之一是数据一致性问题。</p>
<p>关于分布式存储系统有一个著名的 CAP 原理，CAP 原理说：一个提供数据服务的分布式系统无法同时满足数据一致性（Consistency）、可用性（Availability）和分区耐受性（Partition Tolerance）这三个条件。</p>
<p>一致性是说，每次读取的数据都应该是最近写入的数据或者返回一个错误，而不是过期数据，也就是说，数据是一致的。</p>
<p>可用性是说，每次请求都应该得到一个响应，而不是返回一个错误或者失去响应，不过这个响应不需要保证数据是最近写入的。也就是说，系统需要一直都是可以正常使用的，不会引起调用者的异常，但是并不保证响应的数据是最新的。</p>
<p>分区耐受性说，即使因为网络原因，网络分区失效的时候，部分服务器节点之间消息丢失或者延迟了，系统依然应该是可以操作的。</p>
<p>CAP 原理是说，当网络分区失效发生的时候，我们要么取消操作，保证数据就是一致的，但是系统却不可用；要么继续写入数据，但是数据的一致性就得不到保证了。</p>
<p>对于一个分布式系统而言，网络失效一定会发生，也就是说，分区耐受性是必须要保证的，而对于互联网应用来说，可用性也是需要保证的，分布式存储系统通常需要在一致性上做一些妥协和增强。</p>
<p>Apache Cassandra 解决数据一致性的方案是，在用户写入数据的时候，将一个数据写入集群中的三个服务器节点，等待至少两个节点响应写入成功。用户读取数据的时候，从三个节点尝试读取数据，至少等到两个节点返回数据，并根据返回数据的时间戳，选取最新版本的数据。这样，即使服务器中的数据不一致，但是最终用户还是能得到一个一致的数据，这种方案也被称为<strong>最终一致性</strong>。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-db-nosql.png" alt="nosql"></p>
<p><strong>NoSQL为什么比RMDB性能高？</strong></p>
<p>主要区别可用RDBMS的ACID和NoSQL的BASE概括。</p>
<h3 id="数据库集群扩容问题"><a href="#数据库集群扩容问题" class="headerlink" title="数据库集群扩容问题"></a>数据库集群扩容问题</h3><p>分布式架构的一个最大特点是可以动态伸缩，可以随着需求变化，动态增加或者减少服务器。对于支持分片的分布式关系数据库而言，比如我们使用 MYCAT 进行数据分片，那么随着数据量逐渐增大，如何增加服务器以存储更多的数据呢？如果增加一台服务器，如何调整数据库分片，使部分数据迁移到新的服务器上？如何保证整个迁移过程快速、安全？</p>
<p>1、创建远超实际节点数的分区，每个节点分配多个分区。当集群增加新节点时，该新节点从现有的节点中匀走几个分区，直到达到全局平衡。请求到来时 、由于分区总数不变，所以不会改变关键词到分区的映射关系，唯一调整的是分区与节点的对应关系。这种策略目前在ElasticSearch等系统使用<br>2、动态分区策略。当分区数据增长超过阈值（如Hbase 为10G），那么拆分为两个分区，每个承担一半的数据量，数据转移到其他节点。如Hbase借助了 HDFS 实现分区文件的传输<br>3、分区数与节点数成正比。当加入新的节点时，分区数增加。如Cassandra 采用了这样的方式。</p>
<h2 id="搜索引擎架构：如何瞬间完成海量数据检索？"><a href="#搜索引擎架构：如何瞬间完成海量数据检索？" class="headerlink" title="搜索引擎架构：如何瞬间完成海量数据检索？"></a>搜索引擎架构：如何瞬间完成海量数据检索？</h2><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>首先选择一些种子 URL，然后通过爬虫将这些 URL 对应的页面爬下来。其实，所谓的爬虫，就是发送 URL 请求，下载相应的 HTML 页面，然后将这些 Web 页面存储在自己的服务器上，并解析这些页面的 HTML 内容，当解析到网页里超链接 URL 的时候，再检查这个超链接是否已经在前面爬取过了，如果没有，就把这个超链接放到一个队列中，后面会请求这个 URL，得到对应的 HTML 页面并解析其包含的超链接……如此不断重复，就可以将全世界的 Web 页面存储到自己的服务器中。</p>
<p>爬虫系统架构如下：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-search-engine.png" alt="scrawler"></p>
<p>得到了全部网页以后，需要对每个网页进行编号，得到全部网页的文档集合。然后再解析每个页面，提取文档里的每个单词，如果是英文，那么每个单词都用空格分隔，比较容易；如果是中文，需要使用中文分词器才能提取到每个单词，比如“后端技术”，使用中文分词器得到的就是“后端”、“技术”两个词。</p>
<p>然后考察每个词在哪些文档中出现，比如“后端”在文档 2、4、5、7 中出现，“技术”在文档 1、2、4 中出现，这样我们就可以得到一个单词、文档矩阵：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-search-engine-2.png" alt="index"></p>
<p>把这个单词、文档矩阵按照单词→文档列表的方式组织起来，就是倒排索引了：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-search-engine-3.png" alt="index"></p>
<p>搜索单词的时候，我们可以将所有单词构成一个 Hash 表，根据搜索词直接查找 Hash 表，就可以得到单词了。</p>
<h3 id="搜索引擎结果排序"><a href="#搜索引擎结果排序" class="headerlink" title="搜索引擎结果排序"></a>搜索引擎结果排序</h3><p>PageRank 算法认为，如果一个网页里包含了某个网页的超链接，那么就表示该网页认可某个网页，或者说，该网页给某个网页投了一票。如下 A、B、C、D 四个网页，箭头指向的方向就是表示超链接的方向，B 的箭头指向 A，表示 B 网页包含 A 网页的超链接，也就是 B 网页给 A 网页投了一票。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-21-search-engine-4.png" alt="link"></p>
<p>开始的时候，所有网页都初始化权重值为 1，然后根据超链接关系计算新的权重。比如 B 页面包含了 A 和 D 两个页面的超链接，那么自己的权重 1 就被分成两个 1/2 分别投给 A 和 D。而 A 页面的超链接包含在 B、C、D 三个页面中，那么 A 页面新的权重值就是这个三个页面投给它的权重值之和：1/2 + 1/3 + 1 = 11/6。经过一轮 PageRank 计算后，每个页面都有了新的权重，然后基于这个新的权重再继续一轮计算，直到所有的网页权重稳定下来，就得到最终所有网页的权重，即最终的 PageRank 值。</p>
<p>PageRank 算法对于互联网网页排序效果很好，但是，对于那些用户生成内容（UGC）的网站而言，比如豆瓣、知乎，或者我们的InfoQ，如果想在这些网站内部进行搜索，PageRank 算法就没什么效果了。因为豆瓣的影评，知乎的回答，InfoQ 的技术文章之间很少通过超链接进行推荐。这种可以用点赞数排序。</p>
<p>还有一种是分词，计算词频进行排序。</p>
<h2 id="微服务架构：微服务究竟是灵丹还是毒药？"><a href="#微服务架构：微服务究竟是灵丹还是毒药？" class="headerlink" title="微服务架构：微服务究竟是灵丹还是毒药？"></a>微服务架构：微服务究竟是灵丹还是毒药？</h2><h3 id="单体架构的困难与挑战"><a href="#单体架构的困难与挑战" class="headerlink" title="单体架构的困难与挑战"></a>单体架构的困难与挑战</h3><ul>
<li>编译、部署困难</li>
<li>代码分支管理困难</li>
<li>数据库连接耗尽</li>
<li>新增业务困难</li>
<li>发布困难</li>
</ul>
<h3 id="微服务框架原理"><a href="#微服务框架原理" class="headerlink" title="微服务框架原理"></a>微服务框架原理</h3><p>SOA架构方案，即面向服务的体系架构：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-soa.png" alt="link"></p>
<p>Dubbo：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-dubbo.png" alt="link"></p>
<h3 id="微服务架构的落地实践"><a href="#微服务架构的落地实践" class="headerlink" title="微服务架构的落地实践"></a>微服务架构的落地实践</h3><p>事实微服务的关注点应遵循以下一个倒三角模型：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-micro-svc.jpg" alt="link"></p>
<h2 id="高性能架构：除了代码，还可以在哪些地方优化"><a href="#高性能架构：除了代码，还可以在哪些地方优化" class="headerlink" title="高性能架构：除了代码，还可以在哪些地方优化"></a>高性能架构：除了代码，还可以在哪些地方优化</h2><p>进行性能优化的前提：先知道系统当前的性能情况</p>
<h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p>响应时间：从发出请求开始到最后响应数据所需要的时间。</p>
<p>并发数：系统同时处理的请求数，体现的是系统的负载压力情况。</p>
<p>吞吐量：单位时间内系统处理请求的数量，体现的是系统的处理能力。</p>
<p>吞吐量、响应时间和并发数三者之间是有关联性的。并发数不变，响应时间越快，单位时间的吞吐量越高。</p>
<p>性能计数器：指的是服务器或者操作系统性能的一些指标数据，包括系统负载 System Load、对象和线程数、内存使用、CPU 使用、磁盘和网络 I/O 使用等指标，这些指标是系统监控的重要参数，反映系统负载和处理能力的一些关键指标，通常这些指标和性能是强相关的。这些指标很高，成为瓶颈，通常也预示着性能可能会出现问题。</p>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p><strong>性能测试</strong>是指以系统设计初期规划的性能指标为预期目标，对系统不断地施加压力，验证系统在资源可接受的范围内是否达到了性能的预期目标。这个过程中，随着并发数的增加，吞入量也在增加，但是响应时间变化不大。系统正常情况下的并发访问压力应该都在这个范围内。</p>
<p><strong>负载测试</strong>则是对系统不断地施加并发请求，增加系统的压力，直到系统的某项或多项指标达到安全临界值。这个过程中，随着并发数的增加，吞吐量只有小幅的增加，达到最大值后，吞吐量还会下降，而响应时间则会不断增加。</p>
<p><strong>压力测试</strong>是指在超过安全负载的情况下，增加并发请求数，对系统继续施加压力，直到系统崩溃，或者不再处理任何请求，此时的并发数就是系统的最大压力承受能力。这个过程中，吞吐量迅速下降，响应时间迅速增加，到了系统崩溃点，吞吐量为 0，响应时间无穷大。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-perf-benchmark.png" alt="link"></p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p><strong>用户体验优化：</strong>这是一种主观性优化，比如显示进度条。</p>
<p><strong>客观优化</strong>有下面几个：</p>
<ol>
<li>数据中心优化：就近部署，在多个区域部署自己的数据中心。</li>
<li>硬件优化：如优化网卡从1G到10G</li>
<li>操作系统优化：比如在某些Linux中，transparent huge page 这个参数是默认打开的，导致系统占用 CPU 过高。关闭这个参数后，系统 CPU 占用下降，整个计算时间也大幅缩短了</li>
<li>虚拟机优化：JVM优化</li>
<li>基础组件优化，如Web容器、数据库连接池、MVC框架等</li>
<li>架构优化<ul>
<li>缓存</li>
<li>消息队列</li>
<li>集群</li>
</ul>
</li>
<li>代码优化</li>
</ol>
<h2 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h2><p>高可用的度量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可用性&#x3D;(1-年度不可用时间&#x2F;年度总时间)*100%</span><br></pre></td></tr></table></figure>

<p>一般说来，两个 9 表示系统基本可用，年度不可用时间小于 88 小时；3 个 9 是较高可用，年度不可用时间小于 9 个小时；4 个 9 是具有自动恢复能力的高可用，年度不可用时间小于 53 分钟；5 个 9 指极高的可用性，年度不可用时间小于 5 分钟。我们熟悉的互联网产品的可用性大多是 4 个 9。淘宝、百度、微信，差不多都是这样。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-ha.png" alt="link"></p>
<h3 id="冗余备份"><a href="#冗余备份" class="headerlink" title="冗余备份"></a>冗余备份</h3><p>负载均衡还可以实现系统的高可用。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-rongyu.png" alt="link"></p>
<p>数据库主主复制，也是一种冗余备份。</p>
<h3 id="失败隔离"><a href="#失败隔离" class="headerlink" title="失败隔离"></a>失败隔离</h3><p>失败隔离的主要架构技术是消息队列。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-fail-isolation.png" alt="link"></p>
<p>消息队列还使得程序解耦，将程序的调用和依赖隔离开来。</p>
<h3 id="限流降级"><a href="#限流降级" class="headerlink" title="限流降级"></a>限流降级</h3><p>限流是指对进入系统的用户请求进行流量限制，如果访问量超过了系统的最大处理能力，就会丢弃一部分的用户请求，保证整个系统可用，保证大部分用户是可以访问系统的。</p>
<p>降级是保护系统的另一种手段。有一些系统功能是非核心的，但是它也给系统产生了非常大的压力，比如说在电商系统中有确认收货这个功能，即便我们不去确认收货，系统也会超时自动确认收货。</p>
<h3 id="异地多活"><a href="#异地多活" class="headerlink" title="异地多活"></a>异地多活</h3><p>将数据中心分布在多个不同地点的机房里，这些机房都可以对外提供服务，用户可以连接任何一个机房进行访问，这样每个机房都可以提供完整的系统服务，即使某一个机房不可使用，系统也不会宕机，依然保持可用。</p>
<p>异地多活的架构考虑的重点就是，用户请求如何分发到不同的机房去。这个主要可以在域名解析的时候完成，也就是用户进行域名解析的时候，会根据就近原则或者其他一些策略，完成用户请求的分发。另一个至关重要的技术点是，因为是多个机房都可以独立对外提供服务，所以也就意味着每个机房都要有完整的数据记录。用户在任何一个机房完成的数据操作，都必须同步传输给其他的机房，进行数据实时同步。</p>
<p>数据库实时同步最需要关注的就是数据冲突问题。同一条数据，同时在两个数据中心被修改了，该如何解决？为了解决这种数据冲突的问题，某些容易引起数据冲突的服务采用类似 MySQL 的主主模式，也就是说多个机房在某个时刻是有一个主机房的，某些请求只能到达主机房才能被处理，其他的机房不处理这一类请求，以此来避免关键数据的冲突。</p>
<h2 id="安全性架构：为什么说用户密码泄漏是程序员的锅"><a href="#安全性架构：为什么说用户密码泄漏是程序员的锅" class="headerlink" title="安全性架构：为什么说用户密码泄漏是程序员的锅"></a>安全性架构：为什么说用户密码泄漏是程序员的锅</h2><ul>
<li>数据加解密：单向散列加密</li>
<li>对称加密</li>
<li>非对称加密</li>
<li>xss</li>
<li>SQL注入</li>
</ul>
<h2 id="大数据架构"><a href="#大数据架构" class="headerlink" title="大数据架构"></a>大数据架构</h2><h3 id="分布式文件存储HDFS架构"><a href="#分布式文件存储HDFS架构" class="headerlink" title="分布式文件存储HDFS架构"></a>分布式文件存储HDFS架构</h3><p>HDFS 可以将数千台服务器组成一个统一的文件存储系统，其中 NameNode 服务器充当文件控制块的角色，进行文件元数据管理，即记录文件名、访问权限、数据存储地址等信息，而真正的文件数据则存储在 DataNode 服务器上。</p>
<p>DataNode 以块为单位存储数据，所有的块信息，比如块 ID、块所在的服务器 IP 地址等，都记录在 NameNode，而具体的块数据则存储在 DataNode 上。</p>
<p>HDFS 为了保证不会因为硬盘或者服务器损坏而导致文件损坏，还会对数据块进行复制，每个数据块都会存储在多台服务器上，甚至多个机架上。</p>
<h3 id="大数据计算MapReduce"><a href="#大数据计算MapReduce" class="headerlink" title="大数据计算MapReduce"></a>大数据计算MapReduce</h3><p>大数据处理的经典计算框架是 MapReduce。MapReduce 的核心思想是对数据进行分片计算。</p>
<p>MapReduce 将计算过程分成两个部分，一个是 map 过程，每个服务器上会启动多个 map 进程，map 优先读取本地数据进行计算，计算后输出一个<br><code>&lt;key, value&gt;</code> 集合。另一个是 reduce 过程，MapReduce 在每个服务器上都启动多个 reduce 进程，然后对所有 map 输出的 <code>&lt;key, value&gt;</code> 集合进行 shuffle 操作。所谓 shuffle 就是将相同的 key 发送到同一个 reduce 进程，在 reduce 中完成数据关联计算。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-word-count.png" alt="link"></p>
<p>word count: 假设原始数据有两个数据块，MapReduce 框架启动两个 map 进程进行处理，分别读入数据。map 函数对输入数据进行分词处理，然后针对每个单词输出 <code>&lt; 单词, 1&gt;</code> 这样的 <code>&lt;key, value&gt;</code> 结果。然后，MapReduce 框架进行 shuffle 操作，相同的 key 发送给同一个 reduce 进程，reduce 的输入就是 <code>&lt;key, value 列表 &gt;</code> 这样的结构，即相同 key 的 value 合并成一个 value 列表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span></span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                    )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line">      <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">        word.set(itr.nextToken());</span><br><span class="line">        context.write(word, one);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span></span></span><br><span class="line"><span class="class">       <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Context context</span></span></span><br><span class="line"><span class="function"><span class="params">                       )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">        sum += val.get();</span><br><span class="line">      &#125;</span><br><span class="line">      result.set(sum);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这些进程是如何在分布式的服务器集群上启动的呢？数据是如何流动，最终完成计算的呢？</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-map-reduce.png" alt="link"></p>
<p>MapReduce1 主要有 JobTracker 和 TaskTracker 两种进程角色，JobTracker 在 MapReduce 集群中只有一个，而 TaskTracker 则和 DataNode 一起，启动在集群的所有服务器上。</p>
<p>MapReduce 应用程序 JobClient 启动后，会向 JobTracker 提交作业，JobTracker 根据作业中输入文件路径分析，需要在哪些服务器上启动 map 进程，然后就向这些服务器上的 TaskTracker 发送任务命令。</p>
<p>TaskTracker 收到任务后，启动一个 TaskRunner 进程下载任务对应的程序，然后反射加载程序中的 map 函数，读取任务中分配的数据块，进行 map 计算。map 计算结束后，TaskTracker 会对 map 输出进行 shuffle 操作，然后 TaskRunner 加载 reduce 函数进行后续计算。HDFS 和 MapReduce 都是 Hadoop 的组成部分。</p>
<p>HDFS 和 MapReduce 都是 Hadoop 的组成部分。</p>
<h3 id="大数据仓库-Hive-架构"><a href="#大数据仓库-Hive-架构" class="headerlink" title="大数据仓库 Hive 架构"></a>大数据仓库 Hive 架构</h3><p>MapReduce写起来较为复杂，Hive是一个根据SQL生成MapReduce的工具：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pageid, age, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> pv_users <span class="keyword">GROUP</span> <span class="keyword">BY</span> pageid, age;</span><br></pre></td></tr></table></figure>

<p> Hive 要做的就是将 SQL 翻译成 MapReduce 程序代码，实际上，Hive 内置了很多 Operator，每个 Operator 完成一个特定的计算过程，Hive 将这些 Operator 构造成一个有向无环图 DAG，然后根据这些 Operator 之间是否存在 shuffle 将其封装到 map 或者 reduce 函数，就可以提交给 MapReduce 执行了。Operator 组成的 DAG 图示例如下，这是一个包含 where 查询条件的 SQL，where 查询条件对应一个 FilterOperator。<br><img src="https://liulixiang1988.github.io/images/2021-03-15-hive.jpg" alt="link"></p>
<p>Hive 整体架构如下，Hive 的表数据存储在 HDFS。表的结构，比如表名、字段名、字段之间的分隔符等存储在 Metastore。用户通过 Client 提交 SQL 到 Driver，Driver 请求 Compiler 将 SQL 编译成如上示例的 DAG 执行计划，然后交给 Hadoop 执行。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-hive-arch.jpg" alt="link"></p>
<h3 id="快速大数据计算Spark架构"><a href="#快速大数据计算Spark架构" class="headerlink" title="快速大数据计算Spark架构"></a>快速大数据计算Spark架构</h3><p>MapReduce 主要使用硬盘存储计算过程中的数据，这样虽然可靠性比较高，但是性能其实比较差。</p>
<p>Spark 在 MapReduce 基础上进行改进，主要使用内存进行中间计算数据存储，加快了计算执行时间，在某些情况下，性能可以提升上百倍。</p>
<p>Spark 的主要编程模型是 RDD，弹性数据集。在 RDD 上定义了许多常见的大数据计算函数，利用这些函数，可以用极少的代码完成较为复杂的大数据计算。前面举例的 WorkCount，如果用 Spark 编程，只需要三行代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> textFile = sc.textFile(<span class="string">"hdfs://..."</span>)</span><br><span class="line"><span class="keyword">val</span> counts = textFile.flatMap(line =&gt; line.split(<span class="string">" "</span>))</span><br><span class="line">                 .map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line">                 .reduceByKey(_ + _)</span><br><span class="line">counts.saveAsTextFile(<span class="string">"hdfs://..."</span>)</span><br></pre></td></tr></table></figure>

<p>首先，从 HDFS 读取数据，构建出一个 RDD textFile。然后，在这个 RDD 上执行三个操作：将输入数据的每一行文本用空格拆分成单词；将每个单词进行转换，word→(word, 1)，生成 <code>&lt;Key, Value&gt;</code> 的结构；相同的 Key 进行统计，统计方式是对 Value 求和。最后，将 RDD counts 写入到 HDFS，完成结果输出。</p>
<p>Spark DAG 示例如下：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-spark.jpg" alt="link"></p>
<p>如上所示，A、C 和 E 是从 HDFS 上加载的 RDD，A 经过 groupBy 分组统计转换函数后得到 RDD B，C 经过 map 转换函数后得到 RDD D，D 和 E 经过 union 合并转换函数后得到 RDD F，B 和 F 经过 join 连接转换函数后得到最终结果 RDD G。</p>
<h3 id="大数据流计算架构"><a href="#大数据流计算架构" class="headerlink" title="大数据流计算架构"></a>大数据流计算架构</h3><p>Spark 虽然比 MapReduce 快很多，但是大多数场景下，计算耗时依然是分钟级别的，这种计算一般被称为大数据批处理计算。</p>
<p>Spark Streaming 的架构原理是将实时流入的数据切分成小的一批一批的数据，然后将这些小的一批数据交给 Spark 执行。由于数据量比较小，Spark Streaming 又常驻系统，不需要重新启动，因此可以毫秒级完成计算，看起来像是实时计算一样。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-spark-stream.jpg" alt="link"></p>
<p>最近几年比较流行的大数据引擎 Flink 其架构原理其实和 Spark Streaming 很相似，随着数据源的不同，根据数据量和计算场景的要求，可以灵活适应流计算和批处理计算。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>大数据技术可以说是分布式技术的一个分支，都是面临大量的计算压力，采用分布式服务器集群的方案解决问题。差别是大数据技术要处理的数据具有关联性，所以需要有个中心服务器进行管理，NameNode、JobTracker 都是这样的中心服务器。</p>
<h2 id="AI与物联网架构：从智能引擎到物联网平台"><a href="#AI与物联网架构：从智能引擎到物联网平台" class="headerlink" title="AI与物联网架构：从智能引擎到物联网平台"></a>AI与物联网架构：从智能引擎到物联网平台</h2><h3 id="大数据平台架构"><a href="#大数据平台架构" class="headerlink" title="大数据平台架构"></a>大数据平台架构</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-15-big-data-arch.png" alt="link"></p>
<p>数据同步系统实际上承担的是传统数据仓库 ETL 的职责，即数据的抽取（Extract）、转换（Transform）、载入（Load）.</p>
<h3 id="智能推荐算法"><a href="#智能推荐算法" class="headerlink" title="智能推荐算法"></a>智能推荐算法</h3><p>基于人口统计的推荐:</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-recommend.png" alt="link"></p>
<p>基于商品属性的推荐:</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-recommend2.png" alt="link"></p>
<p>基于用户的协同过滤推荐:</p>
<p>用户 A 和用户 C 都喜欢商品 A 和商品 B，根据他们的喜好可以分为同类。然后用户 A 还喜欢商品 D，那么将商品 D 推荐给用户 C，他可能也会喜欢。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-recommend3.png" alt="link"></p>
<p>基于商品的协同过滤推荐</p>
<p>根据用户的喜好对商品进行分类，然后根据商品分类进行推荐。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-recommend4.png" alt="link"></p>
<h3 id="物联网大数据"><a href="#物联网大数据" class="headerlink" title="物联网大数据"></a>物联网大数据</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-15-aiot.png" alt="link"></p>
<h2 id="区块链技术架构：区块链到底能做什么？"><a href="#区块链技术架构：区块链到底能做什么？" class="headerlink" title="区块链技术架构：区块链到底能做什么？"></a>区块链技术架构：区块链到底能做什么？</h2><p><img src="https://liulixiang1988.github.io/images/2021-03-15-block-chain.png" alt="link"></p>
<p>联盟链</p>
<p>Hyperledger Fabric</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-15-block-chain2.jpeg" alt="link"></p>
]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title>技术人的思维修炼</title>
    <url>/2021/03/14/2021-03-14-%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%9A%84%E6%80%9D%E7%BB%B4%E4%BF%AE%E7%82%BC/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="德雷福斯模型"><a href="#德雷福斯模型" class="headerlink" title="德雷福斯模型"></a>德雷福斯模型</h2><p>德雷福斯是一个专业人员能力成长模型，这个模型认为所有专业人员都需要经历 5 个成长阶段，不管是医生还是律师，或者是软件开发，任何专业技能的从业者都需要经历新手、高级新手、胜任者、精通者、专家 5 个阶段。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-14-deleifusi.png" alt="link"></p>
<p>通常一个人进入专业的技能领域，即使在学校已经系统学习过这个专业的相关知识，但依然无法独立完成工作，必须在有经验的同事指导下，学习相关的技能。这里主要学习的是有关工作的规则和套路。比如用什么工具、什么框架，如何开发程序，如何开会、写周报，如何和同事合作，业务领域的名词术语是什么意思等等这些各种各样和工作有关的大小事情。这个阶段叫做<strong>新手</strong>阶段。</p>
<p>通常说来，一个人大约工作两三年后，就差不多掌握了工作的各种套路，可以摆脱新手阶段，独立完成一些基本的工作了。通过新手阶段的人，少部分会直接进入胜任者阶段，而大多数则进入<strong>高级新手</strong>阶段。</p>
<p>高级新手其实是新手的自然延续，他不需要别人指导工作，也不需要学习工作的规则和套路，因为高级新手已经在新手阶段掌握了这些套路，他可以熟练应用这些规则套路完成他的工作。但是高级新手的能力也仅限于此，他不明白这些规则是如何制定出来的，为什么使用这个框架开发而不是另一个框架，也不明白这个框架是如何开发出来的。</p>
<p>一个悲观的事实是，新手会自然进入高级新手阶段，而高级新手却无法自然进入其后的其他等级阶段。实际上，<strong>在各个专业领域中，超过半数的人终其一生都停留在高级新手阶段</strong>，也就是说，大多数人一生的工作就是基于其专业领域的规则在进行重复性的劳动。他们不了解这些规则背后的原理，也无法在面对新的问题时，开创出新的方法和规则。那些简历上十多年如一日使用相同的技术方案、开发类似软件项目的资深工程师大部分都是高级新手。</p>
<p>导致一个人终身停留在高级新手阶段的原因有很多，其中一个重要的原因是：<strong>高级新手不知道自己是高级新手</strong>。高级新手觉得自己在这个专业领域混得很不错，做事熟练，经验丰富。</p>
<p>事实上，这种熟练只是对既有规则的熟练，如果岁月静好，一切都循规蹈矩，也没什么问题。而一旦行业出现技术变革或者工作出现新情况，高级新手就会遇到巨大的工作困难。事实上，各行各业都存在大量的高级新手，只是软件开发领域的技术变革更加频繁，问题变化也更加快速，使高级新手问题更加突出。</p>
<p>少部分新手和高级新手会在工作中学习、领悟规则背后的原理，当需要解决的问题变化，或者行业出现技术革新时，能够尝试学习新技术，解决新问题，这样的人就进入<strong>胜任者</strong>阶段。胜任者工作的一个显著特点是，<strong>做事具有主动性</strong>。他们在遇到新问题时，会积极寻求新的解决方案去解决问题，而不是像高级新手那样，要么束手无策，要么还是用老办法解决新问题，使问题更加恶化。</p>
<p>胜任者能够解决新问题，但他们通常只会见招拆招，局限于解决问题本身，而缺乏反思精神以及全局思维：为什么会出现这样的问题？如何避免类似问题再发生？这个问题在更宏大的背景下处于什么位置？还有哪些类似的问题？</p>
<p>而拥有反思精神和全局思维，即使没有新问题也能够进行自我突破、寻求新的出路的人，就进入了<strong>精通者</strong>阶段。<strong>精通者需要通过主动学习进行提升，主动进行大量的阅读和培训</strong>，而不是仅仅依靠工作中的经验和实践。他们在完成一个工作后会反思：哪些地方可以改进，下次怎么做会更好？</p>
<p>精通者<strong>拥有了自我改进的能力。</strong></p>
<p>高级新手会把规则当做普适性的真理而使用，甚至引以为豪；而精通者则会明白所有的规则都只在特定的场景中才会有效，<strong>工作中最重要的不是规则，而是对场景的理解。</strong></p>
<p>最终，各行各业大约只有 1% 的人会进入<strong>专家</strong>阶段，专家把过往的经验都融汇贯通，然后形成一种直觉，他们直觉地知道事情应该怎么做，然后用<strong>最直接、最简单的方法把问题解决。</strong>专家通常也是他所在领域的权威，精通者和胜任者会学习、研究专家是如何解决问题的，然后把这种解决方案形成套路，成为行业做事的规则。</p>
<h2 id="如何在工作中成长"><a href="#如何在工作中成长" class="headerlink" title="如何在工作中成长"></a>如何在工作中成长</h2><h3 id="1-勇于承担责任"><a href="#1-勇于承担责任" class="headerlink" title="1. 勇于承担责任"></a>1. 勇于承担责任</h3><p>好的技术都是经过现实锤炼的，能够真正解决现实问题的，得到大多数人拥护的。所以自己去学习各种各样的新技术固然重要，但是更重要的是要将这些技术应用到实践中，去领悟技术背后的原理和思想。</p>
<p>而所有真正的领悟都是痛的领悟，只有你对自己工作的结果承担责任和后果，在出现问题或者可能出现问题的时候，倒逼自己思考技术的关键点，技术的缺陷与优势，才能真正地理解这项技术。</p>
<p>如果你只是去遵循别人的指令，按别人的规则去做事情，你永远不会知道事物的真相是什么。只有你对结果负责的时候，在压力之下，你才会看透事物的本质，才会抓住技术的核心和关键，才能够让你去学好技术，用好技术，在团队中承担核心的技术职责和产生自己的技术影响，并巩固自己的技术地位。</p>
<h3 id="2-在实践中保持技能"><a href="#2-在实践中保持技能" class="headerlink" title="2. 在实践中保持技能"></a>2. 在实践中保持技能</h3><p>有个说法叫做<strong>1 万小时定律</strong>，是说要想成为某个领域的专家，必须经过 1 万小时高强度的训练才可以，对软件开发这样更强调技术的领域来说，这一点尤其明显。我们必须要经过长时间的编程实践，从持续的编程实践中提升技术认知，才能够理解技术的精髓，感悟到技术的真谛。</p>
<p>但是 1 万小时的编程时间并不是说你重复的编程 1 万小时就能够自动提升成为专家的。真正对你有帮助的是不断超越自我，挑战自我的工作。也就是说，每一次在完成一个工作以后，下一次的工作都要比上一次的工作难度再增加一点点，不断地让自己去挑战更高难度的工作，从而拥有更高的技术能力和技术认知。</p>
<p>通俗说来，就是要摘那些跳起来才能够得着的苹果，不要摘那些伸手就能够得着的苹果。但是如果难度太高，注定要失败的任务，其实对技术提升也没有什么帮助。所以最好是选择那些跳起来能够摘得到的苹果，你要努力再进步一点点，才能够完成。通过这样持续的工作训练和挑战，在实践中持续地获得进步，你就可以不断从新手向专家这个方向前进。</p>
<h3 id="3-关注问题场景"><a href="#3-关注问题场景" class="headerlink" title="3. 关注问题场景"></a>3. 关注问题场景</h3><p>现实中，很多人觉得，学好某一个技术就大功告成了。但事实上是，即使你熟练掌握了强大的技术，但如果对问题不了解，对上下文缺乏感知，也不会真正地用好技术，也就无法去解决真正的问题。试图用自己擅长的技术去解决所有问题，就好像是拿着锤子去找钉子，敲敲打打大半天，才发现打的根本就不是一个钉子。</p>
<p>所谓的专家其实是善于根据问题场景发现解决方法的那个人，如果你关注场景，根据场景去寻找解决办法，也许你会发现解决问题的办法可能会非常简单，也许并不需要多么高深的工具和方法就能够解决，这时候你才能成为真正的专家。也就是在这个时候你会意识到方法、技术、工具这些都不是最复杂的，而真正复杂的是问题的场景，是如何真正地理解问题。</p>
<p>这个世界没有万能的方法，没有一劳永逸的银弹。每一种方法都有适用的场景，每一种技术都有优点和缺点，你必须要理解问题的关键细节、上下文场景，才能够选择出最合适的技术方案，真正地解决问题。</p>
<h2 id="软件技术的生态江湖与等级体系"><a href="#软件技术的生态江湖与等级体系" class="headerlink" title="软件技术的生态江湖与等级体系"></a>软件技术的生态江湖与等级体系</h2><p>我们按照每个人的影响力和技能水平，使用二八定律进行划分，得到一个如下的金字塔结构。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-03-14-jinzita.jpeg" alt="link"></p>
<p>80% 的工程师处在这个金字塔最底层，全世界绝大多数的代码出自这一层的工程师之手，但是他们却没有任何技术决策能力和技术影响力。用什么编程语言，用什么数据库，用什么编程框架，日志规范与代码规范如何制定，统统不由他们决定。大多数情况下，一个 10 人团队，有 8 个是这样的人，他们在金字塔的第零层，在这个体系中，他们没有自己的称呼。</p>
<p>这一层之上，剩下的 20% 技术人员中的 80%，也就是总数为 16% 的工程师，他们被称为<strong>团队影响者</strong>。他们是项目架构师、技术经理、技术骨干，他们撑起了项目的技术核心，在项目范围内决定着各种技术方向，核心的代码由他们开发，出了重要的问题也要找他们去解决。这样的人，在一个 10 人团队中，大约有一两人。</p>
<p>团队影响者之上，是<strong>公司影响者</strong>，大约占总数的 3.2%，他们决定整个公司的技术方向，用 Java 还是用 PHP？用 MySQL 还是 SQLServer？微服务用 Dubbo 还是 Spring Cloud？在一个有 300 名技术人员的公司，这样的人大约有 10 个。他们通常是公司的技术元老，在公司的技术团队中拥有较大知名度的技术牛人。</p>
<p>团队影响者和公司影响者又如何做出技术判断和决策呢？他们的技术从何而来？通常他们会关注国内最新的技术风向，参加各种技术峰会，阅读各种技术图书，通过这些信息获取知识并做出自己的技术判断和决策。而向他们传播这些最新技术动向的人，是<strong>全国影响者</strong>。这些人通常来自知名的 IT 互联网公司，当他们说，我们在淘宝、腾讯如何做开发的时候，全中国的开发者都静心倾听。</p>
<p>而这些全国影响者通常是通过关注国外的技术动向来获取信息，主要是一些美国的公司，比如 Google、Facebook、微软这些公司的工程师。当他们讲，我们在 Google 是如何做开发的时候，全世界的开发者静心倾听，想要了解下一次的技术潮流在哪里。他们是<strong>全球影响者</strong>。</p>
<p>在这个技术影响力体系里面，越往高，背景越重要。你是谁不重要，你代表谁更重要，人们关注的不是你叫什么名字，而是你来自哪个公司，这也是很多人想要加入 Google，阿里巴巴的原因。有趣的是，来自知名大厂的一些工程师常常忘记了这一点，觉得自己得到关注和掌声是来自自己的成就和能力，结果导致对自己的职业发展产生重大误判。</p>
<p>技术等级体系直到这里，关注的都是技术影响力，通过影响力决定使用何种技术进行软件开发。那我们常用的这些软件技术又从何而来？事实上，正是这些知名软件的开发者，推动了一次又一次软件编程的革命，领导了一次又一次技术进步，带领软件技术行业不断前进。</p>
<p>他们有的开发了一些关键性的技术产品，比如一些广为使用的 JSON 解析器、单元测试框架、分布式缓存系统，他们是一些<strong>关键开创者</strong>。</p>
<p>还有一些则开创了一个领域，比如 Spring，构建了一个完整的 Java web 开发技术栈，这些软件的核心开发者是<strong>领域创建者</strong>。</p>
<p>而在这个金字塔的最顶层，则是那些开创了一个行业的<strong>行业开创者</strong>，Hadoop 成就了大数据行业，Linux 引领了操作系统行业，Linus、Doug Cutting 这些人就是软件技术领域的王者。</p>
<h2 id="技术进阶之捷径"><a href="#技术进阶之捷径" class="headerlink" title="技术进阶之捷径"></a>技术进阶之捷径</h2><p>直接去做一个全国影响者，在工作之外，通过持续地维护一个技术博客，或者技术公众号，不断地发表一些高质量的原创技术文章，在某个技术领域打造自己的技术影响力。并通过在一些有影响力的技术峰会上做主题演讲，以及出版一些高质量并畅销的技术图书，持续扩大自己的影响力。</p>
<p>应该说，每一次大的技术浪潮，都会使一批默默无闻的技术人员快速获得全国性的技术影响力，在分布式技术、移动互联网、大数据、AI、区块链等领域，莫不如此。</p>
<p>因此，通过这种方式获得全国性的技术影响力，一方面要持续努力，不断学习、实践，持续获得知识，并把这些知识有效地传播出去。另一方面，还要有眼光，你在一个已经非常成熟的技术上耕耘，再努力也很难获得足够的关注；而在那些尚不成熟的技术上努力，你又如何知道将来这个技术会成功？这就需要有足够的技术敏感性，进行足够多的技术尝试，做出有战略眼光的技术决策。</p>
<p>所以，所谓的捷径只是路径上的捷径，要想在这条捷径上获得成功，需要付出更多的努力和聪明才智。</p>
<p>事实上，如果你足够努力并有足够的天分，你甚至可以超越影响者阶层，直接进入开创者阶层，比捷径更加捷径。</p>
<p>比捷径更捷径的路不是没有，只是更加艰难，不只需要你个人的努力，还要看历史的进程。</p>
<p>所以，从根本上说，技术进阶根本没有捷径，所谓的捷径，其实是你经历了各种努力和挫折后，最后化蛹成蝶的惊鸿一瞥。</p>
<p>为了最后众人瞩目的成功，你依然需要经历金字塔每一层的考验。</p>
<p>在工作中，技术实力固然重要，但是技术实力要转化成公司需要的成果和价值，技术影响力非常重要，通过技术影响力引导团队、部门、公司按照你的技术价值观去构建产品架构和技术发展路径，凝聚公司的技术力量，让你自己和公司向着更高的技术等级前进。</p>
<p>关于如何构建自己的技术影响力，有两点建议：</p>
<ol>
<li>承担责任：重大的技术决策可能会带来重大的技术风险，要有勇气承担风险，并因此赢得他人的尊重。</li>
<li>帮助他人：团队成员遇到技术问题的时候，即使不是自己的工作范围，也可以帮助他们去解决问题，一方面建立自己的技术影响力，另一方面，通过解决问题获得更快的技术成长和领悟。</li>
</ol>
<p>当然，技术影响力的前提是真正的技术实力，没有实力的影响力就是空中楼阁，不堪一击。</p>
<h2 id="技术落地之道：你真的知道自己要解决的问题是什么吗？"><a href="#技术落地之道：你真的知道自己要解决的问题是什么吗？" class="headerlink" title="技术落地之道：你真的知道自己要解决的问题是什么吗？"></a>技术落地之道：你真的知道自己要解决的问题是什么吗？</h2><ol>
<li>不要把解决方案当作问题的定义，而忽略了真正要解决的问题是什么</li>
<li>你不需要去解决别人的问题，你只需要提醒他问题的存在</li>
<li>鱼是最后一个看到水的，身处问题之中的人往往并不觉得有问题。身处问题之中的人常常并不能感知到问题的存在，正如身在水中的鱼儿看不到水一样。太多的问题被人们的适应能力忽略掉了，直到有人解决了这些问题，身处其中的人才恍然，原来过去的方式都是有问题的。</li>
</ol>
<p>关于问题的定义有个公式：<strong>问题 = 期望 - 体验</strong>。</p>
<p>青青翠竹尽是法身,郁郁黄花无非般若。</p>
<h2 id="技术沟通之道：如何解决问题？"><a href="#技术沟通之道：如何解决问题？" class="headerlink" title="技术沟通之道：如何解决问题？"></a>技术沟通之道：如何解决问题？</h2><p><strong>如果某人能够解决问题，而他自己却感受不到问题，那么就让他感受一下</strong></p>
<p><strong>用人的最高境界是用上司。</strong></p>
<p><strong>直言有讳</strong>：要批评而不要责难，要对事而不要对人。以赞成的方式表示反对。</p>
<p><strong>如果你想解决一个大家都不关注的问题，那么试试让问题变得更糟</strong></p>
<p><strong>如果你不填老师想要的答案，你就是个傻瓜</strong></p>
<h2 id="技术管理之道：你真的要转管理吗？"><a href="#技术管理之道：你真的要转管理吗？" class="headerlink" title="技术管理之道：你真的要转管理吗？"></a>技术管理之道：你真的要转管理吗？</h2><h3 id="彼得定律"><a href="#彼得定律" class="headerlink" title="彼得定律"></a>彼得定律</h3><p>彼得在 20 世纪 70 年代，研究了美国数千个组织，包括政府部门、学校、企业等各种类型的组织后，发现，在一个成熟有效的组织中，当一个员工在其岗位能够出色完成工作，就会得到晋升，被提拔到更高一级职位。如果在这个职位，他能够继续出色完成工作，就会继续得到晋升，直到他晋升到某个职位以后，无法出色完成工作为止。</p>
<p>这是职场晋升的一般规则，看起来似乎也没什么，但是彼得在对这些得到晋升的人进行各种观察以后，得到一个结论：<strong>在一个层级组织中，每个员工都会趋向于晋升到他所不能胜任的职位</strong>。这就是彼得定律，事实上，我们根据晋升的一般规则，也能推导出这个定律。利用这个定律做进一步的推导，还能得到一个彼得定律的推论：<strong>一个成熟的组织中，所有的职位都被不能够胜任它的人承担着</strong>。这个推论也很好理解，每个人都会晋升到他不能胜任的职位，那么稳定下来以后，所有的职位都被不能胜任的人承担。不得不说这个结论实在是让人有点吃惊，但是却很好地解释了组织中的各种奇怪现象。</p>
<p>彼得进一步对这些不能胜任自己职位的人进行观察，发现当一个人位于他不能胜任的职位上时，他必须投入全部的精力才能有效完成工作，这个职位也被称作这个人的<strong>彼得高地</strong>。一个处于彼得高地的人，精疲力尽于他手头的工作，就无法再进行更进一步的思考和学习，他的个人能力提升和职业进步都将止步于此。</p>
<p>所以，一个人在其职业生涯中能够晋升的最高职位，能够在专业技能上进化的最高阶段，依赖于他的专业能力和综合素养，依赖于他拥有的持续学习和专业训练的条件与环境。和他晋升的速度无关，有时候也许恰恰相反。</p>
<p>对公司而言，真正有价值的是你为公司解决了多少问题，而不是完成了多少工作，工作本身没有意义，解决问题才有意义。对于你自己而言，真正有价值的不是你获得了多快的晋升，多高的加薪，而是你获得了多少持续高强度训练的机会。而这两者，本质上是统一的。</p>
<p>所以，对自己未来有更多期待，更有进取心的工程师们，应该将精力更多放在发现企业中的各种问题并致力于去解决问题，在这个过程中，你将同步收获职场晋升和个人能力提升。</p>
<h3 id="用目标驱动"><a href="#用目标驱动" class="headerlink" title="用目标驱动"></a>用目标驱动</h3><p>在技术管理领域，常见的管理方式有两种，一种是问题驱动型管理，一种是流程驱动型管理。问题驱动型管理着眼于问题，每天关注最新的问题是什么，然后解决问题。流程驱动型管理着眼于流程，关注事情的进展是否符合流程规范，是否在有序的规章制度下行事，看起来像监工。</p>
<p>老实说，这两种都不是高效的管理方法。对于技术管理而言，更高效的管理方式是目标型管理。</p>
<p>目标驱动的管理者关注的是目标，公司的目标是什么？部门的目标是什么？团队的目标是什么？我的目标是什么？我和我的团队做这些事情的价值和意义是什么？不断问自己：我如何做才能为公司，为客户创造价值？</p>
<p>目标驱动的管理者并不特别关注问题，他更关注解决方案。当系统出现故障的时候，他不会关注是谁导致的 bug，他更关注谁可以解决这个 bug。当项目进展缓慢，他并不关注是谁导致了拖延，他更关注我们如何做才能赶上进度。他不问问题为什么出现，因为他知道，所有的问题最后都是人的问题，而纠结于人的问题，只能导致人和人的扯皮。</p>
<p>目标驱动的管理者其实并不是不关注问题，他只是不用问题进行管理，不让团队纠结于问题之中，而是去着眼于未来和解决方案本身。管理者自身其实对问题非常清楚，但是他把问题转化为目标，引导团队前行。</p>
<p>OKR 这个词最近两年在互联网企业很风靡，OKR 就是 Object 目标与 Key Result 关键结果。通过对团队和个人制定有挑战性的目标和可量化的结果标准进行管理。可以说是目标驱动管理的一种落地实践方案。</p>
<p>通常的做法是在一个 OKR 周期开始的时候，每个团队和个人制定自己的OKR：我目标是什么，达成目标后产生的关键结果是什么。所有的 OKR 都需要公开，通过阅读自己合作伙伴和上级部门的 OKR，了解自己的目标在组织中的作用，自己工作的结果对组织的价值，从而了解自己在组织中的位置，使自己的工作成为组织战略的一部分。</p>
<p>在工作过程中，根据目标不断调整自己的工作方式，期间需要定期进行 review：到目前为止，我产出的成果有哪些，距离我们的目标是更近了还是更远了，我们还需要做哪些工作才能达成我们的结果。</p>
<p>需要注意的是，OKR 并不是用来考核的，不应该以目标是否达成作为考核的依据，否则每个人都倾向给自己制定最简单的结果和目标。OKR 是一种管理手段，通过对目标的制定和对结果的审核，将团队和员工的奋斗目标和公司的战略目标统一起来，使每个人都能理解自己工作的目标是什么，在整个公司战略中的地位是什么，使个人更加成为公司整体的一部分。</p>
<p>管理学作为一个学科已经出现了上百年的时间，它有自己的专业工具和方法，有自己的客观规律。仅仅技术做得好并不能保证可以好管理，想转管理的同学应该专门学习一下管理学的基础知识，而不是仅仅看了两篇管理文章，觉得自己技术不错还擅长沟通就转管理了。</p>
<h2 id="工作中的交往和沟通，都有哪些小技巧呢？"><a href="#工作中的交往和沟通，都有哪些小技巧呢？" class="headerlink" title="工作中的交往和沟通，都有哪些小技巧呢？"></a>工作中的交往和沟通，都有哪些小技巧呢？</h2><h3 id="保持交际和赞美"><a href="#保持交际和赞美" class="headerlink" title="保持交际和赞美"></a>保持交际和赞美</h3><p>很多程序员不喜欢交际，觉得浪费时间。事实上，保持适当的交际，可能会帮你节约很多时间。一方面，良好的交际关系可以营造一种更愉快的工作氛围，自己和其他同事可以保持更好的工作状态；另一方面，处理某些问题的时候，比如，需要指出某个人工作失误的时候，良好的关系可以缓冲这类指责带来的负面影响。相反，如果你们平时见面的时候就形同路人，这个时候，他更有可能认为你是对他个人的否定，而不是对工作本身的意见。</p>
<p>而且，保持适当的交际并不需要花费多少时间，仅仅是简单的寒暄，聊聊天气，就可以拉近两个人的距离。如果寒暄的时候，对方正好有个不错的机会想要找人合作，也许还会给你带来更加巨大的收益。</p>
<p>除了简单的寒暄，赞美是一种更加高效的交际方法。曾经有人在网上调查，有什么技能是可以很快学到而终身受用，出乎意料地，排在最前面的答案不是驾驶、游泳、烹饪这些很硬的技能，而是一项很软的技能：赞美他人。</p>
<p>赞美不是奉承，不是泛泛地说一些：你好棒，你真厉害。<strong>赞美是对对方做得好的事情，明确表达你的称赞。</strong>称赞的是对方的行为，比如对小孩子说：你摔倒了没有哭，而且自己爬起来，好棒。对同事说：谢谢你昨天晚上加班，我们今天可以按期发布项目。对方通过你的话能感受到真诚，得到正向的激励，而不是敷衍和世故。</p>
<p>就我们目前的环境而言，赞美太少了而不是太多了，尝试多去赞美别人，你会得到意想不到的收获。此外，赞美和批评并不冲突，你可以对一个人既赞美又批评，只要你明确指出赞美和批评的具体事情，对方就可以更加明白你的标准和边界，后面的合作也会更加的顺利。</p>
<h3 id="平衡力量和温暖"><a href="#平衡力量和温暖" class="headerlink" title="平衡力量和温暖"></a>平衡力量和温暖</h3><p>职场中什么样的领导最受欢迎，答案是，同时拥有力量和温暖的人。所谓的力量是指能够达成目标的能力，包括技术能力、整合资源的能力、决策力、意志力等各种能力，通过这些能力，能够完成工作目标和任务。人们愿意和有力量的人合作，追随有力量的人，因为这样获得成功的可能性就越大。</p>
<p>而温暖是指拥有让他人产生熟悉感和归属感的能力。表明上看，这种能力是一种共情能力，可以理解他人的喜怒哀乐，进而产生熟悉和归属的感觉。事实上，这是一种构建共同的目标和价值观的能力。</p>
<p>每个人的喜乐并不相同，如果是被动地和其他人共情，是无法深度地整合一个团队的所有人的。而通过构建共同的目标和价值观，让大家产生归属感，进而营造出一种温暖的团队氛围。</p>
<p>如果一个人光有力量而没有温暖，那么和他合作的人可能会嫉妒他，或者对他感到恐惧。而一个人光有温暖没有力量，大家只会觉得他很萌。同时拥有力量和温暖的人，会让他人感到钦佩。而既没有力量有没有温暖的人，大家会蔑视他。</p>
<p>力量和温暖是既一种内在的属性，也可以通过一些外在的行为表现。一个占据更大空间的人会给人力量感，所以不要含胸驼背，把自己缩在一起；另外，主动碰触别人和适当认错也是一种力量的体现。表达对他人的理解以及分享一些相同的经历则会传递温暖的感觉。</p>
<h3 id="学会聆听和提问"><a href="#学会聆听和提问" class="headerlink" title="学会聆听和提问"></a>学会聆听和提问</h3><p>在工作沟通的过程中，有时候直接提出自己的观点或者方案，并不能得到其他人的赞同和支持，因为其他人可能并不了解你的问题和场景，没有思考过你的问题，所以对你的观点和方案不置可否，不积极参与。这种情况下，可以通过一些提问的方式，将对方拉到你的思考上下文中，让对方通过自己的思考得出你想要表达的观点和方案，这种情况下再去推动事情的发展就容易多了。</p>
<p>如果你是一个管理者，你团队中某个员工工作不认真，工作效率低，是谁的问题？是公司的问题吗？是你的问题吗？是员工自己的问题吗？如果是员工自己的问题，你该如何提醒他问题的存在，并进而帮助他提高工作效率？</p>
<p>这个问题其实并不简单，员工工作态度不好、工作效率低，可能有企业文化的问题，可能有领导风格的问题（也就是你的问题），可能有项目阶段性挫折的问题。假设这里你的判断是员工自己的问题，因为团队其他人都没有态度问题，那么你该如何帮助他纠正问题？</p>
<p>直接指出问题也许不是一个好主意，因为可能会引发员工的对立情绪：你对我有意见。你不妨可以在和员工交流的时候问一些问题，以提醒他问题的存在：如果你给自己近期的工作成果打分，你会打几分？你觉得其他同事对你近期的工作成果打分，会打几分？如果你自己是用户或者老板，你是否对自己的产出满意？</p>
<p>通常情况下，如果真的是员工自己的问题，那么通过回答这几个问题，他会意识到问题的存在，并想要主动去改变状况。这要比你直接指出他的问题或者批评他效果要更好一些。</p>
<p>如果他已经意识到问题，那么你还可以更进一步提问：你希望我做些什么，可以帮助到你？你下一步有什么打算，可以改进目前的状况，让你自己基本满意？你觉得完成这些改进大概需要多长时间？两周？好，那么我们两周以后再聊一次。</p>
<p>彼得·德鲁克曾经说过，最好的管理学书籍是小说。因为管理就是将每个人的主观能动性发挥出来，为组织创造价值，但是人性是复杂的，任何刻板的管理教条都会遇到人性的阻力，进而演化成组织前进的阻碍。而洞悉人性，善于利用人性的特点，把相关各方的利益统一起来，事情会自然前进。</p>
<p>有些同学纠结将来走管理路线还是技术路线，其实这两者之间的鸿沟并没有想象得那么大，不管是做好技术还是做好管理，都需要有很强的社会实践能力，都需要理解人性，利用人性，特别是理解和利用好自己的人性。</p>
]]></content>
      <categories>
        <category>编程随想</category>
      </categories>
      <tags>
        <tag>编程随想</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS学习笔记</title>
    <url>/2021/05/15/2021-05-15-HDFS/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-HDFS-概述及设计目标"><a href="#1-HDFS-概述及设计目标" class="headerlink" title="1. HDFS 概述及设计目标"></a>1. HDFS 概述及设计目标</h2><p>Hadoop设计目标：</p>
<ul>
<li>非常巨大的分布式文件系统</li>
<li>运行在普通廉价的硬件上</li>
<li>易扩展、为用户提供性能不错的文件存储服务</li>
</ul>
<p>具体见：<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Assumptions_and_Goals" target="_blank" rel="noopener">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Assumptions_and_Goals</a></p>
<h2 id="2-HDFS架构"><a href="#2-HDFS架构" class="headerlink" title="2. HDFS架构"></a>2. HDFS架构</h2><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html</a></p>
<p><img src="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/images/hdfsarchitecture.png" alt="img"></p>
<p>HDFS采用1个Master(NameNode/NN) 带N个Slaves(DataNode/DN)架构。同时YARN、HBase也是一个Master带多个Slave。</p>
<p>1个文件会被拆分成多个Block。(BlockSize默认是128M)。比如一个130M的文件会被分成128M和2M的Block。</p>
<p>NameNode(NN):</p>
<ol>
<li>响应客户端请求</li>
<li>负责元数据(文件名、副本系数、Block存放的DN)的管理</li>
</ol>
<p>DataNode(DN):</p>
<ol>
<li>储存用户的文件对应的数据块(Block)</li>
<li>要定期向NN发送心跳信息，汇报本身及其所有的block信息，健康状况</li>
</ol>
<p>A typical deployment has a dedicated machine that runs only the NameNode software. Each of the other machines in the cluster runs one instance of the DataNode software. The architecture does not preclude running multiple DataNodes on the same machine but in a real deployment that is rarely the case.</p>
<h2 id="3-HDFS副本机制"><a href="#3-HDFS副本机制" class="headerlink" title="3. HDFS副本机制"></a>3. HDFS副本机制</h2><p>All blocks in a file except the last block are the same size.</p>
<p>An application can specify the number of replicas of a file. The replication factor can be specified at file creation time and can be changed later. Files in HDFS are write-once (except for appends and truncates) and have strictly one writer at any time.</p>
<p><img src="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/images/hdfsdatanodes.png" alt="hdfs"></p>
<p>副本存放策略：副本放到不同机架(Rack)的不同节点上。</p>
<h2 id="4-HDFS环境搭建"><a href="#4-HDFS环境搭建" class="headerlink" title="4. HDFS环境搭建"></a>4. HDFS环境搭建</h2><h3 id="4-1-Hadoop伪分布式安装-Pseudo-Distributed-Operation"><a href="#4-1-Hadoop伪分布式安装-Pseudo-Distributed-Operation" class="headerlink" title="4.1 Hadoop伪分布式安装(Pseudo-Distributed Operation)"></a>4.1 Hadoop伪分布式安装(Pseudo-Distributed Operation)</h3><p>环境准备：</p>
<ol>
<li>JDK安装，定义<code>JAVA_HOME</code>与<code>PATH=$JAVA_HOME/bin:$PATH</code></li>
<li>安装SSH：<ol>
<li><code>sudo yum install ssh</code></li>
<li>配置免密登录（给DataNode与NN）<code>ssh-keygen -t rsa</code>, 生成了<code>.ssh</code>文件夹</li>
<li><code>cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</code></li>
<li>测试连接：<ol>
<li><code>ssh localhost</code>或<code>ssh hadoop000</code>(hadoop000是hostname)</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>下载解压Hadoop，修改配置文件:</p>
<ol>
<li>下载CDH: <code>hadoop-2.6.0-cdh5.7.0.tar.gz</code></li>
<li><code>tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz -C /opt/</code></li>
<li><code>cd hadoop-2.6.0-cdh5.7.0/</code></li>
<li>查看目录：<ol>
<li>bin：主要是客户端访问的脚本（包含windows下的访问脚本）</li>
<li>etc: 配置文件，非常重要</li>
<li>sbin: 启动集群</li>
<li>share/hadoop/：样例包</li>
</ol>
</li>
<li>修改<code>etc/hadoop-env.sh</code>，设置<code>JAVA_HOME</code></li>
</ol>
<p>etc/hadoop/core-site.xml（配置HDFS默认文件地址）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件路径HDFS，端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hostname:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>etc/hadoop/hdfs-site.xml（设置副本系数）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>etc/hadoop/slaves(配置master node对应的slave node hostname)</p>
<p>配置后启动：</p>
<ol>
<li>格式化文件系统(仅第一次执行）：<code>bin/hdfs(or hadoop) namenode -format</code>(客户端操作)</li>
<li>启动NameNode进程与DataNode进程：<code>sbin/start-dfs.sh</code> Hadoop daemon log会被写入<code>$HADOOP_LOG_DIR</code>文件夹，默认为<code>$HADOOP_HOME/logs</code></li>
<li>验证是否启动成功<ol>
<li><code>jps</code>，看到<code>DataNode</code>, <code>NameNode</code>与<code>SecondaryNameNode</code></li>
<li><a href="http://hadoop000:50070" target="_blank" rel="noopener">http://hadoop000:50070</a></li>
</ol>
</li>
</ol>
<p>停止hdfs: <code>sbin/stop-dfs.sh</code></p>
<h2 id="5-HDFS-Shell"><a href="#5-HDFS-Shell" class="headerlink" title="5. HDFS Shell"></a>5. HDFS Shell</h2><p>为了方便使用，配置环境变量：<code>HADOOP_HOME</code>, <code>PATH=$HADOOP_HOME/bin:$PATH</code></p>
<p>hdfs是客户端。</p>
<p><code>hadoop dfs</code> </p>
<p><strong>ls</strong>: <code>hadoop fs -ls</code>, <code>hadoop fs -ls -R</code></p>
<p><strong>mkdir</strong>: <code>hadoop fs -mkdir -p /a/test</code></p>
<p><strong>put</strong>: <code>hadoop fs -put hello.txt /</code></p>
<p><strong>get</strong>: <code>hadoop fs -get /a/test/a.txt</code></p>
<p><strong>rm</strong>: <code>hadoop fs -rm /a/test</code></p>
<p><strong>text</strong>: 查看，<code>hadoop fs -text /hello.txt</code></p>
<p>也可以在浏览器菜单中<code>utilities</code>中查看文件</p>
<h2 id="6-Java-API操作HDFS"><a href="#6-Java-API操作HDFS" class="headerlink" title="6. Java API操作HDFS"></a>6. Java API操作HDFS</h2><p><a href="https://github.com/liulixiang1988/javademo/blob/master/hadoop001/src/test/java/io/liulixiang/hadoop/hdfs/HDFSApp.java" target="_blank" rel="noopener">https://github.com/liulixiang1988/javademo/blob/master/hadoop001/src/test/java/io/liulixiang/hadoop/hdfs/HDFSApp.java</a></p>
<h2 id="7-HDFS文件读写流程"><a href="#7-HDFS文件读写流程" class="headerlink" title="7. HDFS文件读写流程"></a>7. HDFS文件读写流程</h2><p>通过漫画来学习HDFS文件的读写流程，PDF版本可以通过<a href="https://liulixiang1988.github.io/images/Hdfs-cartoon.pdf">这里</a>下载</p>
<p>三个角色：</p>
<ol>
<li>客户端：发起读写请求</li>
<li>NameNode: 只有1个，负责协调(coordinate)</li>
<li>DataNode：存储数据，有多个</li>
</ol>
<p><img src="https://liulixiang1988.github.io/images/2021-05-18-hdfs-1.png" alt="1"></p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-18-hdfs-2.png" alt="2"></p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-18-hdfs-3.png" alt="3"></p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-18-hdfs-4.png" alt="4"></p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-18-hdfs-5.png" alt="5"></p>
<h2 id="8-HDFS优缺点"><a href="#8-HDFS优缺点" class="headerlink" title="8. HDFS优缺点"></a>8. HDFS优缺点</h2><p>优点：</p>
<ol>
<li>数据冗余、硬件容错</li>
<li>适合存储大文件</li>
<li>可构建在廉价机器上</li>
</ol>
<p>缺点：</p>
<ol>
<li>不适合低延迟数据访问：数据比较大</li>
<li>不适合小文件数据存储：占用太多NameNode中内存存储元数据，对NameNode压力也越大</li>
</ol>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计文档示例模板</title>
    <url>/2021/03/14/2021-03-14-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>[toc]</p>
<p>对于规模不太大的软件系统，我们可以将概要设计文档和详细设计文档合并成一个设计文档。这一篇文章中，我会展现一个设计文档示例模板，你可以参考这个模板编写你的设计文档。</p>
<p>文档开头是设计概述，简单描述业务场景要解决的核心问题领域是什么。至于业务场景，应该在专门的需求文档中描述，但是在设计文档中，必须要再简单描述一下，以保证设计文档的完整性，这样，即使脱离需求文档，阅读者也能理解主要的设计。</p>
<p>此外，在设计概述中，还需要描述设计的非功能约束，比如关于性能、可用性、维护性、安全性，甚至开发和部署成本方面的设计目标。</p>
<p>然后就是具体的设计了，第一张设计图应该是部署图，通过部署图描述系统整个物理模型蓝图，包括未来系统长什么样。</p>
<p>如果系统中包含几个子系统，那么还需要描述子系统间的关系，可以通过子系统序列图，子系统活动图进行描述。</p>
<p>子系统内部的最顶层设计就是组件图，描述子系统由哪些组件组成，不同场景中，组件之间的调用序列图是什么样的。</p>
<p>每个组件内部，需要用类图进行建模描述，对于不同场景，用时序图描述类之间的动态调用关系，对于有复杂状态的类，用状态图描述其状态转换。</p>
<p>具体示例模板如下：</p>
<h2 id="1-设计概述"><a href="#1-设计概述" class="headerlink" title="1 设计概述"></a>1 设计概述</h2><p>……系统是一个……的系统，是公司……战略的核心系统，承担着公司……的目标任务。</p>
<h3 id="1-1-功能概述"><a href="#1-1-功能概述" class="headerlink" title="1.1 功能概述"></a>1.1 功能概述</h3><p>系统主要功能包括……，使用者包括……。</p>
<h3 id="1-2-非功能约束"><a href="#1-2-非功能约束" class="headerlink" title="1.2 非功能约束"></a>1.2 非功能约束</h3><p>……系统未来预计一年用户量达到……，日订单量达到……，日 PV 达到……，图片数量达到 ……。</p>
<ol>
<li>查询性能目标：平均响应时间 &lt;300ms，95% 响应时间 &lt;500ms，单机 TPS&gt;100；</li>
<li>下单性能目标：平均响应时间 &lt;800ms，95% 响应时间 &lt;1000ms，单机 TPS&gt;30；</li>
<li>……性能目标：平均响应时间 &lt;800ms，95% 响应时间 &lt;1000ms，单机 TPS&gt;30；</li>
<li>系统核心功能可用性目标：&gt;99.97%；</li>
<li>系统安全性目标：系统可拦截…… 、……、……攻击，密码数据散列加密，客户端数据 HTTPS 加密，外部系统间通信对称加密；</li>
<li>数据持久化目标：&gt;99.99999%。</li>
</ol>
<h2 id="2-系统部署图与整体设计"><a href="#2-系统部署图与整体设计" class="headerlink" title="2 系统部署图与整体设计"></a>2 系统部署图与整体设计</h2><p>系统上线时预计部署……台物理机，……个子系统，和公司……系统交互，和外部第三方……个系统交互。</p>
<h3 id="2-1-系统部署图"><a href="#2-1-系统部署图" class="headerlink" title="2.1 系统部署图"></a>2.1 系统部署图</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-14-deploy.png" alt="link"></p>
<p>子系统 1 的功能职责为……，部署……台服务器，依赖……和……子系统，实现 ……功能。</p>
<p>子系统 2 参照子系统 1 来写。</p>
<h3 id="2-2-下单场景子系统序列图"><a href="#2-2-下单场景子系统序列图" class="headerlink" title="2.2 下单场景子系统序列图"></a>2.2 下单场景子系统序列图</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-14-seq.png" alt="link"></p>
<ol>
<li>下单时，子系统先发送……消息到子系统 3，子系统 3 需要执行……完成……处理，然后发送……消息到财务系统，消息中包含……数据。</li>
<li>收到……的处理结果……后，子系统 1 发送……消息到……子系统 2……。</li>
</ol>
<h3 id="2-3-退款场景子系统序列图"><a href="#2-3-退款场景子系统序列图" class="headerlink" title="2.3 退款场景子系统序列图"></a>2.3 退款场景子系统序列图</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-14-seq2.png" alt="link"></p>
<ol>
<li>退款子系统先发送……消息到子系统 3，子系统 3 需要执行……完成……处理，然后发送……消息到财务系统，消息中包含……数据。</li>
<li>收到……的处理结果……后，子系统 1 发送……消息到……子系统 2……。</li>
</ol>
<h3 id="2-4-退款场景子系统活动图"><a href="#2-4-退款场景子系统活动图" class="headerlink" title="2.4 退款场景子系统活动图"></a>2.4 退款场景子系统活动图</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-14-activity.png" alt="link"></p>
<p>如图所示：</p>
<ol>
<li>退款开始时，子系统 1 处理 XXX，然后判断 m 的状态，如果 m 为真，请求子系统 3 处理 ZZZ，如果 m 为假，子系统继续处理 ZZZ 并结束。</li>
<li>子系统 3 处理 ZZZ 后，一方面继续处理 XYZ，一方面将……消息发送给财务通进行 AAA 处理。</li>
<li>子系统在处理完 XYZ 后，返回子系统继续梳理 YYY，然后退款处理结束</li>
</ol>
<h2 id="3-子系统-1-设计"><a href="#3-子系统-1-设计" class="headerlink" title="3 子系统 1 设计"></a>3 子系统 1 设计</h2><p>子系统 1 的主要功能职责是……，其中主要包含了……组件。</p>
<h3 id="3-1-子系统-1-组件图"><a href="#3-1-子系统-1-组件图" class="headerlink" title="3.1 子系统 1 组件图"></a>3.1 子系统 1 组件图</h3><p><img src="https://liulixiang1988.github.io/images/2021-03-14-component.png" alt="link"></p>
<p>子系统 1 包含 6 个组件：</p>
<p>组件 1 的功能主要是……，需要依赖组件 2 完成……，是子系统 1 的核心组件，用户……请求主要通过组件 1 完成。</p>
<p>同样的，组件 2 也可以参照组件 1 来这样写。</p>
<h4 id="3-1-1-场景-A-组件序列图"><a href="#3-1-1-场景-A-组件序列图" class="headerlink" title="3.1.1 场景 A 组件序列图"></a>3.1.1 场景 A 组件序列图</h4><p><img src="https://liulixiang1988.github.io/images/2021-03-14-seq3.png" alt="link"></p>
<p>对于场景 A，首先组件 1 收到用户消息 CCC，然后组件 1 调用组件 2 的 XXX 方法……。</p>
<h4 id="3-1-2-场景-B-组件活动图"><a href="#3-1-2-场景-B-组件活动图" class="headerlink" title="3.1.2 场景 B 组件活动图"></a>3.1.2 场景 B 组件活动图</h4><p><img src="https://liulixiang1988.github.io/images/2021-03-14-activity2.png" alt="link"></p>
<p>在场景 B 中，首先组件收到……消息，开始处理……，然后判断……，如果为 true，那么……，如果为 false，那么……。</p>
<h3 id="3-2-组件-1-设计"><a href="#3-2-组件-1-设计" class="headerlink" title="3.2 组件 1 设计"></a>3.2 组件 1 设计</h3><p>组件 1 的主要功能职责是……，其中主要包含了……类。</p>
<h4 id="3-2-1-组件-1-类图"><a href="#3-2-1-组件-1-类图" class="headerlink" title="3.2.1 组件 1 类图"></a>3.2.1 组件 1 类图</h4><p><img src="https://liulixiang1988.github.io/images/2021-03-14-class.png" alt="link"></p>
<p>Class1 实现接口 Interface1，主要功能是……，Class1 聚合了 Class2 和 Class3，共同对外提供……服务，Class1 依赖 Class4 实现……功能，Class4……。</p>
<h4 id="3-2-2-场景-A-类序列图"><a href="#3-2-2-场景-A-类序列图" class="headerlink" title="3.2.2 场景 A 类序列图"></a>3.2.2 场景 A 类序列图</h4><p><img src="https://liulixiang1988.github.io/images/2021-03-14-seq4.png" alt="link"></p>
<p>在场景 A 中，当外部应用调用类 1 的 create 方法时，类 1……。</p>
<h4 id="3-2-3-对象-1-状态图"><a href="#3-2-3-对象-1-状态图" class="headerlink" title="3.2.3 对象 1 状态图"></a>3.2.3 对象 1 状态图</h4><p><img src="https://liulixiang1988.github.io/images/2021-03-14-status.png" alt="link"></p>
<p>对象 1 运行时有 4 种状态，初始状态是状态 1，当条件 1 满足是，状态 1 转换为状态 2，当条件 3 满足时，状态 2 转换为状态 4……。</p>
<h3 id="3-3-组件-2-设计"><a href="#3-3-组件-2-设计" class="headerlink" title="3.3 组件 2 设计"></a>3.3 组件 2 设计</h3><p>重复上面的格式。</p>
<h2 id="4-子系统-2-设计"><a href="#4-子系统-2-设计" class="headerlink" title="4 子系统 2 设计"></a>4 子系统 2 设计</h2><p>重复上面的格式。</p>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>System Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 101</title>
    <url>/2021/05/15/2021-05-15-Hadoop101/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-Hadoop概述"><a href="#1-Hadoop概述" class="headerlink" title="1. Hadoop概述"></a>1. Hadoop概述</h2><p>官网：<a href="https://hadoop.apache.org/" target="_blank" rel="noopener">https://hadoop.apache.org/</a></p>
<p>Hadoop包含以下模块：</p>
<ol>
<li>Hadoop Common: 支撑其他模块的通用工具</li>
<li>Hadoop Distributed File System(HDFS): 分布式文件系统，提供高吞吐数据读取</li>
<li>Hadoop YARN: 作业调度与资源管理框架</li>
<li>Hadoop MapReduce: 基于YARN的大数据并行处理。</li>
</ol>
<p><strong>开源的分布式存储与分布式计算平台</strong>。</p>
<h3 id="1-1-Hadoop能做什么"><a href="#1-1-Hadoop能做什么" class="headerlink" title="1.1 Hadoop能做什么"></a>1.1 Hadoop能做什么</h3><ul>
<li>搜索引擎</li>
<li>日志分析</li>
<li>商业智能</li>
<li>数据挖掘</li>
</ul>
<h2 id="2-Hadoop核心组件"><a href="#2-Hadoop核心组件" class="headerlink" title="2. Hadoop核心组件"></a>2. Hadoop核心组件</h2><h3 id="2-1-分布式文件系统HDFS"><a href="#2-1-分布式文件系统HDFS" class="headerlink" title="2.1 分布式文件系统HDFS"></a>2.1 分布式文件系统HDFS</h3><p>源于Google的GFS论文，论文发表于2003年10月。</p>
<p>HDFS是GFS的开源实现。</p>
<p>HDFS特点：扩展性、容错性（多副本）、海量数据存储。</p>
<p>在HDFS中，可以将文件切分成指定大小的数据库并以多副本存储在多个机器上。数据库大小默认为128M，可以通过参数进行修改。</p>
<p>数据切分、多副本、容错等操作对用户是透明的。</p>
<p><img src="https://liulixiang1988.github.io/images/hdfsdatanodes.png" alt="hdfsdatanodes.png"></p>
<h3 id="2-2-资源调度系统YARN"><a href="#2-2-资源调度系统YARN" class="headerlink" title="2.2 资源调度系统YARN"></a>2.2 资源调度系统YARN</h3><p>YARN: Yet Another Resource Negotiator</p>
<p>YARN负责整个集群资源的管理和调度</p>
<p>YARN特点：扩展性&amp;容错性&amp;多框架资源统一调度</p>
<p><img src="https://liulixiang1988.github.io/images/YARN.png" alt="YARN.png"></p>
<h3 id="2-3-分布式计算框架MapReduce"><a href="#2-3-分布式计算框架MapReduce" class="headerlink" title="2.3 分布式计算框架MapReduce"></a>2.3 分布式计算框架MapReduce</h3><p>源于Google的MapReduce论文，论文发表于2004年12月</p>
<p>MapReduce是Google MapReduce的开源版本。</p>
<p>MapReduce特点：扩展性&amp;容错性&amp;海量数据离线处理</p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-15-map-reduce.png" alt="mapreduce.png"></p>
<h2 id="3-Hadoop优势"><a href="#3-Hadoop优势" class="headerlink" title="3. Hadoop优势"></a>3. Hadoop优势</h2><ul>
<li>高可靠性<ul>
<li>数据存储：数据库多副本</li>
<li>数据计算：重新调度作业计算</li>
</ul>
</li>
<li>高扩展性<ul>
<li>存储、计算资源不够时，可以横向的线性扩展机器</li>
<li>一个集群可以包含数以千计的节点</li>
</ul>
</li>
<li>其它<ul>
<li>存储在廉价机器上，降低成本</li>
<li>成熟的生态圈</li>
</ul>
</li>
</ul>
<h2 id="4-Hadoop生态系统"><a href="#4-Hadoop生态系统" class="headerlink" title="4. Hadoop生态系统"></a>4. Hadoop生态系统</h2><p><img src="https://liulixiang1988.github.io/images/2021-05-15-hadoop-ecosystem.jpg" alt="2021-05-15-hadoop-ecosystem.jpg"></p>
<ul>
<li>HDFS：存储数据</li>
<li>MapReduce/YARN</li>
<li>Hive: 结构化数据，HQL</li>
<li>Mahout：机器学习，现在主要面向Spark更新</li>
<li>Pig: 脚本，离线分析</li>
<li>Oozie: 工作流引擎</li>
<li>Zookeeper: 分布式协作服务。解决分布式环境下的数据管理问题：统一命名，状态同步，集群管理，配置同步等。</li>
<li>Flume：日志收集</li>
<li>Sqoop: Sql to Hadoop。主要用于传统数据库和hadoop之间传输数据。数据的导入和导出本质上是mapreduce程序，充分利用了MR的并行化和容错性。</li>
<li>HBase:HBase是一个针对结构化数据的可伸缩，高可靠，高性能，分布式和面向列的动态模式数据库。和传统关系型数据库不同，hbase采用了bigtable的数据模型。</li>
</ul>
<h2 id="6-Hadoop发现版本选择"><a href="#6-Hadoop发现版本选择" class="headerlink" title="6. Hadoop发现版本选择"></a>6. Hadoop发现版本选择</h2><ul>
<li>Apache Hadoop</li>
<li>CDH: Cloudera Distributed Hadoop</li>
<li>HDP: Hortonworks Data Platform</li>
</ul>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>YARN学习笔记</title>
    <url>/2021/05/19/2021-05-19-YARN/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-YARN产生背景"><a href="#1-YARN产生背景" class="headerlink" title="1. YARN产生背景"></a>1. YARN产生背景</h2><h3 id="1-1-Hadoop-1-x中MapReduce存在的问题"><a href="#1-1-Hadoop-1-x中MapReduce存在的问题" class="headerlink" title="1.1 Hadoop 1.x中MapReduce存在的问题"></a>1.1 Hadoop 1.x中MapReduce存在的问题</h3><p>Hadoop 1.x时，还没有YARN。MapReduce架构采用的是Master/Slave架构，一个JobTracker带多个TaskTracker。提交作业时客户端直接与MapReduce的JobTracker进行通信。</p>
<ul>
<li>JobTracker主要的功能是资源的管理与作业的调度。</li>
<li>TaskTracker<ul>
<li>定期（通过心跳）向JobTracker汇报本节点的健康状况、资源使用情况、作业执行情况。</li>
<li>接收来自JobTracker的命令：启动任务、杀死任务</li>
</ul>
</li>
</ul>
<p><img src="https://liulixiang1988.github.io/images/2021-05-19-map-reduce-arch-1.png" alt="map-reduce"></p>
<p>存在采用的Master的问题：</p>
<ol>
<li>单点故障：整个集群只有1个JobTracker。</li>
<li>JobTracker要接受各个TaskTracker与client的通信请求，节点压力大。</li>
<li>JobTracker承担了多种职责，且只能接受MapReduce的作业，不易扩展。</li>
</ol>
<h3 id="1-2-提高资源利用率和降低运维成本的诉求"><a href="#1-2-提高资源利用率和降低运维成本的诉求" class="headerlink" title="1.2 提高资源利用率和降低运维成本的诉求"></a>1.2 提高资源利用率和降低运维成本的诉求</h3><p><img src="https://liulixiang1988.github.io/images/2021-05-19-yarn-1.png" alt="resource usage"></p>
<p>我们如果不同的作业类型（Hadoop、Spark、MPI）如果使用不同的集群，会需要更多的资源，同时资源利用率也比较低、运维需要维护多个集群，还存在跨网络的问题。</p>
<p>如何将多种作业类型放在同一个集群，共享数据、计算资源，成为日益迫切的诉求。</p>
<h3 id="1-3-YARN的诞生"><a href="#1-3-YARN的诞生" class="headerlink" title="1.3 YARN的诞生"></a>1.3 YARN的诞生</h3><p>基于上述两节，催生了YARN。可以在YARN上运行多种不同的计算框架。不同计算框架可以共享同一个HDFS集群上的数据，享受整体的资源调度。</p>
<p>所谓的多种框架运行在YARN，就是常说的xxx on YARN，比如Spark/MapReduce/Flink on YARN. xxx on YARN的好处：与其他计算框架共享集群资源，按资源需要分配，进而提高集群资源的利用率。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-05-19-yarn-2.png" alt="resource usage"></p>
<h2 id="2-YARN概述"><a href="#2-YARN概述" class="headerlink" title="2. YARN概述"></a>2. YARN概述</h2><p>官网地址：<a href="https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html</a></p>
<ol>
<li>YARN的名称其实是Yet Another Resource Negoitiator的首字母缩写；</li>
<li>YARN是一个<strong>通用</strong>的资源管理系统；</li>
<li>为上层的应用提供统一的资源管理和调度能力</li>
<li>监控Node Manager，一旦某个Node Manager，那么该Node Manager上运行的任务，那么该Node Manager上运行的任务需要高速我们的Application Master</li>
</ol>
<h2 id="3-YARN架构"><a href="#3-YARN架构" class="headerlink" title="3. YARN架构"></a>3. YARN架构</h2><p><img src="https://liulixiang1988.github.io/images/yarn_architecture.gif" alt="yarn architecture"></p>
<p><strong>Resource Manager:</strong></p>
<ol>
<li>同一时间，整个集群提供服务的Resource Manager只有一个，负责集群资源的统一管理与调度；</li>
<li>处理客户端的请求：提交一个作业、杀死一个作业；</li>
<li>监控Node Manager，一旦某个Node Master挂了，那么该Node Manager上运行的任务需要高速我们的Application Master如何进行重启。</li>
</ol>
<p><strong>Node Manager:</strong></p>
<ol>
<li>整个集群有多个，负责自己本身节点资源管理和使用；</li>
<li>定时向Resource Manager本节点资源使用情况；</li>
<li>接收并处理来自Resource Manager的各种命令：启动container；</li>
<li>处理来自Application Master的命令；</li>
<li>单个节点的资源管理。</li>
</ol>
<p><strong>Application Master:</strong></p>
<ol>
<li>每个应用程序对应一个：MapReduce、Spark，负责应用程序的管理；</li>
<li>为应用程序向Resource Manager申请资源(core、memory)，分配给内部task；</li>
<li>需要与Node Manager通信：启动/停止task，task是运行在container里面，Application Master也运行在container里面。</li>
</ol>
<p><strong>Container:</strong></p>
<ol>
<li>封装了CPU、Memory等资源的一个容器</li>
<li>是一个任务运行环境的抽象</li>
</ol>
<p><strong>Client:</strong></p>
<ol>
<li>提交作业</li>
<li>查询作业的运行进度</li>
<li>杀死作业</li>
</ol>
<h2 id="4-YARN执行流程"><a href="#4-YARN执行流程" class="headerlink" title="4. YARN执行流程"></a>4. YARN执行流程</h2><p><img src="https://liulixiang1988.github.io/images/2021-06-14-yarn.drawio.png" alt="yarn architecture"></p>
<ol>
<li>用户向YARN提交作业；</li>
<li>Resource Manager为第一个container分配节点，这个container用来启动application master;</li>
<li>Node Manager为application master启动container;</li>
<li>Application Master向Resource Manager进行注册。此时Client就可以通过Resource Manager查询任务的运行情况了。同时，Application Master为作业申请作业所需的资源；</li>
<li>Application Master申请到资源之后向Node Manager申请运行任务所需要的资源；</li>
<li>Node Manager为Application Master创建任务对应的container。</li>
</ol>
<p>上述流程是一个通用YARN任务流程，只需要按照YARN接口实现不同的Application Master，比如实现Map Reduce Application Master，或者Spark Application Master。</p>
<h2 id="5-YARN环境搭建"><a href="#5-YARN环境搭建" class="headerlink" title="5. YARN环境搭建"></a>5. YARN环境搭建</h2><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html#YARN_on_a_Single_Node" target="_blank" rel="noopener">官方参考</a></p>
<h3 id="5-1-配置YARN"><a href="#5-1-配置YARN" class="headerlink" title="5.1 配置YARN"></a>5.1 配置YARN</h3><p><code>etc/hadoop/mapred-site.xml</code>: 指定map reduce跑在yarn之上。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>etc/hadoop/yarn-site.xml</code> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-启动Resource-Manager与Node-Manager"><a href="#5-2-启动Resource-Manager与Node-Manager" class="headerlink" title="5.2 启动Resource Manager与Node Manager"></a>5.2 启动Resource Manager与Node Manager</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>

<h3 id="5-3-验证"><a href="#5-3-验证" class="headerlink" title="5.3 验证"></a>5.3 验证</h3><p>方法1：jps:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">liulixiang@DESKTOP-34LMJFE:/mnt/d/app/hadoop-2.10.1/sbin$ jps -l</span><br><span class="line">1597 org.apache.hadoop.yarn.server.resourcemanager.ResourceManager</span><br><span class="line">1759 org.apache.hadoop.yarn.server.nodemanager.NodeManager</span><br></pre></td></tr></table></figure>

<p>方法2：访问：ResourceManager - <a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a></p>
<h3 id="5-4-停止"><a href="#5-4-停止" class="headerlink" title="5.4 停止"></a>5.4 停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./stop-yarn.sh</span><br></pre></td></tr></table></figure>

<h2 id="6-提交作业到YARN上执行"><a href="#6-提交作业到YARN上执行" class="headerlink" title="6. 提交作业到YARN上执行"></a>6. 提交作业到YARN上执行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar</span><br></pre></td></tr></table></figure>

<p>hadoop提供了一个命令提交作业：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.10.1.jar pi 2 3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>YARN</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/2021/07/10/2021-07-10-MySQL-Optimization/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-Opertimizing-Data-Access"><a href="#1-Opertimizing-Data-Access" class="headerlink" title="1. Opertimizing Data Access"></a>1. Opertimizing Data Access</h2><p>MySQL提供了Sakila示例数据库供学习</p>
<ol>
<li>只返回应用需要的<strong>行</strong>：恰当地使用<code>WHERE</code>语句</li>
<li>只返回应用需要的<strong>列</strong>：避免使用<code>SELECT *</code>，尽量指定列名</li>
<li>避免对同样的数据多次查询：使用应用缓存</li>
<li>order the data only if you are not ordering them in application: 使用<code>ORDER BY</code>，避免在应用中排序</li>
<li><code>SELECT DISTINCT name, last_name</code>去重</li>
</ol>
<h2 id="2-MySQL-Query-Optimization"><a href="#2-MySQL-Query-Optimization" class="headerlink" title="2. MySQL Query Optimization"></a>2. MySQL Query Optimization</h2><p>查询语句执行时经历的组件：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-07-10-mysql-1.png" alt="mysql-1"></p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce学习笔记</title>
    <url>/2021/06/14/2021-06-14-MapReduce/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-MapReduce概述"><a href="#1-MapReduce概述" class="headerlink" title="1. MapReduce概述"></a>1. MapReduce概述</h2><p>源自于google的<a href="https://liulixiang1988.github.io/images/mapreduce.pdf">MapReduce论文</a>.</p>
<p>Hadoop MapReduce是Google MapReduce的开源版本。</p>
<p>MapReduce优点：</p>
<ol>
<li>海量数据离线处理</li>
<li>易开发</li>
<li>易运行</li>
</ol>
<p>MapReduce缺点：</p>
<ol>
<li>实时流式计算</li>
</ol>
<p><a href="https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html" target="_blank" rel="noopener">官网</a></p>
<blockquote>
<p>Hadoop MapReduce is a software framework for easily writing applications which process vast amounts of data (multi-terabyte data-sets) in-parallel on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant manner.</p>
</blockquote>
<h2 id="2-MapReduce编程模型"><a href="#2-MapReduce编程模型" class="headerlink" title="2. MapReduce编程模型"></a>2. MapReduce编程模型</h2><h3 id="2-1-WordCount"><a href="#2-1-WordCount" class="headerlink" title="2.1 WordCount"></a>2.1 WordCount</h3><p>统计文件中每个单词出现的次数。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-06-14-word-count.png" alt="word count"></p>
<blockquote>
<p>A MapReduce job usually splits the input data-set into independent chunks which are processed by the map tasks in a completely parallel manner. The framework sorts the outputs of the maps, which are then input to the reduce tasks. Typically both the input and the output of the job are stored in a file-system. The framework takes care of scheduling tasks, monitoring them and re-executes the failed tasks.</p>
</blockquote>
<h3 id="2-2-Map与Reduce阶段"><a href="#2-2-Map与Reduce阶段" class="headerlink" title="2.2 Map与Reduce阶段"></a>2.2 Map与Reduce阶段</h3><ol>
<li>作业拆分成Map阶段和Reduce阶段</li>
<li>Map阶段：Map Tasks</li>
<li>Reduce阶段：Reduce Tasks</li>
</ol>
<p>MapReduce执行步骤：</p>
<ol>
<li>逐步map处理的输入数据</li>
<li>Mapper处理</li>
<li>Shuffle</li>
<li>Reduce处理</li>
<li>结果输出</li>
</ol>
<blockquote>
<p>The MapReduce framework operates exclusively on &lt;key, value&gt; pairs, that is, the framework views the input to the job as a set of &lt;key, value&gt; pairs and produces a set of &lt;key, value&gt; pairs as the output of the job, conceivably of different types.</p>
</blockquote>
<blockquote>
<p>The key and value classes have to be serializable by the framework and hence need to implement the <a href="https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/io/Writable.html" target="_blank" rel="noopener"><code>Writable</code></a> interface. Additionally, the key classes have to implement the <a href="https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/io/WritableComparable.html" target="_blank" rel="noopener"><code>WritableComparable</code></a> interface to facilitate sorting by the framework.</p>
</blockquote>
<p><img src="https://liulixiang1988.github.io/images/2021-06-14-mr-workflow.png" alt="map reduce workflow"></p>
<h3 id="2-3-MapReduce核心概念"><a href="#2-3-MapReduce核心概念" class="headerlink" title="2.3 MapReduce核心概念"></a>2.3 MapReduce核心概念</h3><p>1.Split：</p>
<p>交由MapReduce作业来处理的数据块，是MapReduce中最小的计算单元。HDFS中的blocksize是HDFS中最小的存储单元（默认128M）。默认情况下，<code>Split</code>与<code>Blocksize</code>是一一对应的，也可以手工设置它们之间的关系（不建议）。</p>
<p>2.InputFormat:</p>
<ul>
<li>将文件的输入数据分片(split): <code>InputSplit[] getSplits(JobConf job, int numSplits) throws IOException</code></li>
<li><code>TextInputFormat</code></li>
</ul>
<p>3.OutputFormat:</p>
<p>4.Combiner:</p>
<p>5.Partitioner:</p>
<p><img src="https://liulixiang1988.github.io/images/2021-06-14-mr-workflow2.png" alt="map reduce workflow"></p>
<h2 id="3-MapReduce架构"><a href="#3-MapReduce架构" class="headerlink" title="3. MapReduce架构"></a>3. MapReduce架构</h2><h3 id="3-1-MapReduce-1-x架构"><a href="#3-1-MapReduce-1-x架构" class="headerlink" title="3.1 MapReduce 1.x架构"></a>3.1 MapReduce 1.x架构</h3><p><img src="https://liulixiang1988.github.io/images/2021-05-19-map-reduce-arch-1.png" alt="map-reduce"></p>
<h2 id="4-MapReduce编程"><a href="#4-MapReduce编程" class="headerlink" title="4. MapReduce编程"></a>4. MapReduce编程</h2>]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>Map Reduce</tag>
      </tags>
  </entry>
  <entry>
    <title>GRPC入门</title>
    <url>/2021/07/17/2021-07-17-grpc/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="1-编写消息并编译为go代码"><a href="#1-编写消息并编译为go代码" class="headerlink" title="1. 编写消息并编译为go代码"></a>1. 编写消息并编译为go代码</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><ol>
<li>安装go vscode</li>
<li>vscode安装protobuf插件</li>
<li>安装protoc，编写makefile生成go代码</li>
</ol>
<h3 id="1-2-protocol-message规则"><a href="#1-2-protocol-message规则" class="headerlink" title="1.2 protocol message规则"></a>1.2 protocol message规则</h3><ol>
<li><p>message使用驼峰</p>
</li>
<li><p>字段使用<code>lower_snake_case</code></p>
</li>
<li><p>内置的类型</p>
<ol>
<li><p>string, bool, bytes</p>
</li>
<li><p>float, double</p>
</li>
<li><p>int32, int64, uint32, uint64, sint32, sint64</p>
</li>
</ol>
</li>
<li><p>也可以使用其他message作为字段类型</p>
</li>
<li><p>tag很重要：</p>
<ol>
<li>tag整数，从1到2^29-1</li>
<li>19000-19999保留</li>
<li>第1-15个tag使用1个byte</li>
<li>16-2047个tag占用2个byte</li>
<li>tag不需要有顺序或者递增tag必须唯一定义消息</li>
</ol>
</li>
</ol>
<h3 id="1-3-消息定义"><a href="#1-3-消息定义" class="headerlink" title="1.3 消息定义"></a>1.3 消息定义</h3><p>定义文件<code>proto/processor_message.proto</code></p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">option</span> go_package=<span class="string">"io.liux/pcbook/pb"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> pb;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="comment">// comment 1</span></span><br><span class="line">    <span class="built_in">string</span> brand = <span class="number">1</span>;</span><br><span class="line">    /*</span><br><span class="line">    * comment <span class="number">2</span></span><br><span class="line">    */</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">uint32</span> number_cores = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">uint32</span> number_threads = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">double</span> min_ghz = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">double</span> max_ghz = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-编译为Go"><a href="#1-4-编译为Go" class="headerlink" title="1.4 编译为Go"></a>1.4 编译为Go</h3><p>配置环境：</p>
<ol>
<li>下载<code>protoc</code>：<a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></li>
<li>按照<a href="https://grpc.io/docs/languages/go/quickstart/" target="_blank" rel="noopener">https://grpc.io/docs/languages/go/quickstart/</a> 进行配置</li>
</ol>
<p>编译：</p>
<p><code>protoc --go_out=. --go_opt=module=io.liux/pcbook --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/*.proto</code></p>
]]></content>
      <categories>
        <category>Micro Service</category>
      </categories>
      <tags>
        <tag>GRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>理解Istio</title>
    <url>/2020/10/15/2021-10-15-istio-101/</url>
    <content><![CDATA[<p>[toc]</p>
<p><a href="https://istio.io/latest/zh/" target="_blank" rel="noopener" title="istio">Istio官网</a></p>
<h2 id="1-Istio架构"><a href="#1-Istio架构" class="headerlink" title="1. Istio架构"></a>1. Istio架构</h2><p><img src="/images/2021-10-15-istio-arch.svg" alt="istio architecture"></p>
<h3 id="1-1-Envoy"><a href="#1-1-Envoy" class="headerlink" title="1.1 Envoy"></a>1.1 Envoy</h3>]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>理解分布式系统中的一些概念</title>
    <url>/2021/08/21/2021-08-21-%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>[TOC]</p>
<hr>
<h2 id="1-什么是分布式系统"><a href="#1-什么是分布式系统" class="headerlink" title="1. 什么是分布式系统"></a>1. 什么是分布式系统</h2><p>计算机科学家<a href="https://en.wikipedia.org/wiki/Andrew_S._Tanenbaum" target="_blank" rel="noopener" title="Andrew S. Tanenbaum">Andrew S. Tenenbaum</a>对分布式定义为：</p>
<blockquote>
<p>A collection of independent computers that appear to its users as one computer</p>
</blockquote>
<p>他认为，分布式系统必须要有的三个特征是：</p>
<ol>
<li>The computers operate concurrently.</li>
<li>The computers fail independently.</li>
<li>The computers don’t share a global clock.</li>
</ol>
<p>本篇文章包含以下分布式相关的内容：</p>
<ol>
<li>Storage(存储): Relational/Mongo, Cassandra, HDFS</li>
<li>Computation(计算): Hadoop, Spark, Storm</li>
<li>Synchroniztion(同步): NTP, vector clock(向量时钟)</li>
<li>Consensus(共识): Paxos, Zookeeper</li>
<li>Messaging(消息): Kafka</li>
</ol>
<p>文中会以一个咖啡店业务的发展过程作为例子来进行分布式概念的引入，该咖啡店提供在线业务，从小到大的发展中遇到了各个技术问题，我们一点点进行说明讲解。</p>
<h2 id="2-Read-Replication-读副本"><a href="#2-Read-Replication-读副本" class="headerlink" title="2. Read Replication(读副本)"></a>2. Read Replication(读副本)</h2><p><img src="https://liulixiang1988.github.io/images/2021-08-21-distri-sys-read-replica.drawio.png" alt="read replication"></p>
<p>主要适用于主从场景，主节点负责写入，从节点即read replication负责读取。</p>
<p>比如，咖啡店业务刚开始用一个数据库就能支撑订单，但是访问越来越多，我们增加了Read Replication来减轻读压力。</p>
<h2 id="3-Sharding-分片"><a href="#3-Sharding-分片" class="headerlink" title="3. Sharding(分片)"></a>3. Sharding(分片)</h2><p>假设我们的咖啡店业务做得很好，现在订单越来越多，我们的主库已经出现了不能支撑写的请求。此时我们需要考虑能不能将订单数据进行拆分到几个库里来存储。</p>
<p>Read Replication虽然解决了主节点读的压力，但是对于主节点的写入压力却无能为力。此时，我们考虑使用sharding技术来进行分片，笔者在<a href="https://liulixiang1988.github.io/2021/02/19/2021-02-19-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84101/" title="分布式架构101">之前的笔记</a>中也提到过。分片的作用相当于将工作负载(workload)按照<strong>一定规则</strong>(后面提到的一致性Hash)分配到多个主节点中，由此来均衡压力。</p>
<p>Sharding技术解决了负载压力过大的问题，但是也引入了一些新的挑战：</p>
<ol>
<li>More Complexity: 系统更加复杂</li>
<li>Limited Data Model: 数据需要能够支持分片，比如要有一个key用来做hash</li>
<li>Limited Data Access Patterns：使用场景更偏向于OLTP，对于OLAP分析类的数据访问，往往需要涉及多维度数据，可能要便利所有shard，此时使用shard没有优势。</li>
</ol>
<h2 id="4-Consistent-Hashing-一致性Hash"><a href="#4-Consistent-Hashing-一致性Hash" class="headerlink" title="4. Consistent Hashing(一致性Hash)"></a>4. Consistent Hashing(一致性Hash)</h2><p>Consistent Hashing也被称为Distributed Hash Table(DHT) ，2007年的<a href="https://liulixiang1988.github.io/images/dynamo.pdf" title="Dynamo">Amazon Dynamo论文</a>中采用了这个算法，<a href="https://en.wikipedia.org/wiki/Consistent_hashing" target="_blank" rel="noopener" title="Consistent Hashing">wikipedia</a>,对其做了比详细的介绍。</p>
<p>在一致性hash下，当HashTable调整大小时，只需要有n/m个数据需要重新映射，其中n是key的数量，m是槽(slot)的数量。相比之下，在大多数传统哈希表中，数组槽数量的变化会导致几乎所有键都被重新映射，因为key和slot之间的映射是由取余操作来实现的。</p>
<p>虽然上面说的解决了scale的问题，但是如果环中的节点出现了故障，则会发生单点问题。前面我们为了避免单点问题，使用read replication。在一致性Hash中，为了避免单点故障，我们沿着环将值存储三分。这样避免了单点问题。</p>
<p>但是在分布式系统领域，解决一个问题往往会引入两个新的问题。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-08-22-distri-sys-replic.png" alt="replication"></p>
<p>我们为key <code>9F72</code> 放入了三个副本，现在我想更新对应的值，如果两个更新成功了，一个更新失败了。此时另一个请求来读取值，该怎么来决定读取的值是多少呢？</p>
<p>上面这个问题是一个典型的<code>Consistency</code>(一致性)问题。像Cassandra中使用的是<code>eventual consistency</code>(最终一致性)，里面核心的原理就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R + W &gt; N</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><code>N</code>代表副本数量，在上面的例子里，就是3</li>
<li><code>R</code>代表读取时成功的数量</li>
<li><code>W</code>代表写入时成功的数量</li>
<li><code>R + W &gt; N</code>：以上面3个副本为例，写入时我保障半数也就是2个节点已经写入我给的值，读取时有超过半数（也就是2个节点）返回相同的值，那么我获取的值就是一致的，此时<code>2+2&gt;3</code>。</li>
</ol>
<p>如果一些场景允许不一致，则不需要等待半数以上写入或读取成功，则可以不用上面的最终一致性方案。因为不用等待半数确认，因此，这种方案性能比较高。</p>
<p>综上，使用低延迟非一致性方案还是使用最终一致性方案，取决于业务的使用场景。</p>
<p>上面讲了一致性的问题，对于不一致时该怎么处理呢？这是一个entropy problem(熵问题)，对于这类问题，不同的存储系统，比如cassandra, riak, dynamo，采用的方案不一样。</p>
<p>上面我们说了这么多，那什么时候使用基于这些技术的存储系统（比如Cassandra）呢？</p>
<ul>
<li>Scale（扩展性）</li>
<li>Transactional data (会话数据)</li>
<li>Always on (一直在线)</li>
</ul>
<h2 id="5-CAP-Theorem-CAP理论"><a href="#5-CAP-Theorem-CAP理论" class="headerlink" title="5. CAP Theorem (CAP理论)"></a>5. CAP Theorem (CAP理论)</h2><p>2000年，<a href="https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)" target="_blank" rel="noopener" title="Eric Brewer">Eric Brewer</a>在ACM的一个会议上提出分布式数据库不能同时满足Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容忍性）。这个理论就是后来的CAP理论。</p>
<ul>
<li>Consistency（一致性）：当我读区数据时，读到的永远都是最近一次写入的数据；</li>
<li>Availability（可用性）：当查询时，能取得结果；当写入时，能够写入；而不是说现在不能访问；(When I ask, I get the answer; When I try to write, I can write)</li>
<li>Partition Tolerance (分区容错性)：因为分布式系统存在多个节点，其中的一些节点可能会因为一些原因（比如网络故障）导致不能与其他节点进行通信。当上述发生时，如果节点恢复后，分布式系统能够恢复，这个叫做分区容错性。</li>
</ul>
<p>因为节点可以随时故障，因此分区容错性是必选的。那剩下的就是在一致性和可用性中选一个了。也就是我们只能实现CP或AP。</p>
<p>CP系统例子：由于网络的原因，节点1不能跟其他节点进行通信，它完全不知道外面数据是什么样子了，此时有个客户端连接了它，并且对它发出获取数据的请求。此时节点1会为了保持一致性而拒绝服务。这就是CP系统。</p>
<p>AP系统例子：由于网络的原因，节点1不能跟其他节点进行通信，它完全不知道外面数据是什么样子了，此时有个客户端连接了它，并且对它发出获取数据的请求。此时节点1如果返回了数据，表现出系统可用的状态。这就是AP系统。</p>
<p>使用CP还是AP，是一个tradeoff。</p>
<h2 id="6-Distributed-Transactions（分布式事务）"><a href="#6-Distributed-Transactions（分布式事务）" class="headerlink" title="6. Distributed Transactions（分布式事务）"></a>6. Distributed Transactions（分布式事务）</h2>]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>System Design</tag>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式架构笔记</title>
    <url>/2021/02/15/2021-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-为什么需要分布式架构"><a href="#1-为什么需要分布式架构" class="headerlink" title="1. 为什么需要分布式架构"></a>1. 为什么需要分布式架构</h2><ul>
<li><strong>增大系统容量</strong></li>
<li><strong>增强系统可用性</strong></li>
</ul>
<h2 id="2-分布式系统技术栈"><a href="#2-分布式系统技术栈" class="headerlink" title="2. 分布式系统技术栈"></a>2. 分布式系统技术栈</h2><p>分布式技术栈是为了增大系统容量、增强系统可用性来服务的，因此主要是完成两件事情：</p>
<ul>
<li><strong>大流量处理</strong>：提高性能，通过集群技术把大规模并发请求的负载分散到不同的机器上。</li>
<li><strong>关键业务保护</strong>：提高后台服务的可用性，把故障隔离起来阻止多米诺骨牌效应（雪崩效应）。如果流量过大，需要对业务降级，以保护关键业务流转。</li>
</ul>
<h3 id="2-1-提高性能"><a href="#2-1-提高性能" class="headerlink" title="2.1 提高性能"></a>2.1 提高性能</h3><p><img src="https://liulixiang1988.github.io/images/2021021501.png" alt="提高性能"></p>
<ul>
<li><strong>缓存系统</strong></li>
</ul>
]]></content>
      <categories>
        <category>Distributed System</category>
      </categories>
      <tags>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title>C++面向对象</title>
    <url>/2020/12/10/2021-12-10-cpp-opp/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="类-Class"><a href="#类-Class" class="headerlink" title="类(Class)"></a>类(Class)</h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* All member variables</span></span><br><span class="line"><span class="comment">  and member functions*/</span></span><br><span class="line"></span><br><span class="line">&#125;; <span class="comment">// 注意，类定义必须以分号结尾</span></span><br></pre></td></tr></table></figure>

<p>创建对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span> &#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">//integer object</span></span><br><span class="line">  className c; <span class="comment">// className object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类访问范围"><a href="#类访问范围" class="headerlink" title="类访问范围"></a>类访问范围</h3><p>私有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class1</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> num; <span class="comment">// 1. 默认时私有的</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class2</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>: <span class="comment">// 也可以显示声明私有</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>public &amp; protected</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> num = <span class="number">1</span>; <span class="comment">// 私有变量</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 保护类型</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span>: <span class="comment">// 共有</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>类方法技能在类中直接<strong>定义</strong>，也可以先在类中<strong>声明</strong>，再在类外定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> l)</span></span>&#123; <span class="comment">// 类中定义</span></span><br><span class="line">    length = l;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length * <span class="built_in">width</span>; <span class="comment">// 定义并且返回值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// 注意分号</span></span><br></pre></td></tr></table></figure>

<p>范围操作符<code>::</code>用于在类定义的外部定义类方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 此处仅声明</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> l)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用范围操作符来定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rectangle::setLength</span><span class="params">(<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">  length = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rectangle::area</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> length * <span class="built_in">width</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> day;</span><br><span class="line">  <span class="keyword">int</span> month;</span><br><span class="line">  <span class="keyword">int</span> year;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 默认构造器</span></span><br><span class="line">  Date()&#123;</span><br><span class="line">    <span class="comment">// 定义默认的值</span></span><br><span class="line">    day = <span class="number">0</span>;</span><br><span class="line">    month = <span class="number">0</span>;</span><br><span class="line">    year = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Date: "</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 创建类对象</span></span><br><span class="line">  Date d; <span class="comment">// 使用默认构造器创建对象</span></span><br><span class="line">  d.printDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>this</code>指针，<code>this</code>表示当前对象的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> day;</span><br><span class="line">  <span class="keyword">int</span> month;</span><br><span class="line">  <span class="keyword">int</span> year;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 默认构造函数</span></span><br><span class="line">  Date()&#123;</span><br><span class="line">    <span class="comment">// We must define the default values for day, month, and year</span></span><br><span class="line">    day = <span class="number">0</span>;</span><br><span class="line">    month = <span class="number">0</span>;</span><br><span class="line">    year = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 参数构造函数</span></span><br><span class="line">  Date(<span class="keyword">int</span> day, <span class="keyword">int</span> month, <span class="keyword">int</span> year)&#123;</span><br><span class="line">    <span class="comment">// 使用指针</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;day = day;</span><br><span class="line">    <span class="keyword">this</span>-&gt;month = month;</span><br><span class="line">    <span class="keyword">this</span>-&gt;year = year;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A simple print function</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Date: "</span> &lt;&lt; day &lt;&lt; <span class="string">"/"</span> &lt;&lt; month &lt;&lt; <span class="string">"/"</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 调用参数构造函数</span></span><br><span class="line">  </span><br><span class="line">  <span class="function">Date <span class="title">d</span><span class="params">(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2018</span>)</span></span>; <span class="comment">// 使用指定的参数值创建对象</span></span><br><span class="line">  d.printDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed Lock Manager笔记</title>
    <url>/2021/08/13/2021-08-13-DistributedLockManager/</url>
    <content><![CDATA[<p>[toc]</p>
<hr>
<p>本文源自对<a href="https://www.youtube.com/watch?v=vFW1U1vimVs" target="_blank" rel="noopener">陈皓老师Distributed Lock Manager的分享</a>。</p>
<h2 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h2><p>比如对于一个订单，买家取消订单、商家发货这两个动作，先后顺序不一样，走的流程也不一致。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-08-13-lock-consistency.png" alt="consistency"></p>
<h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><ol>
<li>数据库锁(Database Lock)</li>
<li>应用Sharding(Shard Application)</li>
<li>中心分布式锁(Centralized Distributed Lock Manager)</li>
</ol>
<h3 id="DB-Lock"><a href="#DB-Lock" class="headerlink" title="DB Lock"></a>DB Lock</h3><p>以MySQL InnoDB Lock举例：</p>
<p><strong>共享锁(Shared Lock)</strong></p>
<p>含义：我在写，别人可以读</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARED</span> <span class="keyword">MODE</span></span><br></pre></td></tr></table></figure>

<p><strong>排他锁(Exclusive Lock)</strong></p>
<p>含义： 我在写，别人不可以读。</p>
<p>可能存在的坑：与Where条件强相关，如果where的结果是一个范围，可能会导致插入时也会失败，比如<code>where id &gt;= $ID</code>，当插入数据时，如果ID是自增的，此时插入不进去，因为此时ID在被锁的范围内。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure>

<p>上面两种锁都是<strong>悲观锁</strong>，可能会<strong>导致死锁</strong>：跟锁的顺序有关，使用时一定要注意。</p>
<p><strong>乐观锁(Versioning Optimistic Lock)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">data</span>, <span class="keyword">version</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=$<span class="keyword">ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. &#123;business code&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">data</span> = $<span class="keyword">data</span></span><br><span class="line">    <span class="keyword">version</span> = <span class="keyword">version</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=$<span class="keyword">ID</span> <span class="keyword">AND</span> <span class="keyword">version</span>=$VER</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.</span></span><br><span class="line"><span class="keyword">if</span> &#123;<span class="keyword">UPDATE</span>&#125; <span class="keyword">Failed</span>, <span class="keyword">go</span> <span class="keyword">to</span> step <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span> Done!</span><br></pre></td></tr></table></figure>

<p>乐观锁性能高，但是失败时可能需要不停访问数据库。</p>
<h3 id="Shard模式"><a href="#Shard模式" class="headerlink" title="Shard模式"></a>Shard模式</h3><p><img src="https://liulixiang1988.github.io/images/2021-08-13-lock-shard.png" alt="shard"></p>
<p>流程：</p>
<ol>
<li>将数据分片到不同的节点。</li>
<li>数据的索引交给索引服务器(indices)，索引服务器前面是两个Gateway。</li>
<li>Gateway通过数据发现，对数据(Order A)全部转向同一个节点上。</li>
<li>对同一个节点上的数据，可以使用多线程的一些方法(比如Mutex)来锁处理数据。</li>
</ol>
<p>当前方法的问题：</p>
<ol>
<li>存在热点数据</li>
<li>扩节点时需要reshard所有数据</li>
</ol>
<p>由此，我们使用一致性哈希(Consistent Hash)。</p>
<p>Uber Ringpop：通过gossip方式进行数据同步，但是当前Uber已经放弃了。<a href="https://eng.uber.com/ringpop-open-source-nodejs-library/" target="_blank" rel="noopener">https://eng.uber.com/ringpop-open-source-nodejs-library/</a></p>
<p>Shard问题：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-08-13-lock-shard-2.png" alt="shard problem"></p>
<ol>
<li>热点数据</li>
<li>多个数据的问题(Multiple Entities Transaction): 比如从A账户转账到B账户</li>
<li>节点失效时的数据复制倒置的一致性问题：R+W&gt;N –&gt; CAP理论 (NRW: 读的节点与写的节点大于N节点：写过半时是强一致性的，如果写未过半，此时是AP系统，需要自己Merge)</li>
</ol>
<h2 id="Distributed-Lock-Manager"><a href="#Distributed-Lock-Manager" class="headerlink" title="Distributed Lock Manager"></a>Distributed Lock Manager</h2><p><img src="https://liulixiang1988.github.io/images/2021-08-13-lock-lock.png" alt="lock manager"></p>
<p><a href="https://en.wikipedia.org/wiki/Distributed_lock_manager" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Distributed_lock_manager</a></p>
<p>DLM：分布式锁管理器，由他统一管理锁。需要注意的是，DLM一定要能对锁进行持久化，否则容易造成数据丢失。</p>
<ol>
<li>要提供锁的租约机制：防止加锁后，持有锁的对象不释放锁。</li>
<li>Lock Manager需要高可用，没有单点故障，锁状态可持久化。</li>
<li>死锁检测：<ol>
<li>锁过期(Lock expired)</li>
<li>保活心跳(Keepalive heart beats)</li>
</ol>
</li>
</ol>
<h3 id="DLM-Lock-Modes"><a href="#DLM-Lock-Modes" class="headerlink" title="DLM Lock Modes"></a>DLM Lock Modes</h3><p><img src="https://liulixiang1988.github.io/images/2021-08-14-lock-dlm.png" alt="lock modes"></p>
<p>上面是Wikipedia中的6种锁模型：</p>
<ol>
<li>无锁</li>
<li>并发读</li>
<li>并发写</li>
<li>保护读</li>
<li>保护写</li>
<li>排他锁</li>
</ol>
<p>前三个没什么，主要是后面三个。</p>
<h3 id="Redlock"><a href="#Redlock" class="headerlink" title="Redlock"></a>Redlock</h3><p><img src="https://liulixiang1988.github.io/images/2021-08-14-lock-redlock.png" alt="redlock"></p>
<p><a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a></p>
<p>算法：</p>
<ol>
<li>客户端获取当前时间（精确到毫秒）；</li>
<li>客户端按照顺序请求N个实例的锁。对这N个实例上锁时使用相同的key名称与随机值，随机值需要是唯一的；</li>
<li>当获得的锁节点的数量大于半数，且消耗的时间(elapsed time) &lt; 锁有效的时间(lock validity time)；</li>
<li>锁实际有效时间=初始有效时间 - 消耗时间(Actual lock validity time = initial validity time - elapsed time)：这是为了让锁同时失效，而不是参差不齐的时间点失效；</li>
<li>如果获取锁失败了，尝试释放掉所有实例。</li>
</ol>
<p><img src="https://liulixiang1988.github.io/images/2021-08-14-lock-redlock-dangerous.png" alt="redlock dangerous"></p>
<p>这个存在一些问题：</p>
<ol>
<li>时间跳变导致的锁失效；</li>
<li>如果client 1获取C节点后hang住，在锁失效后又恢复了；</li>
<li>client 1 与节点C之间通信有很大的网络延迟。</li>
</ol>
<p>Martin Kleppmann(写DDIA的老哥) 提出上面的挑战后，给了一个非常著名的结论：</p>
<p><strong>the algorithm makes dangerous assumptions about timing and system clocks(算法依据时间和系统时钟不靠谱)</strong></p>
<p><img src="https://liulixiang1988.github.io/images/2021-08-14-unsafe-lock.png" alt="unsafe lock"></p>
<p>于是老哥就给出了一个如何做分布式锁的文章：<a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html" target="_blank" rel="noopener">How to do distributed locking</a>.</p>
<p>老哥给出了使用fencing token的方案：</p>
<p><img src="https://liulixiang1988.github.io/images/2021-08-14-fencing-tokens.png" alt="fencing tokens"></p>
<p>该方案需要锁服务与数据配合，锁服务提供token，数据对token进行单调性验证。本质上是一个乐观锁，而且需要数据存储侧配合，比较复杂。</p>
<p>于是Redis作者Antirez做出了回应：</p>
<p>TL;DR <a href="http://antirez.com/news/101" target="_blank" rel="noopener">http://antirez.com/news/101</a></p>
<ul>
<li>用这个方案还要分布式锁干啥，直接用乐观锁不就行了(Fencing is great, with this, no need distributed lock!)</li>
<li>时钟跳变是个大问题，Redlock搞不定(Clock jump is a big problem, Redlock cannot work correctly)<br>under this problem.</li>
<li>Redlock能搞定网络延时和hang住的问题(For network delay &amp; client hangs, they all will be fine.)</li>
</ul>
<p>Antirez最后说，分布式锁做的最好的是Zookeeper。</p>
<h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><p><a href="https://zookeeper.apache.org/doc/r3.1.2/recipes.html" target="_blank" rel="noopener">https://zookeeper.apache.org/doc/r3.1.2/recipes.html</a></p>
<p>上面的连接给了几个比较厉害的Zookeeper用法，包含了分布式锁。</p>
<ul>
<li>在<code>_locknode/lock-</code>下创建顺序临时节点(Create <code>_locknode/lock-</code> with Sequence &amp; Ephemeral flag)</li>
<li>这些节点看是不是节点下最小的(Get children to see to check if I am the lowest sequence number)<ul>
<li>Yes. Get the Lock</li>
<li>No. Set the watch</li>
</ul>
</li>
</ul>
<p><img src="https://liulixiang1988.github.io/images/2021-08-14-lock-zk.png" alt="zk lock"></p>
<h3 id="Google-Chubby"><a href="#Google-Chubby" class="headerlink" title="Google Chubby"></a>Google Chubby</h3><p><img src="https://liulixiang1988.github.io/images/2021-08-14-lock-chubby.png" alt="chubby"></p>
<ul>
<li>两个组件：Master &amp; Client SDK</li>
<li>集群：典型的5个节点</li>
<li>副本：使用Paxos来选主与副本</li>
<li>Failover：Master失败后，其他副本进行选举</li>
<li>Session &amp; Keepalive<ul>
<li>客户端请求或结束session</li>
<li>租约间隔与租约释放</li>
</ul>
</li>
<li>性能一般</li>
</ul>
<p>除了论文，还可看这个进行了解：<a href="https://www.slideshare.net/romain_jacotin/the-google-chubby-lock-service-for-looselycoupled-distributed-systems" target="_blank" rel="noopener">https://www.slideshare.net/romain_jacotin/the-google-chubby-lock-service-for-looselycoupled-distributed-systems</a></p>
<p>需要说明，为了防止脑裂，每个master使用不同的周期。每次client连接新的master时，需要协商获取周期。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Concurrent transaction need be synchronized<ul>
<li>DB Lock is fine, but the Optimistic Lock is great.</li>
<li>Sharding the data cannot solve the all of problem</li>
</ul>
</li>
<li>Distributed Lock Service need the following features:<ul>
<li>High Availability<ul>
<li>Data Replicas - strong consistent protocol – Pasox, Raft, zab</li>
<li>Master Failover – Leader election</li>
</ul>
</li>
<li>Deadlock Detection<ul>
<li>Keepalive &amp; Lease Timeout</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>System Design</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计原理1-4+1架构图与UML</title>
    <url>/2021/02/18/2021-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="4-1架构视图"><a href="#4-1架构视图" class="headerlink" title="4+1架构视图"></a>4+1架构视图</h2><p><img src="https://liulixiang1988.github.io/images/2021-02-18-4-1.png" alt="img"></p>
<ol>
<li><strong>逻辑视图</strong>：描述软件的功能逻辑，由哪些模块组成，模块中包含哪些类，其依赖关系如何。</li>
<li><strong>开发视图</strong>：包括系统架构层面的层次划分，包的管理，依赖的系统与第三方的程序包。开发视图某些方面和逻辑视图有一定重复性，不同视角看到的可能是同一个东西，开发视图中一个程序包，可能正好对应逻辑视图中的一个功能模块。</li>
<li><strong>过程视图</strong>：描述程序运行期的进程、线程、对象实例，以及与此相关的并发、同步、通信等问题。</li>
<li><strong>物理视图</strong>：描述软件如何安装并部署到物理的服务上，以及不同的服务器之间如何关联、通信。</li>
<li><strong>场景视图</strong>：针对具体的用例场景，将上述 4 个视图关联起来，一方面从业务角度描述，功能流程如何完成，一方面从软件角度描述，相关组成部分如何互相依赖、调用。</li>
</ol>
<h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>在<strong>详细设计阶段</strong>与<strong>需求分析阶段</strong>使用。</p>
<p>一个类包含三个部分：类的名字、类的属性列表和类的方法列表。类之间有 6 种静态关系：关联、依赖、组合、聚合、继承、泛化。</p>
<p>在需求分析阶段，可以将关键的领域模型对象用类图画出来，在这个阶段中，我们需要关注的是领域对象的识别及其关系，所以用简化的类图来描述，只画出类的名字及关系就可以了。</p>
<h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><p>序列图通常用于表示对象之间的交互，这个对象可以是类对象，也可以是更大粒度的参与者，比如组件、服务器、子系统等，总之，只要是描述不同参与者之间交互的，都可以使用序列图，也就是说，<strong>在软件设计的不同阶段</strong>，都可以画序列图。</p>
<h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p><img src="https://liulixiang1988.github.io/images/2021-02-18-component.png" alt="component"></p>
<p>主要用于<strong>概要设计阶段</strong>，用于描述依赖关系。如果想要描述动态关系，使用序列图。</p>
<h3 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h3><p>主要用于<strong>概要设计阶段</strong>。</p>
<p>部署图描述软件系统的最终部署情况，比如需要部署多少服务器，关键组件都部署在哪些服务器上。根据部署图，所有相关者，诸如客户、老板、工程师都能清晰地了解到最终运行的系统在物理上是什么样子，和现有的系统服务器的关系，和第三方服务器的关系。根据部署图，还可以估算服务器和第三方软件的采购成本。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-deploy.png" alt="deployment"></p>
<h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p>用例图主要用在<strong>需求分析阶段</strong>，通过反映用户和软件系统的交互，描述系统的功能需求。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-use-case.png" alt="use case"></p>
<p>图中小人形象的元素，被称为角色，角色可以是人，也可以是其他的系统。系统的功能可能会很复杂，所以一张用例图可能只包含其中一小部分功能，这些功能被一个矩形框框起来，这个矩形框被称为用例的边界。框里的椭圆表示一个一个的功能，功能之间可以调用依赖，也可以进行功能扩展。</p>
<p>因为用例图中功能描述比较简单，通常还需要对用例图配以文字说明，形成需求文档。</p>
<h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><p>状态图用来展示单个对象生命周期的状态变迁。</p>
<p>业务系统中，很多重要的领域对象都有比较复杂的状态变迁，比如账号，有创建状态、激活状态、冻结状态、欠费状态等等各种状态。此外，用户、订单、商品、红包这些常见的领域模型都有多种状态。</p>
<p>这些状态的变迁描述可以在用例图中用文字描述，随着角色的各种操作而改变，但是用这种方式描述，状态散乱在各处，不要说开发的时候容易搞错，就是产品经理自己在设计的时候，也容易搞错对象的状态变迁。</p>
<p>UML 的状态图可以很好地解决这一问题，一张状态图描述一个对象生命周期的各种状态，及其变迁的关系。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-status.png" alt="status"></p>
<p>状态图要在<strong>需求分析阶段</strong>画，描述状态变迁的逻辑关系，在<strong>详细设计阶段</strong>也要画，这个时候，状态要用枚举值表示，以指导具体的开发。</p>
<h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><p>活动图主要用来描述过程逻辑和业务流程。UML 中没有流程图，很多时候，人们用活动图代替流程图。</p>
<p><img src="https://liulixiang1988.github.io/images/2021-02-18-activity.png" alt="activity"></p>
<p>活动图和早期流程图的图形元素也很接近，实心圆代表流程开始，空心圆代表流程结束，圆角矩形表示活动，菱形表示分支判断。</p>
<p>此外，活动图引入了一个重要的概念——泳道。活动图可以根据活动的范围，将活动根据领域、系统和角色等划分到不同的泳道中，使流程边界更加清晰。</p>
<p>活动图也比较有普适性，可以在<strong>需求分析阶段</strong>描述业务流程，也可以在<strong>概要设计阶段</strong>描述子系统和组件的交互，还可以在<strong>详细设计阶段</strong>描述一个类方法内部的计算流程。</p>
<h3 id="使用合适的-UML-模型构建一个设计文档"><a href="#使用合适的-UML-模型构建一个设计文档" class="headerlink" title="使用合适的 UML 模型构建一个设计文档"></a>使用合适的 UML 模型构建一个设计文档</h3><p>在<strong>需求分析阶段</strong>，主要是通过用例图来描述系统的功能与使用场景；对于关键的业务流程，可以通过活动图描述；如果在需求阶段就提出要和现有的某些子系统整合，那么可以通过时序图描述新系统和原来的子系统的调用关系；可以通过简化的类图进行领域模型抽象，并描述核心领域对象之间的关系；如果某些对象内部会有复杂的状态变化，比如用户、订单这些，可以用状态图进行描述。</p>
<p>在<strong>概要设计阶段</strong>，通过部署图描述系统最终的物理蓝图；通过组件图以及组件时序图设计软件主要模块及其关系；还可以通过组件活动图描述组件间的流程逻辑。</p>
<p>在<strong>详细设计阶段</strong>，主要输出的就是类图和类的时序图，指导最终的代码开发，如果某个类方法内部有比较复杂的逻辑，那么可以用画方法的活动图进行描述。</p>
]]></content>
      <categories>
        <category>System Design</category>
      </categories>
      <tags>
        <tag>System Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploying Applications the DevOps Way</title>
    <url>/2022/01/17/2022-01-17-Deploying-Applications-The-DevOps-Way/</url>
    <content><![CDATA[<h1 id="Deploying-Applications-the-DevOps-Way"><a href="#Deploying-Applications-the-DevOps-Way" class="headerlink" title="Deploying Applications the DevOps Way"></a>Deploying Applications the DevOps Way</h1><p>[TOC]</p>
<h2 id="1-Using-the-Helm-Package-Manager"><a href="#1-Using-the-Helm-Package-Manager" class="headerlink" title="1. Using the Helm Package Manager"></a>1. Using the Helm Package Manager</h2><ul>
<li>Helm is used to streamline installing and managing Kubernetes applications.</li>
<li>Helm consists of the <code>helm</code> tool, which needs to be installed, and a chart.</li>
<li>A chart is a Helm package, which contains the following:<ul>
<li>A description of the package</li>
<li>One or more templates containing Kubernetes manifest files</li>
</ul>
</li>
<li>Charts can be stored locally, or accessed from remote Helm repositories.</li>
</ul>
<h3 id="Demo-Installing-the-Helm-Binary"><a href="#Demo-Installing-the-Helm-Binary" class="headerlink" title="Demo: Installing the Helm Binary"></a>Demo: Installing the Helm Binary</h3><ul>
<li>Fetch the binary from <code>https://github.com/helm/helm/releases</code> ; check for the latest release!</li>
<li><code>tar xvf helm-xxx.tar.gz</code></li>
<li><code>sudo mv linux-amd64/helm /usr/local/bin/</code></li>
<li><code>helm version</code></li>
</ul>
<h3 id="Getting-Access-to-Helm-Charts"><a href="#Getting-Access-to-Helm-Charts" class="headerlink" title="Getting Access to Helm Charts"></a>Getting Access to Helm Charts</h3><p>The main site for finding Helm charts, is through <a href="https://artifacthub.io" target="_blank" rel="noopener">https://artifacthub.io</a></p>
<p>This is a major way for finding repository names. We can search for specific software here, and run the commands to install it; for instance, to run the kubernetes dashboard:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add stable https://kubernetes-charts.storage.googleapis.com</span></span><br><span class="line">helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/</span><br><span class="line">helm install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<h3 id="Demo-Managing-Helm-Repositories"><a href="#Demo-Managing-Helm-Repositories" class="headerlink" title="Demo: Managing Helm Repositories"></a>Demo: Managing Helm Repositories</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">helm repo list</span><br><span class="line"><span class="comment"># show all the charts in the bitnami repository</span></span><br><span class="line">helm search repo bitnami</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<h2 id="2-Working-with-Helm-Charts"><a href="#2-Working-with-Helm-Charts" class="headerlink" title="2. Working with Helm Charts"></a>2. Working with Helm Charts</h2><h3 id="Installing-Helm-Charts"><a href="#Installing-Helm-Charts" class="headerlink" title="Installing Helm Charts"></a>Installing Helm Charts</h3><p>After adding repositories, use <code>helm repo update</code> to ensure access to the most up-to-date charts.</p>
<p>Use <code>helm install</code> to install a chart with default parameters.</p>
<p>After installation, use <code>helm list</code> to list currently installed charts.</p>
<p>Use <code>helm delete</code> to remove a chart.</p>
<h3 id="Demo-Installing-a-Helm-Chart"><a href="#Demo-Installing-a-Helm-Chart" class="headerlink" title="Demo: Installing a Helm Chart"></a>Demo: Installing a Helm Chart</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install mysql and generate name for you</span></span><br><span class="line">helm install bitnami/mysql --generate-name</span><br><span class="line">kubectl get all</span><br><span class="line"><span class="comment"># show the chart installed in the cluster</span></span><br><span class="line">helm show chart bitnami/mysql</span><br><span class="line">helm show all bitnami/mysql</span><br><span class="line">helm list</span><br><span class="line">helm status mysql-xxx</span><br></pre></td></tr></table></figure>

<h3 id="Customizing-Before-Installing"><a href="#Customizing-Before-Installing" class="headerlink" title="Customizing Before Installing"></a>Customizing Before Installing</h3><ul>
<li>A helm chart consists of templates to which specific values are applied.</li>
<li>The values are specified in the <code>values.yaml</code> file, within the helm chart.</li>
<li>The easiest way to customize a helm chart is by first using <code>helm pull</code> to fetch a local copy of the helm chart.</li>
<li>Next edit the <code>chartname/values.yaml</code> to change any values.</li>
</ul>
<h3 id="Demo-Customizing-a-Helm-Chart-Before-Installing"><a href="#Demo-Customizing-a-Helm-Chart-Before-Installing" class="headerlink" title="Demo: Customizing a Helm Chart Before Installing"></a>Demo: Customizing a Helm Chart Before Installing</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm show values bitnami/nginx</span><br><span class="line">helm pull bitnami/nginx</span><br><span class="line">tar xvf nginx-xxx.tgz</span><br><span class="line">vim nginx/values.yaml</span><br><span class="line">helm template --debug nginx</span><br><span class="line">helm install -f nginx/values.yaml my-nginx nginx/</span><br></pre></td></tr></table></figure>

<h2 id="3-Using-Kustomize"><a href="#3-Using-Kustomize" class="headerlink" title="3. Using Kustomize"></a>3. Using Kustomize</h2><h3 id="Understanding-Kustomize"><a href="#Understanding-Kustomize" class="headerlink" title="Understanding Kustomize"></a>Understanding Kustomize</h3><ul>
<li><code>kustomize</code> is a kubernetes feature, that use a file with the name <code>kustomization.yaml</code> to apply changes to a set of resources.</li>
<li>This is convenient for applying changings to input files that the user does not control himeself, and which contents may change because of new versions appearing in Git.</li>
<li>Use <code>kubectl apply -k ./</code> in the directory with the <code>kustomization.yaml</code> file to apply the changes.</li>
<li>Use <code>kubectl delete -k ./</code> in the same directory to delete al that was created by the Kustomization.</li>
</ul>
<h3 id="Understanding-a-Sample-Kustomization-File"><a href="#Understanding-a-Sample-Kustomization-File" class="headerlink" title="Understanding a Sample Kustomization File"></a>Understanding a Sample Kustomization File</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span> <span class="comment"># defines which resources (in YAML files) apply</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">deployment.yaml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">service.yaml</span></span><br><span class="line"><span class="attr">namePrefix:</span> <span class="string">test-</span> <span class="comment"># defines a prefix for all the resources</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">testing</span> <span class="comment"># defines the namespace for all the resources</span></span><br><span class="line"><span class="attr">nameSuffix:</span> <span class="string">"-001"</span></span><br><span class="line"><span class="attr">commonLabels:</span> <span class="comment"># defines labels that are common to all the resources</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">bingo</span></span><br><span class="line"><span class="attr">commonAnnotations:</span></span><br><span class="line">  <span class="attr">oncallPager:</span> <span class="number">800</span><span class="number">-555</span><span class="number">-1212</span></span><br></pre></td></tr></table></figure>

<h3 id="Using-Kustomization-Overlays"><a href="#Using-Kustomization-Overlays" class="headerlink" title="Using Kustomization Overlays"></a>Using Kustomization Overlays</h3><p>Kustomization ca be used to define a base configuration, as wel as multiple deployment scenarios (overlays) as in dev, staging and prod for instance.</p>
<p>In such a configuration, the main <code>kustomization.yaml</code> defines the structure:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/someApp</span><br><span class="line">├── base</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── kustomization.yaml</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── overlays</span><br><span class="line">    ├── development</span><br><span class="line">    │   ├── cpu_count.yaml</span><br><span class="line">    │   ├── kustomization.yaml</span><br><span class="line">    │   └── replica_count.yaml</span><br><span class="line">    └── production</span><br><span class="line">        ├── cpu_count.yaml</span><br><span class="line">        ├── kustomization.yaml</span><br><span class="line">        └── replica_count.yaml</span><br></pre></td></tr></table></figure>

<p>In each of the <code>overlays/{dev,staging,prod}/kustomization.yaml</code>, users would reference the base configuration in the resources field, and specify changes for the specific environment:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">../../base</span></span><br><span class="line"><span class="attr">namePrefix:</span> <span class="string">dev-</span></span><br><span class="line"><span class="attr">namespace:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">commonLabels:</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">development</span></span><br></pre></td></tr></table></figure>

<h3 id="Demo-Using-Kustomization"><a href="#Demo-Using-Kustomization" class="headerlink" title="Demo: Using Kustomization"></a>Demo: Using Kustomization</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat deployment.yaml</span><br><span class="line">cat service.yaml</span><br><span class="line">kubectl apply -f deployment.yaml service.yaml</span><br><span class="line">cat kustomization.yaml</span><br><span class="line">kubectl apply -k . <span class="comment"># use kustomization.yaml to apply the changes</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">nginx-friday20</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-friday20</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">nginx-friday20</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">nginx-friday20</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx-friday20</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx-friday20</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">nginx-friday20</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-friday20</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">nginx-friday20</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kustomization.yaml</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deployment.yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">service.yaml</span></span><br><span class="line"><span class="attr">namePrefix:</span> <span class="string">test-</span></span><br><span class="line"><span class="attr">commonLabels:</span></span><br><span class="line">  <span class="attr">environment:</span> <span class="string">testing</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Implementing-Blue-Green-Deployments"><a href="#4-Implementing-Blue-Green-Deployments" class="headerlink" title="4. Implementing Blue-Green Deployments"></a>4. Implementing Blue-Green Deployments</h2><p>Blue-green deployments are a way to deploy a new version of a service in a cluster, while keeping the old version running. It accomplishes zero downtime application upgrade.</p>
<p>Essential is the possibility to test the new version of the application before taking it into production.</p>
<p>The bule Deployment is the current application version, and the green Deployment is the new version.</p>
<p>Once the green Deployment is ready, the blue Deployment is deleted.</p>
<p>Blue-green deployments can easily be implemented using Kubernetes Services.</p>
<h3 id="Procedure-Overview"><a href="#Procedure-Overview" class="headerlink" title="Procedure Overview"></a>Procedure Overview</h3><ul>
<li>Start with the already running application.</li>
<li>Create a new deployment for the new version of the application, and test with temporary Service resource.</li>
<li>If all tests pass, remove the temporary Service resource.</li>
<li>Remove the old Service resource (pointing to the blue Deployment), and immediately create a new Service resource pointing to the green Deployment.</li>
<li>After successful transition, remove the blue Deployment.</li>
<li>It is essential to keep the Service name unchanged, so that front-end resources such as Ingress will automatically pick up the transition.</li>
</ul>
<h3 id="Demo-Blue-Green-Deployments"><a href="#Demo-Blue-Green-Deployments" class="headerlink" title="Demo: Blue-Green Deployments"></a>Demo: Blue-Green Deployments</h3><ul>
<li><code>kubectl create deploy blue-nginx --image=nginx:1.14 --replicas=3</code></li>
<li><code>kubectl expose deploy blue-nginx --port=80 --target-port=80 --name=bgnginx</code></li>
<li><code>kubectl get deploy blue-nginx -o yaml &gt; green-nginx.yaml</code><ul>
<li>Clean up dynamic generated stuff</li>
<li>Change Image version</li>
<li>Change “blue” to “green” throughout</li>
</ul>
</li>
<li><code>kubectl create -f green-nginx.yaml</code></li>
<li><code>kubectl get pods</code></li>
<li><code>kubectl delete svc bgnginx; kubectl expose deploy green-nginx --port=80 --target-port=80 --name=bgnginx</code></li>
<li><code>kubectl delete deploy blue-nginx</code></li>
</ul>
<h2 id="5-Implement-Canary-Deployments"><a href="#5-Implement-Canary-Deployments" class="headerlink" title="5. Implement Canary Deployments"></a>5. Implement Canary Deployments</h2><p>A canary deployment is an update strategy where you first push the update at small scale to see if it works well.</p>
<p>In terms of Kuberentes, you could image a Deployment that runs 4 replicas.</p>
<p>Next you add a new Deployment that uses the same label.</p>
<p>As the Service is load balancing, only 1 out of 5 requests would be serviced by the new version.</p>
<p>And if that doesnt seem to be working, you can easily delete it.</p>
<h2 id="6-CRD-Custom-Resource-Definition"><a href="#6-CRD-Custom-Resource-Definition" class="headerlink" title="6. CRD: Custom Resource Definition"></a>6. CRD: Custom Resource Definition</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#crd-object.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backups.stable.example.com</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">stable.example.com</span></span><br><span class="line">  <span class="attr">versions:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">served:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="attr">openAPIV3Schema:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">        <span class="attr">properties:</span></span><br><span class="line">          <span class="attr">spec:</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">            <span class="attr">properties:</span></span><br><span class="line">              <span class="attr">backupType:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">              <span class="attr">image:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">              <span class="attr">replicas:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">backups</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">backup</span></span><br><span class="line">    <span class="attr">shortNames:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">bks</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">BackUp</span></span><br></pre></td></tr></table></figure>

<p><code>k apply -f crd-object.yaml</code></p>
<p><code>k api-versions | grep backup</code></p>
<p><code>k api-resources | grep backup</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crd-backup.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">"stable.example.com/v1"</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">BackUp</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mybackup</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">backupType:</span> <span class="string">full</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">linux-backup-image</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="7-Using-Operator"><a href="#7-Using-Operator" class="headerlink" title="7. Using Operator"></a>7. Using Operator</h2><ul>
<li>Operators are custom applications, based on Custom Resource Definitions.</li>
<li>Operators can be seen as a way of packaging, running and managing applications in Kuberentes.</li>
<li>Opeartors are based on Controllers, which are Kubernetes components that continuously operate dynamic systems.</li>
<li>The Controller loop is the essence of any Controllers.</li>
<li>The Kuberentes Controller manager runs a reconciliation loop, which continuously observes the current state, compares it to the desired state, and adjusts it when necessary.</li>
<li>Operators are application-specific Controllers.</li>
<li>Operators can be added to Kubernetes by devloping them yourself.</li>
<li>Operators are alse available from community websites.</li>
<li>A common registry for Operators is found at operatorhub.io (which is rather OpenShift oriented).</li>
<li>Many solutions from the Kuberentes ecosystem are provided as operators:<ul>
<li>Prometheus: a monitoring and alerting solution</li>
<li>Tigera: the operator that manages the calico network plugin</li>
<li>Jaeger: a distributed tracing solution</li>
</ul>
</li>
</ul>
<h3 id="Demo-Installing-the-Calico-Network-Plugin"><a href="#Demo-Installing-the-Calico-Network-Plugin" class="headerlink" title="Demo: Installing the Calico Network Plugin"></a>Demo: Installing the Calico Network Plugin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube stop; minikube delete</span><br><span class="line">minikube start --network-plugin=cni --extra-config=kubeadm.pod-network-cidr=10.10.0.0/16</span><br><span class="line">kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml</span><br><span class="line">kubectl api-resources | grep tigera</span><br><span class="line">kubectl get pods -n tigera-operator tier-operator-tigera-xxx-yyy</span><br><span class="line">wget https://docs.projectcalico.org/manifests/custom-resources.yaml</span><br><span class="line">sed -i -e s/192.168.0.0/10.10.0.0/g custom-resources.yaml</span><br><span class="line">kubectl get installation -o yaml</span><br><span class="line">kubectl get pods -n calico-system</span><br></pre></td></tr></table></figure>

<h2 id="8-Using-StatefulSets"><a href="#8-Using-StatefulSets" class="headerlink" title="8. Using StatefulSets"></a>8. Using StatefulSets</h2><ul>
<li>The main purpose of StatefulSets is to provide a persistent identity to Pods as well as the Pod-specific storage.</li>
<li>Each Pod in a StatefulSet has a persistent identifier that it keeps across rescheduling.</li>
<li>StatefulSet provides ordering as well.</li>
<li>Using StatefulSet is valuable for applications that require any of the following:<ul>
<li>Stable and uniquere network identifiers</li>
<li>Stable persistent storage</li>
<li>Ordered deployment and scaling</li>
<li>Order automated rolling updates</li>
</ul>
</li>
</ul>
<h3 id="Understanding-StatefulSets-Limitations"><a href="#Understanding-StatefulSets-Limitations" class="headerlink" title="Understanding StatefulSets Limitations"></a>Understanding StatefulSets Limitations</h3><ul>
<li>Storage Provisioning based on StorageClass must be available.</li>
<li>To ensure data safety, volumes created by the StatefulSet are not deleted while deleting the StatefulSet</li>
<li>A headless Service is required for StatefulSets</li>
<li>To guarantee removal of StatefulSet Pods, scale down the number of Pods to 0 before moving the StatefulSet.</li>
</ul>
<h3 id="Demo-Using-a-StatefulSet"><a href="#Demo-Using-a-StatefulSet" class="headerlink" title="Demo: Using a StatefulSet"></a>Demo: Using a StatefulSet</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sfs.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span> <span class="comment"># This is required for StatefulSets</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.template.metadata.labels</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">"nginx"</span> <span class="comment"># This is requred for StatefulSets</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># by default is 1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># has to match .spec.selector.matchLabels</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/nginx-slim:0.8</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span> <span class="comment"># This is required for StatefulSets if we use PersistentVolumeClaim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> <span class="string">[</span> <span class="string">"ReadWriteOnce"</span> <span class="string">]</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">"standard"</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure>

<p><code>k get storageclass</code></p>
<p><code>k apply -f sfs.yaml</code></p>
<p><code>k get all</code></p>
<p>StatefulSets don’t use ReplicaSet.</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Helm</tag>
        <tag>Kustomize</tag>
        <tag>Operator</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 Renew</title>
    <url>/2024/01/22/2024-01-22-Renew/</url>
    <content><![CDATA[<p>2024年了，我已经36岁了，我还是一个程序员，我还是在微软工作，似乎还是没有什么变化。但是仔细想来，周边发生了很多的变化。</p>
<p>去年举家从南京搬往苏州，女儿也上了小学。每天上班下班带娃写作业，周末带娃去骑自行车。</p>
<p>每年得学习一些新的知识来刷新自己，去年有几天学习了深度学习相关的知识，觉得似乎没有想象的那么难。今年打算继续在NLP和LLM方向深入学习。</p>
<p>之前一直在做微服务相关的工作，今年打算在微服务的基础上，深入学习一下Service Mesh相关的知识。把自己在istio上的一些实践总结一下。</p>
<p>新的一年，也要继续骑车，保持健康的身体。</p>
<p>新的一年，也要继续学习，保持年轻的心态。最近发现自己心态老了，不再愿意去深入了解一些新的技术，总是觉得自己已经够用了，不需要再去学习新的东西了。这是不对的。</p>
<p>新的一年，也要继续写作，保持自己的思考。最近发现自己的写作能力下降了，提笔时经常不知道自己在想什么。</p>
<p><img src="https://liulixiang1988.github.io/images/2024-01-22-huzhou.jpeg" alt="2023-11-01-huzhou.jpeg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
</search>
